

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 25 12:22:06 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 1.45
    62                           ; Generated 16/11/2017 GMT
    63                           ; 
    64                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4620 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     
    96                           	psect	idataCOMRAM
    97  002EAC                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _LCD_INIT_STRING
   101  002EAC  28                 	db	40
   102  002EAD  0C                 	db	12
   103  002EAE  01                 	db	1
   104  002EAF  06                 	db	6
   105                           
   106                           	psect	mediumconst
   107  00FEFA                     __pmediumconst:
   108                           	opt stack 0
   109  00FEFA  00                 	db	0
   110  00FEFB                     __powers_:
   111                           	opt stack 0
   112  00FEFB  0000               	dw	0
   113  00FEFD  3F80               	dw	16256
   114  00FEFF  0000               	dw	0
   115  00FF01  4120               	dw	16672
   116  00FF03  0000               	dw	0
   117  00FF05  42C8               	dw	17096
   118  00FF07  0000               	dw	0
   119  00FF09  447A               	dw	17530
   120  00FF0B  4000               	dw	16384
   121  00FF0D  461C               	dw	17948
   122  00FF0F  5000               	dw	20480
   123  00FF11  47C3               	dw	18371
   124  00FF13  2400               	dw	9216
   125  00FF15  4974               	dw	18804
   126  00FF17  9680               	dw	38528
   127  00FF19  4B18               	dw	19224
   128  00FF1B  BC20               	dw	48160
   129  00FF1D  4CBE               	dw	19646
   130  00FF1F  6B28               	dw	27432
   131  00FF21  4E6E               	dw	20078
   132  00FF23  02F9               	dw	761
   133  00FF25  5015               	dw	20501
   134  00FF27  78EC               	dw	30956
   135  00FF29  60AD               	dw	24749
   136  00FF2B  F2CA               	dw	62154
   137  00FF2D  7149               	dw	29001
   138  00FF2F                     __end_of__powers_:
   139                           	opt stack 0
   140  00FF2F                     __npowers_:
   141                           	opt stack 0
   142  00FF2F  0000               	dw	0
   143  00FF31  3F80               	dw	16256
   144  00FF33  CCCD               	dw	52429
   145  00FF35  3DCC               	dw	15820
   146  00FF37  D70A               	dw	55050
   147  00FF39  3C23               	dw	15395
   148  00FF3B  126F               	dw	4719
   149  00FF3D  3A83               	dw	14979
   150  00FF3F  B717               	dw	46871
   151  00FF41  38D1               	dw	14545
   152  00FF43  C5AC               	dw	50604
   153  00FF45  3727               	dw	14119
   154  00FF47  37BD               	dw	14269
   155  00FF49  3586               	dw	13702
   156  00FF4B  BF95               	dw	49045
   157  00FF4D  33D6               	dw	13270
   158  00FF4F  CC77               	dw	52343
   159  00FF51  322B               	dw	12843
   160  00FF53  705F               	dw	28767
   161  00FF55  3089               	dw	12425
   162  00FF57  E6FF               	dw	59135
   163  00FF59  2EDB               	dw	11995
   164  00FF5B  E508               	dw	58632
   165  00FF5D  1E3C               	dw	7740
   166  00FF5F  4260               	dw	16992
   167  00FF61  0DA2               	dw	3490
   168  00FF63                     __end_of__npowers_:
   169                           	opt stack 0
   170  00FF63                     _dpowers:
   171                           	opt stack 0
   172  00FF63  0001               	dw	1
   173  00FF65  0000               	dw	0
   174  00FF67  000A               	dw	10
   175  00FF69  0000               	dw	0
   176  00FF6B  0064               	dw	100
   177  00FF6D  0000               	dw	0
   178  00FF6F  03E8               	dw	1000
   179  00FF71  0000               	dw	0
   180  00FF73  2710               	dw	10000
   181  00FF75  0000               	dw	0
   182  00FF77  86A0               	dw	34464
   183  00FF79  0001               	dw	1
   184  00FF7B  4240               	dw	16960
   185  00FF7D  000F               	dw	15
   186  00FF7F  9680               	dw	38528
   187  00FF81  0098               	dw	152
   188  00FF83  E100               	dw	57600
   189  00FF85  05F5               	dw	1525
   190  00FF87  CA00               	dw	51712
   191  00FF89  3B9A               	dw	15258
   192  00FF8B                     __end_of_dpowers:
   193                           	opt stack 0
   194  0000                     _TXREG	set	4013
   195  0000                     _PIR1bits	set	3998
   196  0000                     _RCREG	set	4014
   197  0000                     _RCSTAbits	set	4011
   198  0000                     _RCSTA	set	4011
   199  0000                     _TXSTAbits	set	4012
   200  0000                     _SPBRGH	set	4016
   201  0000                     _SPBRG	set	4015
   202  0000                     _TXSTA	set	4012
   203  0000                     _BAUDCONbits	set	4024
   204  0000                     _CCP1CONbits	set	4029
   205  0000                     _CCPR1L	set	4030
   206  0000                     _TRISCbits	set	3988
   207  0000                     _PR2	set	4043
   208  0000                     _ADRESL	set	4035
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADCON2	set	4032
   211  0000                     _ADCON0bits	set	4034
   212  0000                     _PORTEbits	set	3972
   213  0000                     _T3CONbits	set	4017
   214  0000                     _PORTBbits	set	3969
   215  0000                     _PORTCbits	set	3970
   216  0000                     _PIR2bits	set	4001
   217  0000                     _CCPR2H	set	4028
   218  0000                     _CCPR2L	set	4027
   219  0000                     _PIR2	set	4001
   220  0000                     _PIR1	set	3998
   221  0000                     _IPR2	set	4002
   222  0000                     _IPR1	set	3999
   223  0000                     _PIE1bits	set	3997
   224  0000                     _INTCON3bits	set	4080
   225  0000                     _INTCONbits	set	4082
   226  0000                     _INTCON2	set	4081
   227  0000                     _INTCON3	set	4080
   228  0000                     _INTCON	set	4082
   229  0000                     _CCP2CON	set	4026
   230  0000                     _TMR2	set	4044
   231  0000                     _T2CON	set	4042
   232  0000                     _TMR3L	set	4018
   233  0000                     _TMR3H	set	4019
   234  0000                     _PIE2bits	set	4000
   235  0000                     _T3CON	set	4017
   236  0000                     _LATCbits	set	3979
   237  0000                     _T2CONbits	set	4042
   238  0000                     _CCP1CON	set	4029
   239  0000                     _TRISE	set	3990
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISA	set	3986
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISB	set	3987
   244  0000                     _ADCON1	set	4033
   245  0000                     _ADCON0	set	4034
   246  00FF8B                     STR_3:
   247  00FF8B  48                 	db	72	;'H'
   248  00FF8C  53                 	db	83	;'S'
   249  00FF8D  3A                 	db	58	;':'
   250  00FF8E  20                 	db	32
   251  00FF8F  25                 	db	37
   252  00FF90  64                 	db	100	;'d'
   253  00FF91  20                 	db	32
   254  00FF92  48                 	db	72	;'H'
   255  00FF93  43                 	db	67	;'C'
   256  00FF94  3A                 	db	58	;':'
   257  00FF95  25                 	db	37
   258  00FF96  35                 	db	53	;'5'
   259  00FF97  2E                 	db	46
   260  00FF98  31                 	db	49	;'1'
   261  00FF99  66                 	db	102	;'f'
   262  00FF9A  20                 	db	32
   263  00FF9B  25                 	db	37
   264  00FF9C  25                 	db	37
   265  00FF9D  20                 	db	32
   266  00FF9E  0A                 	db	10
   267  00FF9F  00                 	db	0
   268  00FFA0                     STR_1:
   269  00FFA0  52                 	db	82	;'R'
   270  00FFA1  54                 	db	84	;'T'
   271  00FFA2  3A                 	db	58	;':'
   272  00FFA3  25                 	db	37
   273  00FFA4  35                 	db	53	;'5'
   274  00FFA5  2E                 	db	46
   275  00FFA6  31                 	db	49	;'1'
   276  00FFA7  66                 	db	102	;'f'
   277  00FFA8  43                 	db	67	;'C'
   278  00FFA9  20                 	db	32
   279  00FFAA  20                 	db	32
   280  00FFAB  20                 	db	32
   281  00FFAC  20                 	db	32
   282  00FFAD  48                 	db	72	;'H'
   283  00FFAE  20                 	db	32
   284  00FFAF  43                 	db	67	;'C'
   285  00FFB0  0A                 	db	10
   286  00FFB1  00                 	db	0
   287  00FFB2                     STR_7:
   288  00FFB2  4D                 	db	77	;'M'
   289  00FFB3  44                 	db	68	;'D'
   290  00FFB4  3A                 	db	58	;':'
   291  00FFB5  20                 	db	32
   292  00FFB6  41                 	db	65	;'A'
   293  00FFB7  55                 	db	85	;'U'
   294  00FFB8  54                 	db	84	;'T'
   295  00FFB9  4F                 	db	79	;'O'
   296  00FFBA  20                 	db	32
   297  00FFBB  43                 	db	67	;'C'
   298  00FFBC  4F                 	db	79	;'O'
   299  00FFBD  4F                 	db	79	;'O'
   300  00FFBE  4C                 	db	76	;'L'
   301  00FFBF  20                 	db	32
   302  00FFC0  0A                 	db	10
   303  00FFC1  00                 	db	0
   304  00FFC2                     STR_5:
   305  00FFC2  4D                 	db	77	;'M'
   306  00FFC3  44                 	db	68	;'D'
   307  00FFC4  3A                 	db	58	;':'
   308  00FFC5  20                 	db	32
   309  00FFC6  43                 	db	67	;'C'
   310  00FFC7  4F                 	db	79	;'O'
   311  00FFC8  4F                 	db	79	;'O'
   312  00FFC9  4C                 	db	76	;'L'
   313  00FFCA  20                 	db	32
   314  00FFCB  20                 	db	32
   315  00FFCC  20                 	db	32
   316  00FFCD  20                 	db	32
   317  00FFCE  20                 	db	32
   318  00FFCF  0A                 	db	10
   319  00FFD0  00                 	db	0
   320  00FFD1                     STR_6:
   321  00FFD1  4D                 	db	77	;'M'
   322  00FFD2  44                 	db	68	;'D'
   323  00FFD3  3A                 	db	58	;':'
   324  00FFD4  20                 	db	32
   325  00FFD5  48                 	db	72	;'H'
   326  00FFD6  45                 	db	69	;'E'
   327  00FFD7  41                 	db	65	;'A'
   328  00FFD8  54                 	db	84	;'T'
   329  00FFD9  20                 	db	32
   330  00FFDA  20                 	db	32
   331  00FFDB  20                 	db	32
   332  00FFDC  20                 	db	32
   333  00FFDD  20                 	db	32
   334  00FFDE  0A                 	db	10
   335  00FFDF  00                 	db	0
   336  00FFE0                     STR_4:
   337  00FFE0  4D                 	db	77	;'M'
   338  00FFE1  44                 	db	68	;'D'
   339  00FFE2  3A                 	db	58	;':'
   340  00FFE3  20                 	db	32
   341  00FFE4  4F                 	db	79	;'O'
   342  00FFE5  46                 	db	70	;'F'
   343  00FFE6  46                 	db	70	;'F'
   344  00FFE7  20                 	db	32
   345  00FFE8  4D                 	db	77	;'M'
   346  00FFE9  4F                 	db	79	;'O'
   347  00FFEA  44                 	db	68	;'D'
   348  00FFEB  45                 	db	69	;'E'
   349  00FFEC  20                 	db	32
   350  00FFED  0A                 	db	10
   351  00FFEE  00                 	db	0
   352  00FFEF                     STR_2:
   353  00FFEF  53                 	db	83	;'S'
   354  00FFF0  50                 	db	80	;'P'
   355  00FFF1  3A                 	db	58	;':'
   356  00FFF2  25                 	db	37
   357  00FFF3  35                 	db	53	;'5'
   358  00FFF4  2E                 	db	46
   359  00FFF5  31                 	db	49	;'1'
   360  00FFF6  66                 	db	102	;'f'
   361  00FFF7  20                 	db	32
   362  00FFF8  0A                 	db	10
   363  00FFF9  00                 	db	0
   364  00FFFA                     STR_8:
   365  00FFFA  4E                 	db	78	;'N'
   366  00FFFB  00                 	db	0
   367  00FFFC                     STR_9:
   368  00FFFC  59                 	db	89	;'Y'
   369  00FFFD  00                 	db	0
   370  0000                     
   371                           ; #config settings
   372  00FFFE  00                 	db	0	; dummy byte at the end
   373  0000                     
   374                           	psect	cinit
   375  002CAE                     __pcinit:
   376                           	opt stack 0
   377  002CAE                     start_initialization:
   378                           	opt stack 0
   379  002CAE                     __initialization:
   380                           	opt stack 0
   381                           
   382                           ; Initialize objects allocated to COMRAM (4 bytes)
   383                           ; load TBLPTR registers with __pidataCOMRAM
   384  002CAE  0EAC               	movlw	low __pidataCOMRAM
   385  002CB0  6EF6               	movwf	tblptrl,c
   386  002CB2  0E2E               	movlw	high __pidataCOMRAM
   387  002CB4  6EF7               	movwf	tblptrh,c
   388  002CB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   389  002CB8  6EF8               	movwf	tblptru,c
   390  002CBA  EE00  F061         	lfsr	0,__pdataCOMRAM
   391  002CBE  EE10 F004          	lfsr	1,4
   392  002CC2                     copy_data0:
   393  002CC2  0009               	tblrd		*+
   394  002CC4  CFF5 FFEE          	movff	tablat,postinc0
   395  002CC8  50E5               	movf	postdec1,w,c
   396  002CCA  50E1               	movf	fsr1l,w,c
   397  002CCC  E1FA               	bnz	copy_data0
   398                           
   399                           ; Clear objects allocated to BANK0 (2 bytes)
   400  002CCE  0100               	movlb	0
   401  002CD0  6BC4               	clrf	(__pbssBANK0+1)& (0+255),b
   402  002CD2  6BC3               	clrf	__pbssBANK0& (0+255),b
   403                           
   404                           ; Clear objects allocated to COMRAM (6 bytes)
   405  002CD4  6A60               	clrf	(__pbssCOMRAM+5)& (0+255),c
   406  002CD6  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   407  002CD8  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   408  002CDA  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   409  002CDC  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   410  002CDE  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   411  002CE0                     end_of_initialization:
   412                           	opt stack 0
   413  002CE0                     __end_of__initialization:
   414                           	opt stack 0
   415  002CE0  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   416  002CE2  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   417  002CE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   418  002CE6  6EF8               	movwf	tblptru,c
   419  002CE8  0100               	movlb	0
   420  002CEA  EF5C  F005         	goto	_main	;jump to C main() function
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           postdec1	equ	0xFE5
   427                           fsr1l	equ	0xFE1
   428                           
   429                           	psect	bssCOMRAM
   430  00005B                     __pbssCOMRAM:
   431                           	opt stack 0
   432  00005B                     _C:
   433                           	opt stack 0
   434  00005B                     	ds	2
   435  00005D                     _RPS_count:
   436                           	opt stack 0
   437  00005D                     	ds	2
   438  00005F                     _hysteresis:
   439                           	opt stack 0
   440  00005F                     	ds	1
   441  000060                     _mode:
   442                           	opt stack 0
   443  000060                     	ds	1
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	dataCOMRAM
   453  000061                     __pdataCOMRAM:
   454                           	opt stack 0
   455  000061                     _LCD_INIT_STRING:
   456                           	opt stack 0
   457  000061                     	ds	4
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           postdec1	equ	0xFE5
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssBANK0
   467  0000C3                     __pbssBANK0:
   468                           	opt stack 0
   469  0000C3                     _H:
   470                           	opt stack 0
   471  0000C3                     	ds	2
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	cstackBANK1
   481  000100                     __pcstackBANK1:
   482                           	opt stack 0
   483  000100                     main@Buffer:
   484                           	opt stack 0
   485                           
   486                           ; 32 bytes @ 0x0
   487  000100                     	ds	32
   488  000120                     main@voltage:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x20
   492  000120                     	ds	4
   493  000124                     main@HC:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x24
   497  000124                     	ds	4
   498  000128                     main@cool_error:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x28
   502  000128                     	ds	2
   503  00012A                     main@AN:
   504                           	opt stack 0
   505                           
   506                           ; 12 bytes @ 0x2A
   507  00012A                     	ds	12
   508  000136                     main@pwm_value:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x36
   512  000136                     	ds	2
   513  000138                     main@raw_val:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x38
   517  000138                     	ds	2
   518  00013A                     main@RT:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x3A
   522  00013A                     	ds	4
   523  00013E                     main@sp:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x3E
   527  00013E                     	ds	4
   528  000142                     main@channel:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x42
   532  000142                     	ds	1
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           postdec1	equ	0xFE5
   539                           fsr1l	equ	0xFE1
   540                           
   541                           	psect	cstackBANK0
   542  000080                     __pcstackBANK0:
   543                           	opt stack 0
   544  000080                     ??___fladd:
   545  000080                     ?_read_adc_voltage:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x0
   549  000080                     	ds	4
   550  000084                     read_adc_voltage@voltage:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x4
   554  000084                     	ds	4
   555  000088                     ?___flsub:
   556                           	opt stack 0
   557  000088                     ?___fltol:
   558                           	opt stack 0
   559  000088                     read_adc_voltage@channel:
   560                           	opt stack 0
   561  000088                     ___flge@ff1:
   562                           	opt stack 0
   563  000088                     ___fltol@f1:
   564                           	opt stack 0
   565  000088                     ___flsub@b:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x8
   569  000088                     	ds	1
   570  000089                     read_adc_voltage@raw_value:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574  000089                     	ds	3
   575  00008C                     ??___fltol:
   576  00008C                     ___flge@ff2:
   577                           	opt stack 0
   578  00008C                     ___flsub@a:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0xC
   582  00008C                     	ds	4
   583  000090                     ??___flge:
   584  000090                     ___fltol@sign1:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x10
   588  000090                     	ds	1
   589  000091                     ___fltol@exp1:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x11
   593  000091                     	ds	1
   594  000092                     set_pwm1_percent@value:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x12
   598  000092                     	ds	2
   599  000094                     ?_sprintf:
   600                           	opt stack 0
   601  000094                     sprintf@sp:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x14
   605  000094                     	ds	2
   606  000096                     sprintf@f:
   607                           	opt stack 0
   608  000096                     set_pwm1_percent@tmp:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x16
   612  000096                     	ds	4
   613  00009A                     set_pwm1_percent@raw_val:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x1A
   617  00009A                     	ds	4
   618  00009E                     ??_sprintf:
   619                           
   620                           ; 1 bytes @ 0x1E
   621  00009E                     	ds	4
   622  0000A2                     _sprintf$1919:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x22
   626  0000A2                     	ds	4
   627  0000A6                     sprintf@cp:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x26
   631  0000A6                     	ds	2
   632  0000A8                     sprintf@ap:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x28
   636  0000A8                     	ds	2
   637  0000AA                     sprintf@len:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x2A
   641  0000AA                     	ds	2
   642  0000AC                     sprintf@flag:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x2C
   646  0000AC                     	ds	2
   647  0000AE                     sprintf@tmpval:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x2E
   651  0000AE                     	ds	4
   652  0000B2                     sprintf@val:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x32
   656  0000B2                     	ds	4
   657  0000B6                     sprintf@exp:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x36
   661  0000B6                     	ds	2
   662  0000B8                     sprintf@width:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x38
   666  0000B8                     	ds	2
   667  0000BA                     sprintf@fval:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x3A
   671  0000BA                     	ds	4
   672  0000BE                     sprintf@prec:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x3E
   676  0000BE                     	ds	2
   677  0000C0                     sprintf@c:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x40
   681  0000C0                     	ds	1
   682  0000C1                     ??_main:
   683                           
   684                           ; 1 bytes @ 0x41
   685  0000C1                     	ds	2
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	cstackCOMRAM
   695  000001                     __pcstackCOMRAM:
   696                           	opt stack 0
   697  000001                     ?i2___awmod:
   698                           	opt stack 0
   699  000001                     i2___awmod@dividend:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x0
   703  000001                     	ds	2
   704  000003                     i2___awmod@divisor:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x2
   708  000003                     	ds	2
   709  000005                     i2___awmod@counter:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x4
   713  000005                     	ds	1
   714  000006                     i2___awmod@sign:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x5
   718  000006                     	ds	1
   719  000007                     ??_highIsr:
   720                           
   721                           ; 1 bytes @ 0x6
   722  000007                     	ds	20
   723  00001B                     ??_isdigit:
   724  00001B                     ??_delay_cycles:
   725  00001B                     ?_read_adc_raw_no_lib:
   726                           	opt stack 0
   727  00001B                     ?___wmul:
   728                           	opt stack 0
   729  00001B                     ?___awmod:
   730                           	opt stack 0
   731  00001B                     ?__tdiv_to_l_:
   732                           	opt stack 0
   733  00001B                     ?__div_to_l_:
   734                           	opt stack 0
   735  00001B                     ?___lldiv:
   736                           	opt stack 0
   737  00001B                     setupSerial@dummy:
   738                           	opt stack 0
   739  00001B                     set_compare_value@compare_value:
   740                           	opt stack 0
   741  00001B                     delay_ms@n:
   742                           	opt stack 0
   743  00001B                     set_pwm1_raw@raw_value:
   744                           	opt stack 0
   745  00001B                     ___wmul@multiplier:
   746                           	opt stack 0
   747  00001B                     ___awmod@dividend:
   748                           	opt stack 0
   749  00001B                     __div_to_l_@f1:
   750                           	opt stack 0
   751  00001B                     __tdiv_to_l_@f1:
   752                           	opt stack 0
   753  00001B                     ___lldiv@dividend:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x1A
   757  00001B                     	ds	1
   758  00001C                     _isdigit$1549:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x1B
   762  00001C                     	ds	1
   763  00001D                     ??_read_adc_raw_no_lib:
   764  00001D                     ??_set_pwm1_raw:
   765  00001D                     isdigit@c:
   766                           	opt stack 0
   767  00001D                     delay_ms@x:
   768                           	opt stack 0
   769  00001D                     ___wmul@multiplicand:
   770                           	opt stack 0
   771  00001D                     ___awmod@divisor:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x1C
   775  00001D                     	ds	1
   776  00001E                     delay_cycles@n:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x1D
   780  00001E                     	ds	1
   781  00001F                     read_adc_raw_no_lib@channel:
   782                           	opt stack 0
   783  00001F                     ___awmod@counter:
   784                           	opt stack 0
   785  00001F                     delay_cycles@x:
   786                           	opt stack 0
   787  00001F                     ___wmul@product:
   788                           	opt stack 0
   789  00001F                     __div_to_l_@f2:
   790                           	opt stack 0
   791  00001F                     __tdiv_to_l_@f2:
   792                           	opt stack 0
   793  00001F                     ___lldiv@divisor:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x1E
   797  00001F                     	ds	1
   798  000020                     ___awmod@sign:
   799                           	opt stack 0
   800  000020                     read_adc_raw_no_lib@raw_value:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x1F
   804  000020                     	ds	1
   805  000021                     ??_lcd_send_nibble:
   806  000021                     ?___awdiv:
   807                           	opt stack 0
   808  000021                     ?___lwdiv:
   809                           	opt stack 0
   810  000021                     ?___xxtofl:
   811                           	opt stack 0
   812  000021                     ___awdiv@dividend:
   813                           	opt stack 0
   814  000021                     ___lwdiv@dividend:
   815                           	opt stack 0
   816  000021                     ___xxtofl@val:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x20
   820  000021                     	ds	1
   821  000022                     lcd_send_nibble@n:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x21
   825  000022                     	ds	1
   826  000023                     ??__tdiv_to_l_:
   827  000023                     lcd_send_byte@n:
   828                           	opt stack 0
   829  000023                     ___awdiv@divisor:
   830                           	opt stack 0
   831  000023                     ___lwdiv@divisor:
   832                           	opt stack 0
   833  000023                     __div_to_l_@quot:
   834                           	opt stack 0
   835  000023                     ___lldiv@quotient:
   836                           	opt stack 0
   837                           
   838                           ; 4 bytes @ 0x22
   839  000023                     	ds	1
   840  000024                     lcd_send_byte@cm_data:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x23
   844  000024                     	ds	1
   845  000025                     ??___xxtofl:
   846  000025                     lcd_init@i:
   847                           	opt stack 0
   848  000025                     lcd_gotoxy@y:
   849                           	opt stack 0
   850  000025                     ___awdiv@counter:
   851                           	opt stack 0
   852  000025                     ___lwdiv@counter:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x24
   856  000025                     	ds	1
   857  000026                     lcd_gotoxy@x:
   858                           	opt stack 0
   859  000026                     ___awdiv@sign:
   860                           	opt stack 0
   861  000026                     ___lwdiv@quotient:
   862                           	opt stack 0
   863  000026                     __tdiv_to_l_@quot:
   864                           	opt stack 0
   865                           
   866                           ; 4 bytes @ 0x25
   867  000026                     	ds	1
   868  000027                     lcd_gotoxy@address:
   869                           	opt stack 0
   870  000027                     __div_to_l_@cntr:
   871                           	opt stack 0
   872  000027                     ___lldiv@counter:
   873                           	opt stack 0
   874  000027                     ___awdiv@quotient:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x26
   878  000027                     	ds	1
   879  000028                     ?___llmod:
   880                           	opt stack 0
   881  000028                     lcd_putc@c:
   882                           	opt stack 0
   883  000028                     __div_to_l_@exp1:
   884                           	opt stack 0
   885  000028                     ___llmod@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x27
   889  000028                     	ds	1
   890  000029                     ?___flmul:
   891                           	opt stack 0
   892  000029                     ___xxtofl@sign:
   893                           	opt stack 0
   894  000029                     lcd_puts@s:
   895                           	opt stack 0
   896  000029                     ___flmul@b:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x28
   900  000029                     	ds	1
   901  00002A                     __tdiv_to_l_@cntr:
   902                           	opt stack 0
   903  00002A                     ___xxtofl@exp:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x29
   907  00002A                     	ds	1
   908  00002B                     __tdiv_to_l_@exp1:
   909                           	opt stack 0
   910  00002B                     ___xxtofl@arg:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x2A
   914  00002B                     	ds	1
   915  00002C                     ___llmod@divisor:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x2B
   919  00002C                     	ds	1
   920  00002D                     ___flmul@a:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x2C
   924  00002D                     	ds	2
   925  00002F                     ?___flneg:
   926                           	opt stack 0
   927  00002F                     ___flneg@f1:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x2E
   931  00002F                     	ds	1
   932  000030                     ___llmod@counter:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x2F
   936  000030                     	ds	1
   937  000031                     ??___flmul:
   938                           
   939                           ; 1 bytes @ 0x30
   940  000031                     	ds	2
   941  000033                     
   942                           ; 1 bytes @ 0x32
   943  000033                     	ds	2
   944  000035                     ___flmul@sign:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x34
   948  000035                     	ds	1
   949  000036                     ___flmul@aexp:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x35
   953  000036                     	ds	1
   954  000037                     ___flmul@grs:
   955                           	opt stack 0
   956                           
   957                           ; 4 bytes @ 0x36
   958  000037                     	ds	4
   959  00003B                     ___flmul@bexp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x3A
   963  00003B                     	ds	1
   964  00003C                     ___flmul@prod:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x3B
   968  00003C                     	ds	4
   969  000040                     ___flmul@temp:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x3F
   973  000040                     	ds	2
   974  000042                     ?___fldiv:
   975                           	opt stack 0
   976  000042                     ?_fround:
   977                           	opt stack 0
   978  000042                     ?_scale:
   979                           	opt stack 0
   980  000042                     ___fldiv@b:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x41
   984  000042                     	ds	4
   985  000046                     ___fldiv@a:
   986                           	opt stack 0
   987  000046                     _fround$1917:
   988                           	opt stack 0
   989  000046                     _scale$1918:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x45
   993  000046                     	ds	4
   994  00004A                     ??___fldiv:
   995  00004A                     scale@scl:
   996                           	opt stack 0
   997  00004A                     _fround$1916:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x49
  1001  00004A                     	ds	4
  1002  00004E                     fround@prec:
  1003                           	opt stack 0
  1004  00004E                     ___fldiv@sign:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x4D
  1008  00004E                     	ds	1
  1009  00004F                     ?___fladd:
  1010                           	opt stack 0
  1011  00004F                     ___fladd@b:
  1012                           	opt stack 0
  1013  00004F                     ___fldiv@rem:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x4E
  1017  00004F                     	ds	4
  1018  000053                     ___fldiv@new_exp:
  1019                           	opt stack 0
  1020  000053                     ___fladd@a:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x52
  1024  000053                     	ds	2
  1025  000055                     ___fldiv@grs:
  1026                           	opt stack 0
  1027                           
  1028                           ; 4 bytes @ 0x54
  1029  000055                     	ds	2
  1030  000057                     ___fladd@signs:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x56
  1034  000057                     	ds	1
  1035  000058                     ___fladd@aexp:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x57
  1039  000058                     	ds	1
  1040  000059                     ___fladd@bexp:
  1041                           	opt stack 0
  1042  000059                     ___fldiv@bexp:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x58
  1046  000059                     	ds	1
  1047  00005A                     ___fladd@grs:
  1048                           	opt stack 0
  1049  00005A                     ___fldiv@aexp:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x59
  1053  00005A                     	ds	1
  1054  00005B                     tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           postdec1	equ	0xFE5
  1060                           fsr1l	equ	0xFE1
  1061                           
  1062                           ; 1 bytes @ 0x5A
  1063 ;;
  1064 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1065 ;;
  1066 ;; *************** function _main *****************
  1067 ;; Defined at:
  1068 ;;		line 156 in file "pwm_asl.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  pwm_value       2   54[BANK1 ] unsigned int 
  1073 ;;  cool_error      2   40[BANK1 ] unsigned int 
  1074 ;;  sp              4   62[BANK1 ] float 
  1075 ;;  RT              4   58[BANK1 ] float 
  1076 ;;  HC              4   36[BANK1 ] float 
  1077 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  1078 ;;  AN             12   42[BANK1 ] float [3]
  1079 ;;  voltage         4   32[BANK1 ] float 
  1080 ;;  raw_val         2   56[BANK1 ] int 
  1081 ;;  RPS             2    0        int 
  1082 ;;  channel         1   66[BANK1 ] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Locals:         0       0      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;      Totals:         0       2      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;Total ram usage:       69 bytes
  1097 ;; Hardware stack levels required when called:    8
  1098 ;; This function calls:
  1099 ;;		_PWM_Disable
  1100 ;;		___fladd
  1101 ;;		___fldiv
  1102 ;;		___flge
  1103 ;;		___flmul
  1104 ;;		___flneg
  1105 ;;		___fltol
  1106 ;;		___lwdiv
  1107 ;;		___wmul
  1108 ;;		___xxtofl
  1109 ;;		_delay_ms
  1110 ;;		_initTimers01
  1111 ;;		_init_adc_no_lib
  1112 ;;		_init_pwm1
  1113 ;;		_lcd_gotoxy
  1114 ;;		_lcd_init
  1115 ;;		_lcd_putc
  1116 ;;		_lcd_puts
  1117 ;;		_read_adc_raw_no_lib
  1118 ;;		_read_adc_voltage
  1119 ;;		_set_compare_value
  1120 ;;		_set_pwm1_percent
  1121 ;;		_set_pwm1_raw
  1122 ;;		_setupPorts
  1123 ;;		_setupSerial
  1124 ;;		_sprintf
  1125 ;; This function is called by:
  1126 ;;		Startup code after reset
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text0
  1131  000AB8                     __ptext0:
  1132                           	opt stack 0
  1133  000AB8                     _main:
  1134                           	opt stack 23
  1135                           
  1136                           ;pwm_asl.c: 158: char Buffer[32];
  1137                           ;pwm_asl.c: 159: float AN[3];
  1138                           ;pwm_asl.c: 160: int raw_val;
  1139                           ;pwm_asl.c: 161: unsigned char channel;
  1140                           ;pwm_asl.c: 162: float voltage;
  1141                           ;pwm_asl.c: 163: setupPorts();
  1142                           
  1143                           ;incstack = 0
  1144  000AB8  EC31  F017         	call	_setupPorts	;wreg free
  1145                           
  1146                           ;pwm_asl.c: 164: setupSerial();
  1147  000ABC  ECFF  F016         	call	_setupSerial	;wreg free
  1148                           
  1149                           ;pwm_asl.c: 165: lcd_init();
  1150  000AC0  EC19  F015         	call	_lcd_init	;wreg free
  1151                           
  1152                           ;pwm_asl.c: 166: init_adc_no_lib();
  1153  000AC4  EC46  F017         	call	_init_adc_no_lib	;wreg free
  1154                           
  1155                           ;pwm_asl.c: 167: init_pwm1();
  1156  000AC8  EC3E  F017         	call	_init_pwm1	;wreg free
  1157                           
  1158                           ;pwm_asl.c: 168: lcd_putc('\f');
  1159  000ACC  0E0C               	movlw	12
  1160  000ACE  EC75  F015         	call	_lcd_putc
  1161                           
  1162                           ;pwm_asl.c: 169: int RPS;
  1163                           ;pwm_asl.c: 170: initTimers01();
  1164  000AD2  ECC9  F015         	call	_initTimers01	;wreg free
  1165  000AD6                     l132:
  1166  000AD6  0004               	clrwdt		;# 
  1167                           
  1168                           ;pwm_asl.c: 173: delay_ms(200);
  1169  000AD8  0E00               	movlw	0
  1170  000ADA  6E1C               	movwf	delay_ms@n+1,c
  1171  000ADC  0EC8               	movlw	200
  1172  000ADE  6E1B               	movwf	delay_ms@n,c
  1173  000AE0  ECEC  F016         	call	_delay_ms	;wreg free
  1174                           
  1175                           ;pwm_asl.c: 174: for (channel = 0; channel < 3; channel++) {
  1176  000AE4  0E00               	movlw	0
  1177  000AE6  0101               	movlb	1	; () banked
  1178  000AE8  6F42               	movwf	main@channel& (0+255),b
  1179  000AEA                     l6013:
  1180                           
  1181                           ; BSR set to: 1
  1182  000AEA  0E02               	movlw	2
  1183  000AEC  6542               	cpfsgt	main@channel& (0+255),b
  1184  000AEE  D001               	goto	l133
  1185  000AF0  D01E               	goto	u7010
  1186  000AF2                     l133:
  1187                           
  1188                           ; BSR set to: 1
  1189                           ;pwm_asl.c: 176: voltage = read_adc_voltage((unsigned char) channel);
  1190                           
  1191                           ; BSR set to: 1
  1192  000AF2  5142               	movf	main@channel& (0+255),w,b
  1193  000AF4  ECB0  F013         	call	_read_adc_voltage
  1194  000AF8  C080  F120         	movff	?_read_adc_voltage,main@voltage
  1195  000AFC  C081  F121         	movff	?_read_adc_voltage+1,main@voltage+1
  1196  000B00  C082  F122         	movff	?_read_adc_voltage+2,main@voltage+2
  1197  000B04  C083  F123         	movff	?_read_adc_voltage+3,main@voltage+3
  1198                           
  1199                           ;pwm_asl.c: 177: AN[channel] = voltage;
  1200  000B08  0101               	movlb	1	; () banked
  1201  000B0A  5142               	movf	main@channel& (0+255),w,b
  1202  000B0C  0D04               	mullw	4
  1203  000B0E  0E2A               	movlw	low main@AN
  1204  000B10  24F3               	addwf	prodl,w,c
  1205  000B12  6ED9               	movwf	fsr2l,c
  1206  000B14  0E01               	movlw	high main@AN
  1207  000B16  20F4               	addwfc	prodh,w,c
  1208  000B18  6EDA               	movwf	fsr2h,c
  1209  000B1A  C120  FFDE         	movff	main@voltage,postinc2
  1210  000B1E  C121  FFDE         	movff	main@voltage+1,postinc2
  1211  000B22  C122  FFDE         	movff	main@voltage+2,postinc2
  1212  000B26  C123  FFDE         	movff	main@voltage+3,postinc2
  1213                           
  1214                           ; BSR set to: 1
  1215  000B2A  2B42               	incf	main@channel& (0+255),f,b
  1216  000B2C  D7DE               	goto	l6013
  1217  000B2E                     u7010:
  1218                           
  1219                           ; BSR set to: 1
  1220                           ;pwm_asl.c: 178: }
  1221                           ;pwm_asl.c: 181: float RT = (float)AN[2] * 100.0;
  1222                           
  1223                           ; BSR set to: 1
  1224  000B2E  C132  F029         	movff	main@AN+8,___flmul@b
  1225  000B32  C133  F02A         	movff	main@AN+9,___flmul@b+1
  1226  000B36  C134  F02B         	movff	main@AN+10,___flmul@b+2
  1227  000B3A  C135  F02C         	movff	main@AN+11,___flmul@b+3
  1228  000B3E  0E00               	movlw	0
  1229  000B40  6E2D               	movwf	___flmul@a,c
  1230  000B42  0E00               	movlw	0
  1231  000B44  6E2E               	movwf	___flmul@a+1,c
  1232  000B46  0EC8               	movlw	200
  1233  000B48  6E2F               	movwf	___flmul@a+2,c
  1234  000B4A  0E42               	movlw	66
  1235  000B4C  6E30               	movwf	___flmul@a+3,c
  1236  000B4E  EC15  F00A         	call	___flmul	;wreg free
  1237  000B52  C029  F13A         	movff	?___flmul,main@RT
  1238  000B56  C02A  F13B         	movff	?___flmul+1,main@RT+1
  1239  000B5A  C02B  F13C         	movff	?___flmul+2,main@RT+2
  1240  000B5E  C02C  F13D         	movff	?___flmul+3,main@RT+3
  1241                           
  1242                           ;pwm_asl.c: 182: lcd_gotoxy(1, 1);
  1243  000B62  0E01               	movlw	1
  1244  000B64  6E25               	movwf	lcd_gotoxy@y,c
  1245  000B66  0E01               	movlw	1
  1246  000B68  EC36  F016         	call	_lcd_gotoxy
  1247                           
  1248                           ;pwm_asl.c: 183: sprintf(Buffer, "RT:%5.1fC    H C\n", RT);
  1249  000B6C  0E00               	movlw	low main@Buffer
  1250  000B6E  0100               	movlb	0	; () banked
  1251  000B70  6F94               	movwf	sprintf@sp& (0+255),b
  1252  000B72  0E01               	movlw	high main@Buffer
  1253  000B74  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1254  000B76  0EA0               	movlw	low STR_1
  1255  000B78  6F96               	movwf	sprintf@f& (0+255),b
  1256  000B7A  0EFF               	movlw	high STR_1
  1257  000B7C  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1258  000B7E  C13A  F098         	movff	main@RT,?_sprintf+4
  1259  000B82  C13B  F099         	movff	main@RT+1,?_sprintf+5
  1260  000B86  C13C  F09A         	movff	main@RT+2,?_sprintf+6
  1261  000B8A  C13D  F09B         	movff	main@RT+3,?_sprintf+7
  1262  000B8E  EC09  F000         	call	_sprintf	;wreg free
  1263                           
  1264                           ;pwm_asl.c: 184: lcd_puts(Buffer);
  1265  000B92  0E00               	movlw	low main@Buffer
  1266  000B94  6E29               	movwf	lcd_puts@s,c
  1267  000B96  0E01               	movlw	high main@Buffer
  1268  000B98  6E2A               	movwf	lcd_puts@s+1,c
  1269  000B9A  EC4A  F015         	call	_lcd_puts	;wreg free
  1270                           
  1271                           ;pwm_asl.c: 187: float sp = AN[0] * 20 ;
  1272  000B9E  C12A  F029         	movff	main@AN,___flmul@b
  1273  000BA2  C12B  F02A         	movff	main@AN+1,___flmul@b+1
  1274  000BA6  C12C  F02B         	movff	main@AN+2,___flmul@b+2
  1275  000BAA  C12D  F02C         	movff	main@AN+3,___flmul@b+3
  1276  000BAE  0E00               	movlw	0
  1277  000BB0  6E2D               	movwf	___flmul@a,c
  1278  000BB2  0E00               	movlw	0
  1279  000BB4  6E2E               	movwf	___flmul@a+1,c
  1280  000BB6  0EA0               	movlw	160
  1281  000BB8  6E2F               	movwf	___flmul@a+2,c
  1282  000BBA  0E41               	movlw	65
  1283  000BBC  6E30               	movwf	___flmul@a+3,c
  1284  000BBE  EC15  F00A         	call	___flmul	;wreg free
  1285  000BC2  C029  F13E         	movff	?___flmul,main@sp
  1286  000BC6  C02A  F13F         	movff	?___flmul+1,main@sp+1
  1287  000BCA  C02B  F140         	movff	?___flmul+2,main@sp+2
  1288  000BCE  C02C  F141         	movff	?___flmul+3,main@sp+3
  1289                           
  1290                           ;pwm_asl.c: 189: lcd_gotoxy(1, 2);
  1291  000BD2  0E02               	movlw	2
  1292  000BD4  6E25               	movwf	lcd_gotoxy@y,c
  1293  000BD6  0E01               	movlw	1
  1294  000BD8  EC36  F016         	call	_lcd_gotoxy
  1295                           
  1296                           ;pwm_asl.c: 190: sprintf(Buffer, "SP:%5.1f \n", sp);
  1297  000BDC  0E00               	movlw	low main@Buffer
  1298  000BDE  0100               	movlb	0	; () banked
  1299  000BE0  6F94               	movwf	sprintf@sp& (0+255),b
  1300  000BE2  0E01               	movlw	high main@Buffer
  1301  000BE4  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1302  000BE6  0EEF               	movlw	low STR_2
  1303  000BE8  6F96               	movwf	sprintf@f& (0+255),b
  1304  000BEA  0EFF               	movlw	high STR_2
  1305  000BEC  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1306  000BEE  C13E  F098         	movff	main@sp,?_sprintf+4
  1307  000BF2  C13F  F099         	movff	main@sp+1,?_sprintf+5
  1308  000BF6  C140  F09A         	movff	main@sp+2,?_sprintf+6
  1309  000BFA  C141  F09B         	movff	main@sp+3,?_sprintf+7
  1310  000BFE  EC09  F000         	call	_sprintf	;wreg free
  1311                           
  1312                           ;pwm_asl.c: 191: lcd_puts(Buffer);
  1313  000C02  0E00               	movlw	low main@Buffer
  1314  000C04  6E29               	movwf	lcd_puts@s,c
  1315  000C06  0E01               	movlw	high main@Buffer
  1316  000C08  6E2A               	movwf	lcd_puts@s+1,c
  1317  000C0A  EC4A  F015         	call	_lcd_puts	;wreg free
  1318                           
  1319                           ;pwm_asl.c: 194: float HC = (float)AN[1] *100 / 5.0;
  1320  000C0E  0E00               	movlw	0
  1321  000C10  6E2D               	movwf	___flmul@a,c
  1322  000C12  0E00               	movlw	0
  1323  000C14  6E2E               	movwf	___flmul@a+1,c
  1324  000C16  0EC8               	movlw	200
  1325  000C18  6E2F               	movwf	___flmul@a+2,c
  1326  000C1A  0E42               	movlw	66
  1327  000C1C  6E30               	movwf	___flmul@a+3,c
  1328  000C1E  C12E  F029         	movff	main@AN+4,___flmul@b
  1329  000C22  C12F  F02A         	movff	main@AN+5,___flmul@b+1
  1330  000C26  C130  F02B         	movff	main@AN+6,___flmul@b+2
  1331  000C2A  C131  F02C         	movff	main@AN+7,___flmul@b+3
  1332  000C2E  EC15  F00A         	call	___flmul	;wreg free
  1333  000C32  C029  F042         	movff	?___flmul,___fldiv@b
  1334  000C36  C02A  F043         	movff	?___flmul+1,___fldiv@b+1
  1335  000C3A  C02B  F044         	movff	?___flmul+2,___fldiv@b+2
  1336  000C3E  C02C  F045         	movff	?___flmul+3,___fldiv@b+3
  1337  000C42  0E00               	movlw	0
  1338  000C44  6E46               	movwf	___fldiv@a,c
  1339  000C46  0E00               	movlw	0
  1340  000C48  6E47               	movwf	___fldiv@a+1,c
  1341  000C4A  0EA0               	movlw	160
  1342  000C4C  6E48               	movwf	___fldiv@a+2,c
  1343  000C4E  0E40               	movlw	64
  1344  000C50  6E49               	movwf	___fldiv@a+3,c
  1345  000C52  EC5F  F00D         	call	___fldiv	;wreg free
  1346  000C56  C042  F124         	movff	?___fldiv,main@HC
  1347  000C5A  C043  F125         	movff	?___fldiv+1,main@HC+1
  1348  000C5E  C044  F126         	movff	?___fldiv+2,main@HC+2
  1349  000C62  C045  F127         	movff	?___fldiv+3,main@HC+3
  1350                           
  1351                           ;pwm_asl.c: 195: lcd_gotoxy(1, 3);
  1352  000C66  0E03               	movlw	3
  1353  000C68  6E25               	movwf	lcd_gotoxy@y,c
  1354  000C6A  0E01               	movlw	1
  1355  000C6C  EC36  F016         	call	_lcd_gotoxy
  1356                           
  1357                           ;pwm_asl.c: 196: sprintf(Buffer, "HS: %d HC:%5.1f %% \n", hysteresis , HC);
  1358  000C70  0E00               	movlw	low main@Buffer
  1359  000C72  0100               	movlb	0	; () banked
  1360  000C74  6F94               	movwf	sprintf@sp& (0+255),b
  1361  000C76  0E01               	movlw	high main@Buffer
  1362  000C78  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1363  000C7A  0E8B               	movlw	low STR_3
  1364  000C7C  6F96               	movwf	sprintf@f& (0+255),b
  1365  000C7E  0EFF               	movlw	high STR_3
  1366  000C80  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1367  000C82  C05F  F098         	movff	_hysteresis,?_sprintf+4
  1368  000C86  6B99               	clrf	(?_sprintf+5)& (0+255),b
  1369  000C88  C124  F09A         	movff	main@HC,?_sprintf+6
  1370  000C8C  C125  F09B         	movff	main@HC+1,?_sprintf+7
  1371  000C90  C126  F09C         	movff	main@HC+2,?_sprintf+8
  1372  000C94  C127  F09D         	movff	main@HC+3,?_sprintf+9
  1373  000C98  EC09  F000         	call	_sprintf	;wreg free
  1374                           
  1375                           ;pwm_asl.c: 197: lcd_puts(Buffer);
  1376  000C9C  0E00               	movlw	low main@Buffer
  1377  000C9E  6E29               	movwf	lcd_puts@s,c
  1378  000CA0  0E01               	movlw	high main@Buffer
  1379  000CA2  6E2A               	movwf	lcd_puts@s+1,c
  1380  000CA4  EC4A  F015         	call	_lcd_puts	;wreg free
  1381                           
  1382                           ;pwm_asl.c: 199: if(PORTBbits.RB3==0){
  1383  000CA8  B681               	btfsc	3969,3,c	;volatile
  1384  000CAA  D002               	goto	l135
  1385                           
  1386                           ;pwm_asl.c: 200: mode=0;
  1387  000CAC  0E00               	movlw	0
  1388  000CAE  6E60               	movwf	_mode,c
  1389  000CB0                     l135:
  1390                           
  1391                           ;pwm_asl.c: 201: }
  1392                           ;pwm_asl.c: 202: raw_val = read_adc_raw_no_lib(1);
  1393  000CB0  0E01               	movlw	1
  1394  000CB2  EC77  F016         	call	_read_adc_raw_no_lib
  1395  000CB6  C01B  F138         	movff	?_read_adc_raw_no_lib,main@raw_val
  1396  000CBA  C01C  F139         	movff	?_read_adc_raw_no_lib+1,main@raw_val+1
  1397                           
  1398                           ;pwm_asl.c: 203: lcd_gotoxy(1, 4);
  1399  000CBE  0E04               	movlw	4
  1400  000CC0  6E25               	movwf	lcd_gotoxy@y,c
  1401  000CC2  0E01               	movlw	1
  1402  000CC4  EC36  F016         	call	_lcd_gotoxy
  1403                           
  1404                           ;pwm_asl.c: 204: switch (mode) {
  1405  000CC8  D153               	goto	l136
  1406  000CCA                     
  1407                           ;pwm_asl.c: 206: PWM_Disable();
  1408  000CCA  EC51  F017         	call	_PWM_Disable	;wreg free
  1409                           
  1410                           ;pwm_asl.c: 207: set_pwm1_raw(0);
  1411  000CCE  0E00               	movlw	0
  1412  000CD0  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1413  000CD2  0E00               	movlw	0
  1414  000CD4  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1415  000CD6  ECAB  F016         	call	_set_pwm1_raw	;wreg free
  1416                           
  1417                           ;pwm_asl.c: 208: PIE1bits.CCP1IE = 0;
  1418  000CDA  949D               	bcf	3997,2,c	;volatile
  1419                           
  1420                           ;pwm_asl.c: 209: PIE2bits.CCP2IE = 0;
  1421  000CDC  90A0               	bcf	4000,0,c	;volatile
  1422                           
  1423                           ;pwm_asl.c: 210: sprintf(Buffer, "MD: OFF MODE \n");
  1424  000CDE  0E00               	movlw	low main@Buffer
  1425  000CE0  0100               	movlb	0	; () banked
  1426  000CE2  6F94               	movwf	sprintf@sp& (0+255),b
  1427  000CE4  0E01               	movlw	high main@Buffer
  1428  000CE6  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1429  000CE8  0EE0               	movlw	low STR_4
  1430  000CEA  6F96               	movwf	sprintf@f& (0+255),b
  1431  000CEC  0EFF               	movlw	high STR_4
  1432  000CEE  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1433  000CF0  EC09  F000         	call	_sprintf	;wreg free
  1434                           
  1435                           ;pwm_asl.c: 211: H=C=0;
  1436  000CF4  0E00               	movlw	0
  1437  000CF6  6E5C               	movwf	_C+1,c
  1438  000CF8  0E00               	movlw	0
  1439  000CFA  6E5B               	movwf	_C,c
  1440  000CFC  C05B  F0C3         	movff	_C,_H
  1441  000D00  C05C  F0C4         	movff	_C+1,_H+1
  1442                           
  1443                           ;pwm_asl.c: 212: break;
  1444  000D04  D142               	goto	l138
  1445  000D06                     
  1446                           ;pwm_asl.c: 214: CCP1CON = 0x0c;
  1447  000D06  0E0C               	movlw	12
  1448  000D08  6EBD               	movwf	4029,c	;volatile
  1449                           
  1450                           ;pwm_asl.c: 217: T2CONbits.TMR2ON=1;
  1451  000D0A  84CA               	bsf	4042,2,c	;volatile
  1452                           
  1453                           ;pwm_asl.c: 218: T3CONbits.TMR3ON=0;
  1454  000D0C  90B1               	bcf	4017,0,c	;volatile
  1455                           
  1456                           ;pwm_asl.c: 219: PORTCbits.RC5=0;
  1457  000D0E  9A82               	bcf	3970,5,c	;volatile
  1458                           
  1459                           ;pwm_asl.c: 221: PIE1bits.CCP1IE = 1;
  1460  000D10  849D               	bsf	3997,2,c	;volatile
  1461                           
  1462                           ;pwm_asl.c: 223: set_pwm1_raw(raw_val);
  1463  000D12  C138  F01B         	movff	main@raw_val,set_pwm1_raw@raw_value
  1464  000D16  C139  F01C         	movff	main@raw_val+1,set_pwm1_raw@raw_value+1
  1465  000D1A  ECAB  F016         	call	_set_pwm1_raw	;wreg free
  1466                           
  1467                           ;pwm_asl.c: 224: sprintf(Buffer, "MD: COOL     \n");
  1468  000D1E  0E00               	movlw	low main@Buffer
  1469  000D20  0100               	movlb	0	; () banked
  1470  000D22  6F94               	movwf	sprintf@sp& (0+255),b
  1471  000D24  0E01               	movlw	high main@Buffer
  1472  000D26  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1473  000D28  0EC2               	movlw	low STR_5
  1474  000D2A  6F96               	movwf	sprintf@f& (0+255),b
  1475  000D2C  0EFF               	movlw	high STR_5
  1476  000D2E  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1477  000D30  EC09  F000         	call	_sprintf	;wreg free
  1478                           
  1479                           ;pwm_asl.c: 225: C=1;
  1480  000D34  0E00               	movlw	0
  1481  000D36  6E5C               	movwf	_C+1,c
  1482  000D38  0E01               	movlw	1
  1483  000D3A  6E5B               	movwf	_C,c
  1484                           
  1485                           ;pwm_asl.c: 226: H=0;
  1486  000D3C  0E00               	movlw	0
  1487  000D3E  0100               	movlb	0	; () banked
  1488  000D40  6FC4               	movwf	(_H+1)& (0+255),b
  1489  000D42  0E00               	movlw	0
  1490  000D44  6FC3               	movwf	_H& (0+255),b
  1491                           
  1492                           ;pwm_asl.c: 227: break;
  1493  000D46  D121               	goto	l138
  1494  000D48                     
  1495                           ;pwm_asl.c: 229: PWM_Disable();
  1496                           
  1497                           ; BSR set to: 0
  1498  000D48  EC51  F017         	call	_PWM_Disable	;wreg free
  1499                           
  1500                           ;pwm_asl.c: 230: T2CONbits.TMR2ON=0;
  1501  000D4C  94CA               	bcf	4042,2,c	;volatile
  1502                           
  1503                           ;pwm_asl.c: 231: T3CONbits.TMR3ON=1;
  1504  000D4E  80B1               	bsf	4017,0,c	;volatile
  1505                           
  1506                           ;pwm_asl.c: 233: PIE2bits.CCP2IE = 1;
  1507  000D50  80A0               	bsf	4000,0,c	;volatile
  1508                           
  1509                           ;pwm_asl.c: 234: set_pwm1_raw(0);
  1510  000D52  0E00               	movlw	0
  1511  000D54  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1512  000D56  0E00               	movlw	0
  1513  000D58  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1514  000D5A  ECAB  F016         	call	_set_pwm1_raw	;wreg free
  1515                           
  1516                           ;pwm_asl.c: 235: set_compare_value(raw_val * 64);
  1517  000D5E  C138  F0C1         	movff	main@raw_val,??_main
  1518  000D62  C139  F0C2         	movff	main@raw_val+1,??_main+1
  1519  000D66  0E06               	movlw	6
  1520  000D68                     u7035:
  1521  000D68  90D8               	bcf	status,0,c
  1522  000D6A  0100               	movlb	0	; () banked
  1523  000D6C  37C1               	rlcf	??_main& (0+255),f,b
  1524  000D6E  37C2               	rlcf	(??_main+1)& (0+255),f,b
  1525  000D70  2EE8               	decfsz	wreg,f,c
  1526  000D72  D7FA               	goto	u7035
  1527  000D74  C0C1  F01B         	movff	??_main,set_compare_value@compare_value
  1528  000D78  C0C2  F01C         	movff	??_main+1,set_compare_value@compare_value+1
  1529  000D7C  EC4C  F017         	call	_set_compare_value	;wreg free
  1530                           
  1531                           ;pwm_asl.c: 236: C=0;
  1532  000D80  0E00               	movlw	0
  1533  000D82  6E5C               	movwf	_C+1,c
  1534  000D84  0E00               	movlw	0
  1535  000D86  6E5B               	movwf	_C,c
  1536                           
  1537                           ;pwm_asl.c: 237: H=1;
  1538  000D88  0E00               	movlw	0
  1539  000D8A  0100               	movlb	0	; () banked
  1540  000D8C  6FC4               	movwf	(_H+1)& (0+255),b
  1541  000D8E  0E01               	movlw	1
  1542  000D90  6FC3               	movwf	_H& (0+255),b
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;pwm_asl.c: 238: sprintf(Buffer, "MD: HEAT     \n");
  1546  000D92  0E00               	movlw	low main@Buffer
  1547  000D94  6F94               	movwf	sprintf@sp& (0+255),b
  1548  000D96  0E01               	movlw	high main@Buffer
  1549  000D98  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1550  000D9A  0ED1               	movlw	low STR_6
  1551  000D9C  6F96               	movwf	sprintf@f& (0+255),b
  1552  000D9E  0EFF               	movlw	high STR_6
  1553  000DA0  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1554  000DA2  EC09  F000         	call	_sprintf	;wreg free
  1555                           
  1556                           ;pwm_asl.c: 239: break;
  1557  000DA6  D0F1               	goto	l138
  1558  000DA8                     
  1559                           ;pwm_asl.c: 241: H=C=0;
  1560  000DA8  0E00               	movlw	0
  1561  000DAA  6E5C               	movwf	_C+1,c
  1562  000DAC  0E00               	movlw	0
  1563  000DAE  6E5B               	movwf	_C,c
  1564  000DB0  C05B  F0C3         	movff	_C,_H
  1565  000DB4  C05C  F0C4         	movff	_C+1,_H+1
  1566                           
  1567                           ;pwm_asl.c: 242: if (RT > sp) {
  1568  000DB8  C13E  F088         	movff	main@sp,___flge@ff1
  1569  000DBC  C13F  F089         	movff	main@sp+1,___flge@ff1+1
  1570  000DC0  C140  F08A         	movff	main@sp+2,___flge@ff1+2
  1571  000DC4  C141  F08B         	movff	main@sp+3,___flge@ff1+3
  1572  000DC8  C13A  F08C         	movff	main@RT,___flge@ff2
  1573  000DCC  C13B  F08D         	movff	main@RT+1,___flge@ff2+1
  1574  000DD0  C13C  F08E         	movff	main@RT+2,___flge@ff2+2
  1575  000DD4  C13D  F08F         	movff	main@RT+3,___flge@ff2+3
  1576  000DD8  ECD3  F011         	call	___flge	;wreg free
  1577  000DDC  0100               	movlb	0	; () banked
  1578  000DDE  B0D8               	btfsc	status,0,c
  1579  000DE0  D066               	goto	l142
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;pwm_asl.c: 243: CCP1CON = 0x0c;
  1583  000DE2  0E0C               	movlw	12
  1584  000DE4  6EBD               	movwf	4029,c	;volatile
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;pwm_asl.c: 244: T2CONbits.TMR2ON=1;
  1588  000DE6  84CA               	bsf	4042,2,c	;volatile
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;pwm_asl.c: 245: T3CONbits.TMR3ON=0;
  1592  000DE8  90B1               	bcf	4017,0,c	;volatile
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;pwm_asl.c: 246: PORTCbits.RC5=0;
  1596  000DEA  9A82               	bcf	3970,5,c	;volatile
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;pwm_asl.c: 248: unsigned int cool_error = RT - sp;
  1600  000DEC  C13A  F053         	movff	main@RT,___fladd@a
  1601  000DF0  C13B  F054         	movff	main@RT+1,___fladd@a+1
  1602  000DF4  C13C  F055         	movff	main@RT+2,___fladd@a+2
  1603  000DF8  C13D  F056         	movff	main@RT+3,___fladd@a+3
  1604  000DFC  C13E  F02F         	movff	main@sp,___flneg@f1
  1605  000E00  C13F  F030         	movff	main@sp+1,___flneg@f1+1
  1606  000E04  C140  F031         	movff	main@sp+2,___flneg@f1+2
  1607  000E08  C141  F032         	movff	main@sp+3,___flneg@f1+3
  1608  000E0C  EC94  F016         	call	___flneg	;wreg free
  1609  000E10  C02F  F04F         	movff	?___flneg,___fladd@b
  1610  000E14  C030  F050         	movff	?___flneg+1,___fladd@b+1
  1611  000E18  C031  F051         	movff	?___flneg+2,___fladd@b+2
  1612  000E1C  C032  F052         	movff	?___flneg+3,___fladd@b+3
  1613  000E20  ECBD  F00B         	call	___fladd	;wreg free
  1614  000E24  C04F  F088         	movff	?___fladd,___fltol@f1
  1615  000E28  C050  F089         	movff	?___fladd+1,___fltol@f1+1
  1616  000E2C  C051  F08A         	movff	?___fladd+2,___fltol@f1+2
  1617  000E30  C052  F08B         	movff	?___fladd+3,___fltol@f1+3
  1618  000E34  ECE4  F012         	call	___fltol	;wreg free
  1619  000E38  C088  F128         	movff	?___fltol,main@cool_error
  1620  000E3C  C089  F129         	movff	?___fltol+1,main@cool_error+1
  1621                           
  1622                           ;pwm_asl.c: 249: unsigned int pwm_value = (cool_error * 100) / 10;
  1623  000E40  C128  F01B         	movff	main@cool_error,___wmul@multiplier
  1624  000E44  C129  F01C         	movff	main@cool_error+1,___wmul@multiplier+1
  1625  000E48  0E00               	movlw	0
  1626  000E4A  6E1E               	movwf	___wmul@multiplicand+1,c
  1627  000E4C  0E64               	movlw	100
  1628  000E4E  6E1D               	movwf	___wmul@multiplicand,c
  1629  000E50  ECD9  F016         	call	___wmul	;wreg free
  1630  000E54  C01B  F021         	movff	?___wmul,___lwdiv@dividend
  1631  000E58  C01C  F022         	movff	?___wmul+1,___lwdiv@dividend+1
  1632  000E5C  0E00               	movlw	0
  1633  000E5E  6E24               	movwf	___lwdiv@divisor+1,c
  1634  000E60  0E0A               	movlw	10
  1635  000E62  6E23               	movwf	___lwdiv@divisor,c
  1636  000E64  ECA0  F015         	call	___lwdiv	;wreg free
  1637  000E68  C021  F136         	movff	?___lwdiv,main@pwm_value
  1638  000E6C  C022  F137         	movff	?___lwdiv+1,main@pwm_value+1
  1639                           
  1640                           ;pwm_asl.c: 250: if (pwm_value < 25) pwm_value = 25;
  1641  000E70  0101               	movlb	1	; () banked
  1642  000E72  5137               	movf	(main@pwm_value+1)& (0+255),w,b
  1643  000E74  E108               	bnz	l6123
  1644  000E76  0E19               	movlw	25
  1645  000E78  5D36               	subwf	main@pwm_value& (0+255),w,b
  1646  000E7A  B0D8               	btfsc	status,0,c
  1647  000E7C  D004               	goto	l143
  1648                           
  1649                           ; BSR set to: 1
  1650  000E7E  0E00               	movlw	0
  1651  000E80  6F37               	movwf	(main@pwm_value+1)& (0+255),b
  1652  000E82  0E19               	movlw	25
  1653  000E84  6F36               	movwf	main@pwm_value& (0+255),b
  1654  000E86                     l143:
  1655  000E86                     l6123:
  1656                           
  1657                           ; BSR set to: 1
  1658                           ;pwm_asl.c: 251: set_pwm1_percent(pwm_value);
  1659  000E86  C136  F021         	movff	main@pwm_value,___xxtofl@val
  1660  000E8A  C137  F022         	movff	main@pwm_value+1,___xxtofl@val+1
  1661  000E8E  6A23               	clrf	___xxtofl@val+2,c
  1662  000E90  6A24               	clrf	___xxtofl@val+3,c
  1663  000E92  0E00               	movlw	0
  1664  000E94  ECFE  F00F         	call	___xxtofl
  1665  000E98  C021  F092         	movff	?___xxtofl,set_pwm1_percent@value
  1666  000E9C  C022  F093         	movff	?___xxtofl+1,set_pwm1_percent@value+1
  1667  000EA0  C023  F094         	movff	?___xxtofl+2,set_pwm1_percent@value+2
  1668  000EA4  C024  F095         	movff	?___xxtofl+3,set_pwm1_percent@value+3
  1669  000EA8  EC53  F013         	call	_set_pwm1_percent	;wreg free
  1670                           
  1671                           ;pwm_asl.c: 252: } else if (RT < (sp - hysteresis)) {
  1672  000EAC  D055               	goto	l145
  1673  000EAE                     l142:
  1674  000EAE  C13A  F088         	movff	main@RT,___flge@ff1
  1675  000EB2  C13B  F089         	movff	main@RT+1,___flge@ff1+1
  1676  000EB6  C13C  F08A         	movff	main@RT+2,___flge@ff1+2
  1677  000EBA  C13D  F08B         	movff	main@RT+3,___flge@ff1+3
  1678  000EBE  C13E  F053         	movff	main@sp,___fladd@a
  1679  000EC2  C13F  F054         	movff	main@sp+1,___fladd@a+1
  1680  000EC6  C140  F055         	movff	main@sp+2,___fladd@a+2
  1681  000ECA  C141  F056         	movff	main@sp+3,___fladd@a+3
  1682  000ECE  505F               	movf	_hysteresis,w,c
  1683  000ED0  6E21               	movwf	___xxtofl@val,c
  1684  000ED2  6A22               	clrf	___xxtofl@val+1,c
  1685  000ED4  6A23               	clrf	___xxtofl@val+2,c
  1686  000ED6  6A24               	clrf	___xxtofl@val+3,c
  1687  000ED8  0E00               	movlw	0
  1688  000EDA  ECFE  F00F         	call	___xxtofl
  1689  000EDE  C021  F02F         	movff	?___xxtofl,___flneg@f1
  1690  000EE2  C022  F030         	movff	?___xxtofl+1,___flneg@f1+1
  1691  000EE6  C023  F031         	movff	?___xxtofl+2,___flneg@f1+2
  1692  000EEA  C024  F032         	movff	?___xxtofl+3,___flneg@f1+3
  1693  000EEE  EC94  F016         	call	___flneg	;wreg free
  1694  000EF2  C02F  F04F         	movff	?___flneg,___fladd@b
  1695  000EF6  C030  F050         	movff	?___flneg+1,___fladd@b+1
  1696  000EFA  C031  F051         	movff	?___flneg+2,___fladd@b+2
  1697  000EFE  C032  F052         	movff	?___flneg+3,___fladd@b+3
  1698  000F02  ECBD  F00B         	call	___fladd	;wreg free
  1699  000F06  C04F  F08C         	movff	?___fladd,___flge@ff2
  1700  000F0A  C050  F08D         	movff	?___fladd+1,___flge@ff2+1
  1701  000F0E  C051  F08E         	movff	?___fladd+2,___flge@ff2+2
  1702  000F12  C052  F08F         	movff	?___fladd+3,___flge@ff2+3
  1703  000F16  ECD3  F011         	call	___flge	;wreg free
  1704  000F1A  0100               	movlb	0	; () banked
  1705  000F1C  B0D8               	btfsc	status,0,c
  1706  000F1E  D01C               	goto	l145
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;pwm_asl.c: 253: T2CONbits.TMR2ON=0;
  1710  000F20  94CA               	bcf	4042,2,c	;volatile
  1711                           
  1712                           ;pwm_asl.c: 254: T3CONbits.TMR3ON=1;
  1713  000F22  80B1               	bsf	4017,0,c	;volatile
  1714                           
  1715                           ;pwm_asl.c: 255: PIE2bits.CCP2IE = 1;
  1716  000F24  80A0               	bsf	4000,0,c	;volatile
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;pwm_asl.c: 256: PWM_Disable();
  1720  000F26  EC51  F017         	call	_PWM_Disable	;wreg free
  1721                           
  1722                           ;pwm_asl.c: 257: set_pwm1_raw(0);
  1723  000F2A  0E00               	movlw	0
  1724  000F2C  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1725  000F2E  0E00               	movlw	0
  1726  000F30  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1727  000F32  ECAB  F016         	call	_set_pwm1_raw	;wreg free
  1728                           
  1729                           ;pwm_asl.c: 258: set_compare_value(raw_val* 64);
  1730  000F36  C138  F0C1         	movff	main@raw_val,??_main
  1731  000F3A  C139  F0C2         	movff	main@raw_val+1,??_main+1
  1732  000F3E  0E06               	movlw	6
  1733  000F40                     u7075:
  1734  000F40  90D8               	bcf	status,0,c
  1735  000F42  0100               	movlb	0	; () banked
  1736  000F44  37C1               	rlcf	??_main& (0+255),f,b
  1737  000F46  37C2               	rlcf	(??_main+1)& (0+255),f,b
  1738  000F48  2EE8               	decfsz	wreg,f,c
  1739  000F4A  D7FA               	goto	u7075
  1740  000F4C  C0C1  F01B         	movff	??_main,set_compare_value@compare_value
  1741  000F50  C0C2  F01C         	movff	??_main+1,set_compare_value@compare_value+1
  1742  000F54  EC4C  F017         	call	_set_compare_value	;wreg free
  1743  000F58                     l145:
  1744                           
  1745                           ;pwm_asl.c: 259: }
  1746                           ;pwm_asl.c: 260: sprintf(Buffer, "MD: AUTO COOL \n");
  1747  000F58  0E00               	movlw	low main@Buffer
  1748  000F5A  0100               	movlb	0	; () banked
  1749  000F5C  6F94               	movwf	sprintf@sp& (0+255),b
  1750  000F5E  0E01               	movlw	high main@Buffer
  1751  000F60  6F95               	movwf	(sprintf@sp+1)& (0+255),b
  1752  000F62  0EB2               	movlw	low STR_7
  1753  000F64  6F96               	movwf	sprintf@f& (0+255),b
  1754  000F66  0EFF               	movlw	high STR_7
  1755  000F68  6F97               	movwf	(sprintf@f+1)& (0+255),b
  1756  000F6A  EC09  F000         	call	_sprintf	;wreg free
  1757                           
  1758                           ;pwm_asl.c: 262: }
  1759                           
  1760                           ;pwm_asl.c: 261: break;
  1761  000F6E  D00D               	goto	l138
  1762  000F70                     l136:
  1763  000F70  5060               	movf	_mode,w,c
  1764                           
  1765                           ; Switch size 1, requested type "space"
  1766                           ; Number of cases is 4, Range of values is 0 to 3
  1767                           ; switch strategies available:
  1768                           ; Name         Instructions Cycles
  1769                           ; simple_byte           13     7 (average)
  1770                           ;	Chosen strategy is simple_byte
  1771  000F72  0A00               	xorlw	0	; case 0
  1772  000F74  B4D8               	btfsc	status,2,c
  1773  000F76  D6A9               	goto	l137
  1774  000F78  0A01               	xorlw	1	; case 1
  1775  000F7A  B4D8               	btfsc	status,2,c
  1776  000F7C  D6C4               	goto	l139
  1777  000F7E  0A03               	xorlw	3	; case 2
  1778  000F80  B4D8               	btfsc	status,2,c
  1779  000F82  D6E2               	goto	l140
  1780  000F84  0A01               	xorlw	1	; case 3
  1781  000F86  B4D8               	btfsc	status,2,c
  1782  000F88  D70F               	goto	l141
  1783  000F8A                     l138:
  1784                           
  1785                           ;pwm_asl.c: 264: lcd_puts(Buffer);
  1786  000F8A  0E00               	movlw	low main@Buffer
  1787  000F8C  6E29               	movwf	lcd_puts@s,c
  1788  000F8E  0E01               	movlw	high main@Buffer
  1789  000F90  6E2A               	movwf	lcd_puts@s+1,c
  1790  000F92  EC4A  F015         	call	_lcd_puts	;wreg free
  1791                           
  1792                           ;pwm_asl.c: 265: lcd_gotoxy(14, 2);
  1793  000F96  0E02               	movlw	2
  1794  000F98  6E25               	movwf	lcd_gotoxy@y,c
  1795  000F9A  0E0E               	movlw	14
  1796  000F9C  EC36  F016         	call	_lcd_gotoxy
  1797                           
  1798                           ;pwm_asl.c: 266: if(H==0)
  1799  000FA0  0100               	movlb	0	; () banked
  1800  000FA2  51C3               	movf	_H& (0+255),w,b
  1801  000FA4  11C4               	iorwf	(_H+1)& (0+255),w,b
  1802  000FA6  A4D8               	btfss	status,2,c
  1803  000FA8  D007               	goto	l146
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;pwm_asl.c: 267: lcd_puts("N");
  1807  000FAA  0EFA               	movlw	low STR_8
  1808  000FAC  6E29               	movwf	lcd_puts@s,c
  1809  000FAE  0EFF               	movlw	high STR_8
  1810  000FB0  6E2A               	movwf	lcd_puts@s+1,c
  1811  000FB2  EC4A  F015         	call	_lcd_puts	;wreg free
  1812  000FB6  D006               	goto	l147
  1813  000FB8                     l146:
  1814                           
  1815                           ;pwm_asl.c: 268: else
  1816                           ;pwm_asl.c: 269: lcd_puts("Y");
  1817  000FB8  0EFC               	movlw	low STR_9
  1818  000FBA  6E29               	movwf	lcd_puts@s,c
  1819  000FBC  0EFF               	movlw	high STR_9
  1820  000FBE  6E2A               	movwf	lcd_puts@s+1,c
  1821  000FC0  EC4A  F015         	call	_lcd_puts	;wreg free
  1822  000FC4                     l147:
  1823                           
  1824                           ;pwm_asl.c: 270: lcd_gotoxy(16, 2);
  1825  000FC4  0E02               	movlw	2
  1826  000FC6  6E25               	movwf	lcd_gotoxy@y,c
  1827  000FC8  0E10               	movlw	16
  1828  000FCA  EC36  F016         	call	_lcd_gotoxy
  1829                           
  1830                           ;pwm_asl.c: 271: if(C==0)
  1831  000FCE  505B               	movf	_C,w,c
  1832  000FD0  105C               	iorwf	_C+1,w,c
  1833  000FD2  A4D8               	btfss	status,2,c
  1834  000FD4  D007               	goto	l148
  1835                           
  1836                           ;pwm_asl.c: 272: lcd_puts("N");
  1837  000FD6  0EFA               	movlw	low STR_8
  1838  000FD8  6E29               	movwf	lcd_puts@s,c
  1839  000FDA  0EFF               	movlw	high STR_8
  1840  000FDC  6E2A               	movwf	lcd_puts@s+1,c
  1841  000FDE  EC4A  F015         	call	_lcd_puts	;wreg free
  1842  000FE2  D579               	goto	l132
  1843  000FE4                     l148:
  1844                           
  1845                           ;pwm_asl.c: 273: else
  1846                           ;pwm_asl.c: 274: lcd_puts("Y");
  1847  000FE4  0EFC               	movlw	low STR_9
  1848  000FE6  6E29               	movwf	lcd_puts@s,c
  1849  000FE8  0EFF               	movlw	high STR_9
  1850  000FEA  6E2A               	movwf	lcd_puts@s+1,c
  1851  000FEC  EC4A  F015         	call	_lcd_puts	;wreg free
  1852  000FF0  D572               	goto	l132
  1853  000FF2                     __end_of_main:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           postinc2	equ	0xFDE
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _sprintf *****************
  1871 ;; Defined at:
  1872 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  sp              2   20[BANK0 ] PTR unsigned char 
  1875 ;;		 -> main@Buffer(32), 
  1876 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  1877 ;;		 -> STR_7(16), STR_6(15), STR_5(15), STR_4(15), 
  1878 ;;		 -> STR_3(21), STR_2(11), STR_1(18), 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  fval            4   58[BANK0 ] PTR const unsigned char 
  1881 ;;  val             4   50[BANK0 ] unsigned long 
  1882 ;;  tmpval          4   46[BANK0 ] struct .
  1883 ;;  prec            2   62[BANK0 ] int 
  1884 ;;  width           2   56[BANK0 ] int 
  1885 ;;  exp             2   54[BANK0 ] int 
  1886 ;;  flag            2   44[BANK0 ] unsigned short 
  1887 ;;  len             2   42[BANK0 ] unsigned int 
  1888 ;;  ap              2   40[BANK0 ] PTR void [1]
  1889 ;;		 -> ?_sprintf(2), 
  1890 ;;  cp              2   38[BANK0 ] PTR const unsigned char 
  1891 ;;		 -> sprintf@c(1), 
  1892 ;;  c               1   64[BANK0 ] char 
  1893 ;;  d               1    0        unsigned char 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2   20[BANK0 ] int 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1903 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Totals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;Total ram usage:       45 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    4
  1910 ;; This function calls:
  1911 ;;		___awdiv
  1912 ;;		___fladd
  1913 ;;		___flge
  1914 ;;		___flmul
  1915 ;;		___flneg
  1916 ;;		___flsub
  1917 ;;		___fltol
  1918 ;;		___lldiv
  1919 ;;		___llmod
  1920 ;;		___wmul
  1921 ;;		___xxtofl
  1922 ;;		__div_to_l_
  1923 ;;		__tdiv_to_l_
  1924 ;;		_fround
  1925 ;;		_isdigit
  1926 ;;		_scale
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text1
  1933  000012                     __ptext1:
  1934                           	opt stack 0
  1935  000012                     _sprintf:
  1936                           	opt stack 26
  1937                           
  1938                           ;doprnt.c: 494: va_list ap;
  1939                           ;doprnt.c: 499: signed char c;
  1940                           ;doprnt.c: 501: int width;
  1941                           ;doprnt.c: 504: int prec;
  1942                           ;doprnt.c: 508: unsigned short flag;
  1943                           ;doprnt.c: 515: char d;
  1944                           ;doprnt.c: 516: double fval;
  1945                           ;doprnt.c: 517: int exp;
  1946                           ;doprnt.c: 523: union {
  1947                           ;doprnt.c: 524: unsigned long vd;
  1948                           ;doprnt.c: 525: double integ;
  1949                           ;doprnt.c: 526: } tmpval;
  1950                           ;doprnt.c: 528: unsigned long val;
  1951                           ;doprnt.c: 529: unsigned len;
  1952                           ;doprnt.c: 530: const char * cp;
  1953                           ;doprnt.c: 533: *ap = __va_start();
  1954                           
  1955                           ;incstack = 0
  1956  000012  0E98               	movlw	low (?_sprintf+4)
  1957  000014  0100               	movlb	0	; () banked
  1958  000016  6FA8               	movwf	sprintf@ap& (0+255),b
  1959  000018  0E00               	movlw	high (?_sprintf+4)
  1960  00001A  6FA9               	movwf	(sprintf@ap+1)& (0+255),b
  1961                           
  1962                           ;doprnt.c: 536: while(c = *f++) {
  1963  00001C  EF48  F005         	goto	u6910
  1964  000020                     
  1965                           ; BSR set to: 0
  1966                           ;doprnt.c: 538: if(c != '%')
  1967                           
  1968                           ; BSR set to: 0
  1969  000020  0E25               	movlw	37
  1970  000022  19C0               	xorwf	sprintf@c& (0+255),w,b
  1971  000024  B4D8               	btfsc	status,2,c
  1972  000026  D00A               	goto	l354
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 540: {
  1976                           ;doprnt.c: 541: ((*sp++ = (c)));
  1977  000028  C094  FFD9         	movff	sprintf@sp,fsr2l
  1978  00002C  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  1979  000030  C0C0  FFDF         	movff	sprintf@c,indf2
  1980                           
  1981                           ; BSR set to: 0
  1982  000034  4B94               	infsnz	sprintf@sp& (0+255),f,b
  1983  000036  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  1984                           
  1985                           ;doprnt.c: 542: continue;
  1986  000038  EF48  F005         	goto	u6910
  1987  00003C                     l354:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;doprnt.c: 543: }
  1991                           ;doprnt.c: 546: width = 0;
  1992                           
  1993                           ; BSR set to: 0
  1994  00003C  0E00               	movlw	0
  1995  00003E  6FB9               	movwf	(sprintf@width+1)& (0+255),b
  1996  000040  0E00               	movlw	0
  1997  000042  6FB8               	movwf	sprintf@width& (0+255),b
  1998                           
  1999                           ;doprnt.c: 548: flag = 0;
  2000  000044  0E00               	movlw	0
  2001  000046  6FAD               	movwf	(sprintf@flag+1)& (0+255),b
  2002  000048  0E00               	movlw	0
  2003  00004A  6FAC               	movwf	sprintf@flag& (0+255),b
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2007  00004C  C096  FFF6         	movff	sprintf@f,tblptrl
  2008  000050  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2009  000054                     	if	0	;tblptru may be non-zero
  2010  000054                     	endif
  2011  000054                     	if	0	;tblptru may be non-zero
  2012  000054                     	endif
  2013  000054  0008               	tblrd		*
  2014  000056  50F5               	movf	tablat,w,c
  2015  000058  EC22  F017         	call	_isdigit
  2016  00005C  A0D8               	btfss	status,0,c
  2017  00005E  D034               	goto	u6410
  2018                           
  2019                           ;doprnt.c: 598: width = 0;
  2020  000060  0E00               	movlw	0
  2021  000062  0100               	movlb	0	; () banked
  2022  000064  6FB9               	movwf	(sprintf@width+1)& (0+255),b
  2023  000066  0E00               	movlw	0
  2024  000068  6FB8               	movwf	sprintf@width& (0+255),b
  2025  00006A                     
  2026                           ;doprnt.c: 600: width *= 10;
  2027                           
  2028                           ; BSR set to: 0
  2029  00006A  C0B8  F01B         	movff	sprintf@width,___wmul@multiplier
  2030  00006E  C0B9  F01C         	movff	sprintf@width+1,___wmul@multiplier+1
  2031  000072  0E00               	movlw	0
  2032  000074  6E1E               	movwf	___wmul@multiplicand+1,c
  2033  000076  0E0A               	movlw	10
  2034  000078  6E1D               	movwf	___wmul@multiplicand,c
  2035  00007A  ECD9  F016         	call	___wmul	;wreg free
  2036  00007E  C01B  F0B8         	movff	?___wmul,sprintf@width
  2037  000082  C01C  F0B9         	movff	?___wmul+1,sprintf@width+1
  2038                           
  2039                           ;doprnt.c: 601: width += *f++ - '0';
  2040  000086  0ED0               	movlw	208
  2041  000088  0100               	movlb	0	; () banked
  2042  00008A  6F9E               	movwf	??_sprintf& (0+255),b
  2043  00008C  0EFF               	movlw	255
  2044  00008E  6F9F               	movwf	(??_sprintf+1)& (0+255),b
  2045  000090  C096  FFF6         	movff	sprintf@f,tblptrl
  2046  000094  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2047  000098                     	if	0	;tblptru may be non-zero
  2048  000098                     	endif
  2049  000098                     	if	0	;tblptru may be non-zero
  2050  000098                     	endif
  2051  000098  0008               	tblrd		*
  2052  00009A  50F5               	movf	tablat,w,c
  2053  00009C  6FA0               	movwf	(??_sprintf+2)& (0+255),b
  2054  00009E  6BA1               	clrf	(??_sprintf+3)& (0+255),b
  2055  0000A0  519E               	movf	??_sprintf& (0+255),w,b
  2056  0000A2  27A0               	addwf	(??_sprintf+2)& (0+255),f,b
  2057  0000A4  519F               	movf	(??_sprintf+1)& (0+255),w,b
  2058  0000A6  23A1               	addwfc	(??_sprintf+3)& (0+255),f,b
  2059  0000A8  51A0               	movf	(??_sprintf+2)& (0+255),w,b
  2060  0000AA  27B8               	addwf	sprintf@width& (0+255),f,b
  2061  0000AC  51A1               	movf	(??_sprintf+3)& (0+255),w,b
  2062  0000AE  23B9               	addwfc	(sprintf@width+1)& (0+255),f,b
  2063                           
  2064                           ; BSR set to: 0
  2065  0000B0  4B96               	infsnz	sprintf@f& (0+255),f,b
  2066  0000B2  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2070  0000B4  C096  FFF6         	movff	sprintf@f,tblptrl
  2071  0000B8  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2072  0000BC                     	if	0	;tblptru may be non-zero
  2073  0000BC                     	endif
  2074  0000BC                     	if	0	;tblptru may be non-zero
  2075  0000BC                     	endif
  2076  0000BC  0008               	tblrd		*
  2077  0000BE  50F5               	movf	tablat,w,c
  2078  0000C0  EC22  F017         	call	_isdigit
  2079  0000C4  B0D8               	btfsc	status,0,c
  2080  0000C6  D7D1               	goto	l356
  2081  0000C8                     u6410:
  2082                           
  2083                           ;doprnt.c: 608: }
  2084                           ;doprnt.c: 611: if(*f == '.') {
  2085  0000C8  C096  FFF6         	movff	sprintf@f,tblptrl
  2086  0000CC  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2087  0000D0                     	if	0	;tblptru may be non-zero
  2088  0000D0                     	endif
  2089  0000D0                     	if	0	;tblptru may be non-zero
  2090  0000D0                     	endif
  2091  0000D0  0008               	tblrd		*
  2092  0000D2  50F5               	movf	tablat,w,c
  2093  0000D4  0A2E               	xorlw	46
  2094  0000D6  A4D8               	btfss	status,2,c
  2095  0000D8  D030               	goto	l358
  2096                           
  2097                           ;doprnt.c: 612: flag |= 0x4000;
  2098  0000DA  0100               	movlb	0	; () banked
  2099  0000DC  8DAD               	bsf	(sprintf@flag+1)& (0+255),6,b
  2100                           
  2101                           ;doprnt.c: 613: f++;
  2102  0000DE  4B96               	infsnz	sprintf@f& (0+255),f,b
  2103  0000E0  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;doprnt.c: 620: {
  2107                           ;doprnt.c: 621: prec = 0;
  2108  0000E2  0E00               	movlw	0
  2109  0000E4  6FBF               	movwf	(sprintf@prec+1)& (0+255),b
  2110  0000E6  0E00               	movlw	0
  2111  0000E8  6FBE               	movwf	sprintf@prec& (0+255),b
  2112                           
  2113                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2114  0000EA  D01C               	goto	l359
  2115  0000EC                     
  2116                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2117                           
  2118                           ; BSR set to: 0
  2119  0000EC  C0BE  F01B         	movff	sprintf@prec,___wmul@multiplier
  2120  0000F0  C0BF  F01C         	movff	sprintf@prec+1,___wmul@multiplier+1
  2121  0000F4  0E00               	movlw	0
  2122  0000F6  6E1E               	movwf	___wmul@multiplicand+1,c
  2123  0000F8  0E0A               	movlw	10
  2124  0000FA  6E1D               	movwf	___wmul@multiplicand,c
  2125  0000FC  ECD9  F016         	call	___wmul	;wreg free
  2126  000100  C096  FFF6         	movff	sprintf@f,tblptrl
  2127  000104  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2128  000108                     	if	0	;tblptru may be non-zero
  2129  000108                     	endif
  2130  000108                     	if	0	;tblptru may be non-zero
  2131  000108                     	endif
  2132  000108  0008               	tblrd		*
  2133  00010A  50F5               	movf	tablat,w,c
  2134  00010C  261B               	addwf	?___wmul,f,c
  2135  00010E  0E00               	movlw	0
  2136  000110  221C               	addwfc	?___wmul+1,f,c
  2137  000112  0ED0               	movlw	208
  2138  000114  241B               	addwf	?___wmul,w,c
  2139  000116  0100               	movlb	0	; () banked
  2140  000118  6FBE               	movwf	sprintf@prec& (0+255),b
  2141  00011A  0EFF               	movlw	255
  2142  00011C  201C               	addwfc	?___wmul+1,w,c
  2143  00011E  6FBF               	movwf	(sprintf@prec+1)& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146  000120  4B96               	infsnz	sprintf@f& (0+255),f,b
  2147  000122  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  2148  000124                     l359:
  2149                           
  2150                           ; BSR set to: 0
  2151                           
  2152                           ; BSR set to: 0
  2153  000124  C096  FFF6         	movff	sprintf@f,tblptrl
  2154  000128  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2155  00012C                     	if	0	;tblptru may be non-zero
  2156  00012C                     	endif
  2157  00012C                     	if	0	;tblptru may be non-zero
  2158  00012C                     	endif
  2159  00012C  0008               	tblrd		*
  2160  00012E  50F5               	movf	tablat,w,c
  2161  000130  EC22  F017         	call	_isdigit
  2162  000134  A0D8               	btfss	status,0,c
  2163  000136  D05A               	goto	l363
  2164  000138  D7D9               	goto	l360
  2165  00013A                     l358:
  2166                           
  2167                           ;doprnt.c: 626: prec = 0;
  2168  00013A  0E00               	movlw	0
  2169  00013C  0100               	movlb	0	; () banked
  2170  00013E  6FBF               	movwf	(sprintf@prec+1)& (0+255),b
  2171  000140  0E00               	movlw	0
  2172  000142  6FBE               	movwf	sprintf@prec& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;doprnt.c: 628: flag |= 0x1000;
  2176  000144  89AD               	bsf	(sprintf@flag+1)& (0+255),4,b
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;doprnt.c: 630: }
  2180                           ;doprnt.c: 635: switch(c = *f++) {
  2181  000146  D052               	goto	l363
  2182  000148                     
  2183                           ; BSR set to: 0
  2184                           ;doprnt.c: 663: flag |= 0x400;
  2185                           
  2186                           ; BSR set to: 0
  2187  000148  85AD               	bsf	(sprintf@flag+1)& (0+255),2,b
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;doprnt.c: 698: case 'i':
  2191                           ;doprnt.c: 699: break;
  2192                           
  2193                           ; BSR set to: 0
  2194                           
  2195                           ;doprnt.c: 697: case 'd':
  2196                           
  2197                           ;doprnt.c: 664: break;
  2198  00014A  D068               	goto	l367
  2199  00014C                     
  2200                           ; BSR set to: 0
  2201                           ;doprnt.c: 753: if(prec && prec < len)
  2202                           
  2203                           ; BSR set to: 0
  2204  00014C  51BE               	movf	sprintf@prec& (0+255),w,b
  2205  00014E  11BF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2206  000150  B4D8               	btfsc	status,2,c
  2207  000152  D00A               	goto	l371
  2208                           
  2209                           ; BSR set to: 0
  2210  000154  51AA               	movf	sprintf@len& (0+255),w,b
  2211  000156  5DBE               	subwf	sprintf@prec& (0+255),w,b
  2212  000158  51AB               	movf	(sprintf@len+1)& (0+255),w,b
  2213  00015A  59BF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  2214  00015C  B0D8               	btfsc	status,0,c
  2215  00015E  D004               	goto	l371
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;doprnt.c: 754: len = prec;
  2219  000160  C0BE  F0AA         	movff	sprintf@prec,sprintf@len
  2220  000164  C0BF  F0AB         	movff	sprintf@prec+1,sprintf@len+1
  2221  000168                     l371:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;doprnt.c: 757: if(width > len)
  2225                           
  2226                           ; BSR set to: 0
  2227  000168  51B8               	movf	sprintf@width& (0+255),w,b
  2228  00016A  5DAA               	subwf	sprintf@len& (0+255),w,b
  2229  00016C  51B9               	movf	(sprintf@width+1)& (0+255),w,b
  2230  00016E  59AB               	subwfb	(sprintf@len+1)& (0+255),w,b
  2231  000170  B0D8               	btfsc	status,0,c
  2232  000172  D005               	goto	l372
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;doprnt.c: 758: width -= len;
  2236  000174  51AA               	movf	sprintf@len& (0+255),w,b
  2237  000176  5FB8               	subwf	sprintf@width& (0+255),f,b
  2238  000178  51AB               	movf	(sprintf@len+1)& (0+255),w,b
  2239  00017A  5BB9               	subwfb	(sprintf@width+1)& (0+255),f,b
  2240  00017C  D00D               	goto	l374
  2241  00017E                     l372:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 759: else
  2245                           ;doprnt.c: 760: width = 0;
  2246                           
  2247                           ; BSR set to: 0
  2248  00017E  0E00               	movlw	0
  2249  000180  6FB9               	movwf	(sprintf@width+1)& (0+255),b
  2250  000182  0E00               	movlw	0
  2251  000184  6FB8               	movwf	sprintf@width& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;doprnt.c: 764: while(width--)
  2255  000186  D008               	goto	l374
  2256  000188                     l5685:
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2260  000188  C094  FFD9         	movff	sprintf@sp,fsr2l
  2261  00018C  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  2262  000190  0E20               	movlw	32
  2263  000192  6EDF               	movwf	indf2,c
  2264                           
  2265                           ; BSR set to: 0
  2266  000194  4B94               	infsnz	sprintf@sp& (0+255),f,b
  2267  000196  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  2268  000198                     l374:
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  000198  07B8               	decf	sprintf@width& (0+255),f,b
  2274  00019A  A0D8               	btfss	status,0,c
  2275  00019C  07B9               	decf	(sprintf@width+1)& (0+255),f,b
  2276  00019E  29B8               	incf	sprintf@width& (0+255),w,b
  2277  0001A0  E1F3               	bnz	l5685
  2278  0001A2  29B9               	incf	(sprintf@width+1)& (0+255),w,b
  2279  0001A4  B4D8               	btfsc	status,2,c
  2280  0001A6  D00F               	goto	l377
  2281  0001A8  D7EF               	goto	l375
  2282  0001AA                     l5691:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2286  0001AA  C0A6  FFD9         	movff	sprintf@cp,fsr2l
  2287  0001AE  C0A7  FFDA         	movff	sprintf@cp+1,fsr2h
  2288  0001B2  C094  FFE1         	movff	sprintf@sp,fsr1l
  2289  0001B6  C095  FFE2         	movff	sprintf@sp+1,fsr1h
  2290  0001BA  CFDF FFE7          	movff	indf2,indf1
  2291                           
  2292                           ; BSR set to: 0
  2293  0001BE  4BA6               	infsnz	sprintf@cp& (0+255),f,b
  2294  0001C0  2BA7               	incf	(sprintf@cp+1)& (0+255),f,b
  2295                           
  2296                           ; BSR set to: 0
  2297  0001C2  4B94               	infsnz	sprintf@sp& (0+255),f,b
  2298  0001C4  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  2299  0001C6                     l377:
  2300                           
  2301                           ; BSR set to: 0
  2302                           
  2303                           ; BSR set to: 0
  2304  0001C6  07AA               	decf	sprintf@len& (0+255),f,b
  2305  0001C8  A0D8               	btfss	status,0,c
  2306  0001CA  07AB               	decf	(sprintf@len+1)& (0+255),f,b
  2307  0001CC  29AA               	incf	sprintf@len& (0+255),w,b
  2308  0001CE  E1ED               	bnz	l5691
  2309  0001D0  29AB               	incf	(sprintf@len+1)& (0+255),w,b
  2310  0001D2  B4D8               	btfsc	status,2,c
  2311  0001D4  EF48  F005         	goto	u6910
  2312  0001D8  D7E8               	goto	l378
  2313  0001DA                     
  2314                           ; BSR set to: 0
  2315                           ;doprnt.c: 805: cp = (char *)&c;
  2316                           
  2317                           ; BSR set to: 0
  2318  0001DA  0EC0               	movlw	low sprintf@c
  2319  0001DC  6FA6               	movwf	sprintf@cp& (0+255),b
  2320  0001DE  0E00               	movlw	high sprintf@c
  2321  0001E0  6FA7               	movwf	(sprintf@cp+1)& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 806: len = 1;
  2325  0001E2  0E00               	movlw	0
  2326  0001E4  6FAB               	movwf	(sprintf@len+1)& (0+255),b
  2327  0001E6  0E01               	movlw	1
  2328  0001E8  6FAA               	movwf	sprintf@len& (0+255),b
  2329                           
  2330                           ;doprnt.c: 807: goto dostring;
  2331  0001EA  D7B0               	goto	l370
  2332  0001EC                     l363:
  2333                           
  2334                           ; BSR set to: 0
  2335  0001EC  C096  FFF6         	movff	sprintf@f,tblptrl
  2336  0001F0  C097  FFF7         	movff	sprintf@f+1,tblptrh
  2337  0001F4  0100               	movlb	0	; () banked
  2338  0001F6  4B96               	infsnz	sprintf@f& (0+255),f,b
  2339  0001F8  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  2340  0001FA                     	if	0	;tblptru may be non-zero
  2341  0001FA                     	endif
  2342  0001FA                     	if	0	;tblptru may be non-zero
  2343  0001FA                     	endif
  2344  0001FA  0008               	tblrd		*
  2345  0001FC  CFF5 F0C0          	movff	tablat,sprintf@c
  2346  000200  51C0               	movf	sprintf@c& (0+255),w,b
  2347                           
  2348                           ; Switch size 1, requested type "space"
  2349                           ; Number of cases is 4, Range of values is 0 to 105
  2350                           ; switch strategies available:
  2351                           ; Name         Instructions Cycles
  2352                           ; simple_byte           13     7 (average)
  2353                           ;	Chosen strategy is simple_byte
  2354  000202  0A00               	xorlw	0	; case 0
  2355  000204  B4D8               	btfsc	status,2,c
  2356  000206  EF55  F005         	goto	u6920
  2357  00020A  0A64               	xorlw	100	; case 100
  2358  00020C  B4D8               	btfsc	status,2,c
  2359  00020E  D006               	goto	l367
  2360  000210  0A02               	xorlw	2	; case 102
  2361  000212  B4D8               	btfsc	status,2,c
  2362  000214  D799               	goto	l366
  2363  000216  0A0F               	xorlw	15	; case 105
  2364  000218  A4D8               	btfss	status,2,c
  2365  00021A  D7DF               	goto	l380
  2366  00021C                     l367:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 825: if(flag & (0x700)) {
  2370                           
  2371                           ; BSR set to: 0
  2372  00021C  0E07               	movlw	7
  2373  00021E  15AD               	andwf	(sprintf@flag+1)& (0+255),w,b
  2374  000220  B4D8               	btfsc	status,2,c
  2375  000222  D325               	goto	l381
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 827: if(flag & 0x1000)
  2379  000224  A9AD               	btfss	(sprintf@flag+1)& (0+255),4,b
  2380  000226  D004               	goto	l382
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 829: prec = 6;
  2384  000228  0E00               	movlw	0
  2385  00022A  6FBF               	movwf	(sprintf@prec+1)& (0+255),b
  2386  00022C  0E06               	movlw	6
  2387  00022E  6FBE               	movwf	sprintf@prec& (0+255),b
  2388  000230                     l382:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2392                           
  2393                           ; BSR set to: 0
  2394  000230  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  2395  000234  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  2396  000238  CFDE F0BA          	movff	postinc2,sprintf@fval
  2397  00023C  CFDE F0BB          	movff	postinc2,sprintf@fval+1
  2398  000240  CFDE F0BC          	movff	postinc2,sprintf@fval+2
  2399  000244  CFDE F0BD          	movff	postinc2,sprintf@fval+3
  2400                           
  2401                           ; BSR set to: 0
  2402  000248  0E04               	movlw	4
  2403  00024A  27A8               	addwf	sprintf@ap& (0+255),f,b
  2404  00024C  0E00               	movlw	0
  2405  00024E  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;doprnt.c: 831: if(fval < 0.0) {
  2409  000250  AFBD               	btfss	(sprintf@fval+3)& (0+255),7,b
  2410  000252  D015               	goto	l383
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 832: fval = -fval;
  2414  000254  C0BA  F02F         	movff	sprintf@fval,___flneg@f1
  2415  000258  C0BB  F030         	movff	sprintf@fval+1,___flneg@f1+1
  2416  00025C  C0BC  F031         	movff	sprintf@fval+2,___flneg@f1+2
  2417  000260  C0BD  F032         	movff	sprintf@fval+3,___flneg@f1+3
  2418  000264  EC94  F016         	call	___flneg	;wreg free
  2419  000268  C02F  F0BA         	movff	?___flneg,sprintf@fval
  2420  00026C  C030  F0BB         	movff	?___flneg+1,sprintf@fval+1
  2421  000270  C031  F0BC         	movff	?___flneg+2,sprintf@fval+2
  2422  000274  C032  F0BD         	movff	?___flneg+3,sprintf@fval+3
  2423                           
  2424                           ;doprnt.c: 833: flag |= 0x03;
  2425  000278  0E03               	movlw	3
  2426  00027A  0100               	movlb	0	; () banked
  2427  00027C  13AC               	iorwf	sprintf@flag& (0+255),f,b
  2428  00027E                     l383:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;doprnt.c: 834: }
  2432                           ;doprnt.c: 835: exp = 0;
  2433                           
  2434                           ; BSR set to: 0
  2435  00027E  0E00               	movlw	0
  2436  000280  6FB7               	movwf	(sprintf@exp+1)& (0+255),b
  2437  000282  0E00               	movlw	0
  2438  000284  6FB6               	movwf	sprintf@exp& (0+255),b
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;doprnt.c: 836: if( fval!=0) {
  2442  000286  51BA               	movf	sprintf@fval& (0+255),w,b
  2443  000288  11BB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2444  00028A  11BC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2445  00028C  11BD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2446  00028E  B4D8               	btfsc	status,2,c
  2447  000290  D083               	goto	l388
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2451  000292  35BC               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2452  000294  35BD               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2453  000296  0F82               	addlw	130
  2454  000298  6FB6               	movwf	sprintf@exp& (0+255),b
  2455  00029A  6BB7               	clrf	(sprintf@exp+1)& (0+255),b
  2456  00029C  0EFF               	movlw	255
  2457  00029E  23B7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 838: exp--;
  2461  0002A0  07B6               	decf	sprintf@exp& (0+255),f,b
  2462  0002A2  A0D8               	btfss	status,0,c
  2463  0002A4  07B7               	decf	(sprintf@exp+1)& (0+255),f,b
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 839: exp *= 3;
  2467  0002A6  C0B6  F01B         	movff	sprintf@exp,___wmul@multiplier
  2468  0002AA  C0B7  F01C         	movff	sprintf@exp+1,___wmul@multiplier+1
  2469  0002AE  0E00               	movlw	0
  2470  0002B0  6E1E               	movwf	___wmul@multiplicand+1,c
  2471  0002B2  0E03               	movlw	3
  2472  0002B4  6E1D               	movwf	___wmul@multiplicand,c
  2473  0002B6  ECD9  F016         	call	___wmul	;wreg free
  2474  0002BA  C01B  F0B6         	movff	?___wmul,sprintf@exp
  2475  0002BE  C01C  F0B7         	movff	?___wmul+1,sprintf@exp+1
  2476                           
  2477                           ;doprnt.c: 840: exp /= 10;
  2478  0002C2  C0B6  F021         	movff	sprintf@exp,___awdiv@dividend
  2479  0002C6  C0B7  F022         	movff	sprintf@exp+1,___awdiv@dividend+1
  2480  0002CA  0E00               	movlw	0
  2481  0002CC  6E24               	movwf	___awdiv@divisor+1,c
  2482  0002CE  0E0A               	movlw	10
  2483  0002D0  6E23               	movwf	___awdiv@divisor,c
  2484  0002D2  ECF3  F013         	call	___awdiv	;wreg free
  2485  0002D6  C021  F0B6         	movff	?___awdiv,sprintf@exp
  2486  0002DA  C022  F0B7         	movff	?___awdiv+1,sprintf@exp+1
  2487                           
  2488                           ;doprnt.c: 841: if(exp < 0)
  2489  0002DE  0100               	movlb	0	; () banked
  2490  0002E0  AFB7               	btfss	(sprintf@exp+1)& (0+255),7,b
  2491  0002E2  D003               	goto	l385
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;doprnt.c: 842: exp--;
  2495  0002E4  07B6               	decf	sprintf@exp& (0+255),f,b
  2496  0002E6  A0D8               	btfss	status,0,c
  2497  0002E8  07B7               	decf	(sprintf@exp+1)& (0+255),f,b
  2498  0002EA                     l385:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2502                           
  2503                           ; BSR set to: 0
  2504  0002EA  51B6               	movf	sprintf@exp& (0+255),w,b
  2505  0002EC  0800               	sublw	0
  2506  0002EE  ECF9  F007         	call	_scale
  2507  0002F2  C042  F0AE         	movff	?_scale,sprintf@tmpval
  2508  0002F6  C043  F0AF         	movff	?_scale+1,sprintf@tmpval+1
  2509  0002FA  C044  F0B0         	movff	?_scale+2,sprintf@tmpval+2
  2510  0002FE  C045  F0B1         	movff	?_scale+3,sprintf@tmpval+3
  2511                           
  2512                           ;doprnt.c: 847: tmpval.integ *= fval;
  2513  000302  C0AE  F029         	movff	sprintf@tmpval,___flmul@b
  2514  000306  C0AF  F02A         	movff	sprintf@tmpval+1,___flmul@b+1
  2515  00030A  C0B0  F02B         	movff	sprintf@tmpval+2,___flmul@b+2
  2516  00030E  C0B1  F02C         	movff	sprintf@tmpval+3,___flmul@b+3
  2517  000312  C0BA  F02D         	movff	sprintf@fval,___flmul@a
  2518  000316  C0BB  F02E         	movff	sprintf@fval+1,___flmul@a+1
  2519  00031A  C0BC  F02F         	movff	sprintf@fval+2,___flmul@a+2
  2520  00031E  C0BD  F030         	movff	sprintf@fval+3,___flmul@a+3
  2521  000322  EC15  F00A         	call	___flmul	;wreg free
  2522  000326  C029  F0AE         	movff	?___flmul,sprintf@tmpval
  2523  00032A  C02A  F0AF         	movff	?___flmul+1,sprintf@tmpval+1
  2524  00032E  C02B  F0B0         	movff	?___flmul+2,sprintf@tmpval+2
  2525  000332  C02C  F0B1         	movff	?___flmul+3,sprintf@tmpval+3
  2526                           
  2527                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2528  000336  C0AE  F088         	movff	sprintf@tmpval,___flge@ff1
  2529  00033A  C0AF  F089         	movff	sprintf@tmpval+1,___flge@ff1+1
  2530  00033E  C0B0  F08A         	movff	sprintf@tmpval+2,___flge@ff1+2
  2531  000342  C0B1  F08B         	movff	sprintf@tmpval+3,___flge@ff1+3
  2532  000346  0E00               	movlw	0
  2533  000348  0100               	movlb	0	; () banked
  2534  00034A  6F8C               	movwf	___flge@ff2& (0+255),b
  2535  00034C  0E00               	movlw	0
  2536  00034E  6F8D               	movwf	(___flge@ff2+1)& (0+255),b
  2537  000350  0E80               	movlw	128
  2538  000352  6F8E               	movwf	(___flge@ff2+2)& (0+255),b
  2539  000354  0E3F               	movlw	63
  2540  000356  6F8F               	movwf	(___flge@ff2+3)& (0+255),b
  2541  000358  ECD3  F011         	call	___flge	;wreg free
  2542  00035C  0100               	movlb	0	; () banked
  2543  00035E  B0D8               	btfsc	status,0,c
  2544  000360  D004               	goto	l386
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 849: exp--;
  2548  000362  07B6               	decf	sprintf@exp& (0+255),f,b
  2549  000364  A0D8               	btfss	status,0,c
  2550  000366  07B7               	decf	(sprintf@exp+1)& (0+255),f,b
  2551  000368  D017               	goto	l388
  2552  00036A                     l386:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2556                           
  2557                           ; BSR set to: 0
  2558  00036A  C0AE  F088         	movff	sprintf@tmpval,___flge@ff1
  2559  00036E  C0AF  F089         	movff	sprintf@tmpval+1,___flge@ff1+1
  2560  000372  C0B0  F08A         	movff	sprintf@tmpval+2,___flge@ff1+2
  2561  000376  C0B1  F08B         	movff	sprintf@tmpval+3,___flge@ff1+3
  2562  00037A  0E00               	movlw	0
  2563  00037C  6F8C               	movwf	___flge@ff2& (0+255),b
  2564  00037E  0E00               	movlw	0
  2565  000380  6F8D               	movwf	(___flge@ff2+1)& (0+255),b
  2566  000382  0E20               	movlw	32
  2567  000384  6F8E               	movwf	(___flge@ff2+2)& (0+255),b
  2568  000386  0E41               	movlw	65
  2569  000388  6F8F               	movwf	(___flge@ff2+3)& (0+255),b
  2570  00038A  ECD3  F011         	call	___flge	;wreg free
  2571  00038E  0100               	movlb	0	; () banked
  2572  000390  A0D8               	btfss	status,0,c
  2573  000392  D002               	goto	l388
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;doprnt.c: 851: exp++;
  2577  000394  4BB6               	infsnz	sprintf@exp& (0+255),f,b
  2578  000396  2BB7               	incf	(sprintf@exp+1)& (0+255),f,b
  2579  000398                     l388:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 852: }
  2583                           ;doprnt.c: 1112: if(prec <= 12)
  2584                           
  2585                           ; BSR set to: 0
  2586                           
  2587                           ; BSR set to: 0
  2588                           
  2589                           ; BSR set to: 0
  2590  000398  BFBF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2591  00039A  D006               	goto	u6560
  2592  00039C  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  2593  00039E  E121               	bnz	l5755
  2594  0003A0  0E0D               	movlw	13
  2595  0003A2  5DBE               	subwf	sprintf@prec& (0+255),w,b
  2596  0003A4  B0D8               	btfsc	status,0,c
  2597  0003A6  D01D               	goto	l389
  2598  0003A8                     u6560:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1113: fval += fround(prec);
  2602  0003A8  C0BA  F04F         	movff	sprintf@fval,___fladd@b
  2603  0003AC  C0BB  F050         	movff	sprintf@fval+1,___fladd@b+1
  2604  0003B0  C0BC  F051         	movff	sprintf@fval+2,___fladd@b+2
  2605  0003B4  C0BD  F052         	movff	sprintf@fval+3,___fladd@b+3
  2606  0003B8  51BE               	movf	sprintf@prec& (0+255),w,b
  2607  0003BA  ECB9  F00E         	call	_fround
  2608  0003BE  C042  F053         	movff	?_fround,___fladd@a
  2609  0003C2  C043  F054         	movff	?_fround+1,___fladd@a+1
  2610  0003C6  C044  F055         	movff	?_fround+2,___fladd@a+2
  2611  0003CA  C045  F056         	movff	?_fround+3,___fladd@a+3
  2612  0003CE  ECBD  F00B         	call	___fladd	;wreg free
  2613  0003D2  C04F  F0BA         	movff	?___fladd,sprintf@fval
  2614  0003D6  C050  F0BB         	movff	?___fladd+1,sprintf@fval+1
  2615  0003DA  C051  F0BC         	movff	?___fladd+2,sprintf@fval+2
  2616  0003DE  C052  F0BD         	movff	?___fladd+3,sprintf@fval+3
  2617  0003E2                     l389:
  2618  0003E2                     l5755:
  2619                           
  2620                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2621  0003E2  0100               	movlb	0	; () banked
  2622  0003E4  BFB7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2623  0003E6  D006               	goto	u6570
  2624  0003E8  51B7               	movf	(sprintf@exp+1)& (0+255),w,b
  2625  0003EA  E122               	bnz	l5763
  2626  0003EC  0E0A               	movlw	10
  2627  0003EE  5DB6               	subwf	sprintf@exp& (0+255),w,b
  2628  0003F0  B0D8               	btfsc	status,0,c
  2629  0003F2  D01E               	goto	u6600
  2630  0003F4                     u6570:
  2631                           
  2632                           ; BSR set to: 0
  2633  0003F4  51BA               	movf	sprintf@fval& (0+255),w,b
  2634  0003F6  11BB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2635  0003F8  11BC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2636  0003FA  11BD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2637  0003FC  B4D8               	btfsc	status,2,c
  2638  0003FE  D062               	goto	l390
  2639                           
  2640                           ; BSR set to: 0
  2641  000400  C0BA  F088         	movff	sprintf@fval,___fltol@f1
  2642  000404  C0BB  F089         	movff	sprintf@fval+1,___fltol@f1+1
  2643  000408  C0BC  F08A         	movff	sprintf@fval+2,___fltol@f1+2
  2644  00040C  C0BD  F08B         	movff	sprintf@fval+3,___fltol@f1+3
  2645  000410  ECE4  F012         	call	___fltol	;wreg free
  2646  000414  0100               	movlb	0	; () banked
  2647  000416  5188               	movf	?___fltol& (0+255),w,b
  2648  000418  1189               	iorwf	(?___fltol+1)& (0+255),w,b
  2649  00041A  118A               	iorwf	(?___fltol+2)& (0+255),w,b
  2650  00041C  118B               	iorwf	(?___fltol+3)& (0+255),w,b
  2651  00041E  B4D8               	btfsc	status,2,c
  2652                           
  2653                           ; BSR set to: 0
  2654  000420  BFB7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2655  000422  D050               	goto	l390
  2656  000424  51B7               	movf	(sprintf@exp+1)& (0+255),w,b
  2657  000426  E104               	bnz	l5763
  2658  000428  0E02               	movlw	2
  2659  00042A  5DB6               	subwf	sprintf@exp& (0+255),w,b
  2660  00042C  A0D8               	btfss	status,0,c
  2661  00042E  D04A               	goto	l390
  2662  000430                     u6600:
  2663  000430                     l5763:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2667  000430  C0AE  F088         	movff	sprintf@tmpval,___flge@ff1
  2668  000434  C0AF  F089         	movff	sprintf@tmpval+1,___flge@ff1+1
  2669  000438  C0B0  F08A         	movff	sprintf@tmpval+2,___flge@ff1+2
  2670  00043C  C0B1  F08B         	movff	sprintf@tmpval+3,___flge@ff1+3
  2671  000440  0E5F               	movlw	95
  2672  000442  6F8C               	movwf	___flge@ff2& (0+255),b
  2673  000444  0E70               	movlw	112
  2674  000446  6F8D               	movwf	(___flge@ff2+1)& (0+255),b
  2675  000448  0E89               	movlw	137
  2676  00044A  6F8E               	movwf	(___flge@ff2+2)& (0+255),b
  2677  00044C  0E40               	movlw	64
  2678  00044E  6F8F               	movwf	(___flge@ff2+3)& (0+255),b
  2679  000450  ECD3  F011         	call	___flge	;wreg free
  2680  000454  0100               	movlb	0	; () banked
  2681  000456  B0D8               	btfsc	status,0,c
  2682  000458  D002               	goto	l393
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2686  00045A  0EF7               	movlw	247
  2687  00045C  D001               	goto	L1
  2688  00045E                     l393:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2692                           
  2693                           ; BSR set to: 0
  2694  00045E  0EF8               	movlw	248
  2695  000460                     L1:
  2696  000460  27B6               	addwf	sprintf@exp& (0+255),f,b
  2697  000462  0EFF               	movlw	255
  2698  000464  23B7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2702                           
  2703                           ; BSR set to: 0
  2704  000466  51B6               	movf	sprintf@exp& (0+255),w,b
  2705  000468  ECF9  F007         	call	_scale
  2706  00046C  C042  F0AE         	movff	?_scale,sprintf@tmpval
  2707  000470  C043  F0AF         	movff	?_scale+1,sprintf@tmpval+1
  2708  000474  C044  F0B0         	movff	?_scale+2,sprintf@tmpval+2
  2709  000478  C045  F0B1         	movff	?_scale+3,sprintf@tmpval+3
  2710  00047C  C0BA  F01B         	movff	sprintf@fval,__div_to_l_@f1
  2711  000480  C0BB  F01C         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2712  000484  C0BC  F01D         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2713  000488  C0BD  F01E         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2714  00048C  C0AE  F01F         	movff	sprintf@tmpval,__div_to_l_@f2
  2715  000490  C0AF  F020         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2716  000494  C0B0  F021         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2717  000498  C0B1  F022         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2718  00049C  EC3F  F011         	call	__div_to_l_	;wreg free
  2719  0004A0  C01B  F0B2         	movff	?__div_to_l_,sprintf@val
  2720  0004A4  C01C  F0B3         	movff	?__div_to_l_+1,sprintf@val+1
  2721  0004A8  C01D  F0B4         	movff	?__div_to_l_+2,sprintf@val+2
  2722  0004AC  C01E  F0B5         	movff	?__div_to_l_+3,sprintf@val+3
  2723                           
  2724                           ;doprnt.c: 1129: fval = 0.0;
  2725  0004B0  0E00               	movlw	0
  2726  0004B2  0100               	movlb	0	; () banked
  2727  0004B4  6FBA               	movwf	sprintf@fval& (0+255),b
  2728  0004B6  0E00               	movlw	0
  2729  0004B8  6FBB               	movwf	(sprintf@fval+1)& (0+255),b
  2730  0004BA  0E00               	movlw	0
  2731  0004BC  6FBC               	movwf	(sprintf@fval+2)& (0+255),b
  2732  0004BE  0E00               	movlw	0
  2733  0004C0  6FBD               	movwf	(sprintf@fval+3)& (0+255),b
  2734                           
  2735                           ;doprnt.c: 1130: } else {
  2736  0004C2  D03C               	goto	l399
  2737  0004C4                     l390:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2741                           
  2742                           ; BSR set to: 0
  2743  0004C4  C0BA  F088         	movff	sprintf@fval,___fltol@f1
  2744  0004C8  C0BB  F089         	movff	sprintf@fval+1,___fltol@f1+1
  2745  0004CC  C0BC  F08A         	movff	sprintf@fval+2,___fltol@f1+2
  2746  0004D0  C0BD  F08B         	movff	sprintf@fval+3,___fltol@f1+3
  2747  0004D4  ECE4  F012         	call	___fltol	;wreg free
  2748  0004D8  C088  F0B2         	movff	?___fltol,sprintf@val
  2749  0004DC  C089  F0B3         	movff	?___fltol+1,sprintf@val+1
  2750  0004E0  C08A  F0B4         	movff	?___fltol+2,sprintf@val+2
  2751  0004E4  C08B  F0B5         	movff	?___fltol+3,sprintf@val+3
  2752                           
  2753                           ;doprnt.c: 1132: fval -= (double)val;
  2754  0004E8  C0BA  F088         	movff	sprintf@fval,___flsub@b
  2755  0004EC  C0BB  F089         	movff	sprintf@fval+1,___flsub@b+1
  2756  0004F0  C0BC  F08A         	movff	sprintf@fval+2,___flsub@b+2
  2757  0004F4  C0BD  F08B         	movff	sprintf@fval+3,___flsub@b+3
  2758  0004F8  C0B2  F021         	movff	sprintf@val,___xxtofl@val
  2759  0004FC  C0B3  F022         	movff	sprintf@val+1,___xxtofl@val+1
  2760  000500  C0B4  F023         	movff	sprintf@val+2,___xxtofl@val+2
  2761  000504  C0B5  F024         	movff	sprintf@val+3,___xxtofl@val+3
  2762  000508  0E00               	movlw	0
  2763  00050A  ECFE  F00F         	call	___xxtofl
  2764  00050E  C021  F08C         	movff	?___xxtofl,___flsub@a
  2765  000512  C022  F08D         	movff	?___xxtofl+1,___flsub@a+1
  2766  000516  C023  F08E         	movff	?___xxtofl+2,___flsub@a+2
  2767  00051A  C024  F08F         	movff	?___xxtofl+3,___flsub@a+3
  2768  00051E  ECEE  F015         	call	___flsub	;wreg free
  2769  000522  C088  F0BA         	movff	?___flsub,sprintf@fval
  2770  000526  C089  F0BB         	movff	?___flsub+1,sprintf@fval+1
  2771  00052A  C08A  F0BC         	movff	?___flsub+2,sprintf@fval+2
  2772  00052E  C08B  F0BD         	movff	?___flsub+3,sprintf@fval+3
  2773                           
  2774                           ;doprnt.c: 1133: exp = 0;
  2775  000532  0E00               	movlw	0
  2776  000534  0100               	movlb	0	; () banked
  2777  000536  6FB7               	movwf	(sprintf@exp+1)& (0+255),b
  2778  000538  0E00               	movlw	0
  2779  00053A  6FB6               	movwf	sprintf@exp& (0+255),b
  2780  00053C                     l399:
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;doprnt.c: 1134: }
  2784                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2785                           
  2786                           ; BSR set to: 0
  2787  00053C  0E01               	movlw	1
  2788  00053E  6FC0               	movwf	sprintf@c& (0+255),b
  2789  000540                     l5783:
  2790                           
  2791                           ; BSR set to: 0
  2792  000540  0E0A               	movlw	10
  2793  000542  19C0               	xorwf	sprintf@c& (0+255),w,b
  2794  000544  B4D8               	btfsc	status,2,c
  2795  000546  D018               	goto	u6640
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;doprnt.c: 1137: if(val < dpowers[c])
  2799                           
  2800                           ; BSR set to: 0
  2801                           
  2802                           ; BSR set to: 0
  2803  000548  51C0               	movf	sprintf@c& (0+255),w,b
  2804  00054A  0D04               	mullw	4
  2805  00054C  0E63               	movlw	low _dpowers
  2806  00054E  24F3               	addwf	prodl,w,c
  2807  000550  6EF6               	movwf	tblptrl,c
  2808  000552  0EFF               	movlw	high _dpowers
  2809  000554  20F4               	addwfc	prodh,w,c
  2810  000556  6EF7               	movwf	tblptrh,c
  2811  000558                     	if	0	;There are less than 3 active tblptr bytes
  2812  000558                     	endif
  2813  000558  0009               	tblrd		*+
  2814  00055A  50F5               	movf	tablat,w,c
  2815  00055C  5DB2               	subwf	sprintf@val& (0+255),w,b
  2816  00055E  0009               	tblrd		*+
  2817  000560  50F5               	movf	tablat,w,c
  2818  000562  59B3               	subwfb	(sprintf@val+1)& (0+255),w,b
  2819  000564  0009               	tblrd		*+
  2820  000566  50F5               	movf	tablat,w,c
  2821  000568  59B4               	subwfb	(sprintf@val+2)& (0+255),w,b
  2822  00056A  0009               	tblrd		*+
  2823  00056C  50F5               	movf	tablat,w,c
  2824  00056E  59B5               	subwfb	(sprintf@val+3)& (0+255),w,b
  2825  000570  A0D8               	btfss	status,0,c
  2826  000572  D002               	goto	u6640
  2827                           
  2828                           ; BSR set to: 0
  2829                           
  2830                           ; BSR set to: 0
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 1138: break;
  2834  000574  2BC0               	incf	sprintf@c& (0+255),f,b
  2835  000576  D7E4               	goto	l5783
  2836  000578                     u6640:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;doprnt.c: 1142: width -= prec + c + exp;
  2840                           
  2841                           ; BSR set to: 0
  2842  000578  C0C0  F09E         	movff	sprintf@c,??_sprintf
  2843  00057C  6B9F               	clrf	(??_sprintf+1)& (0+255),b
  2844  00057E  BF9E               	btfsc	??_sprintf& (0+255),7,b
  2845  000580  079F               	decf	(??_sprintf+1)& (0+255),f,b
  2846  000582  51BE               	movf	sprintf@prec& (0+255),w,b
  2847  000584  279E               	addwf	??_sprintf& (0+255),f,b
  2848  000586  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  2849  000588  239F               	addwfc	(??_sprintf+1)& (0+255),f,b
  2850  00058A  51B6               	movf	sprintf@exp& (0+255),w,b
  2851  00058C  279E               	addwf	??_sprintf& (0+255),f,b
  2852  00058E  51B7               	movf	(sprintf@exp+1)& (0+255),w,b
  2853  000590  239F               	addwfc	(??_sprintf+1)& (0+255),f,b
  2854  000592  519E               	movf	??_sprintf& (0+255),w,b
  2855  000594  5FB8               	subwf	sprintf@width& (0+255),f,b
  2856  000596  519F               	movf	(??_sprintf+1)& (0+255),w,b
  2857  000598  5BB9               	subwfb	(sprintf@width+1)& (0+255),f,b
  2858                           
  2859                           ;doprnt.c: 1143: if(
  2860                           ;doprnt.c: 1147: prec)
  2861  00059A  51BE               	movf	sprintf@prec& (0+255),w,b
  2862  00059C  11BF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2863  00059E  B4D8               	btfsc	status,2,c
  2864  0005A0  D003               	goto	l403
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 1148: width--;
  2868  0005A2  07B8               	decf	sprintf@width& (0+255),f,b
  2869  0005A4  A0D8               	btfss	status,0,c
  2870  0005A6  07B9               	decf	(sprintf@width+1)& (0+255),f,b
  2871  0005A8                     l403:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;doprnt.c: 1149: if(flag & 0x03)
  2875                           
  2876                           ; BSR set to: 0
  2877  0005A8  0E03               	movlw	3
  2878  0005AA  15AC               	andwf	sprintf@flag& (0+255),w,b
  2879  0005AC  6F9E               	movwf	??_sprintf& (0+255),b
  2880  0005AE  0E00               	movlw	0
  2881  0005B0  15AD               	andwf	(sprintf@flag+1)& (0+255),w,b
  2882  0005B2  6F9F               	movwf	(??_sprintf+1)& (0+255),b
  2883  0005B4  519E               	movf	??_sprintf& (0+255),w,b
  2884  0005B6  119F               	iorwf	(??_sprintf+1)& (0+255),w,b
  2885  0005B8  B4D8               	btfsc	status,2,c
  2886  0005BA  D00C               	goto	l405
  2887  0005BC  D008               	goto	l5807
  2888  0005BE                     l5803:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2892  0005BE  C094  FFD9         	movff	sprintf@sp,fsr2l
  2893  0005C2  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  2894  0005C6  0E20               	movlw	32
  2895  0005C8  6EDF               	movwf	indf2,c
  2896                           
  2897                           ; BSR set to: 0
  2898  0005CA  4B94               	infsnz	sprintf@sp& (0+255),f,b
  2899  0005CC  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  2900  0005CE                     l5807:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 1182: width--;
  2904  0005CE  07B8               	decf	sprintf@width& (0+255),f,b
  2905  0005D0  A0D8               	btfss	status,0,c
  2906  0005D2  07B9               	decf	(sprintf@width+1)& (0+255),f,b
  2907  0005D4                     l405:
  2908                           
  2909                           ; BSR set to: 0
  2910                           
  2911                           ; BSR set to: 0
  2912  0005D4  BFB9               	btfsc	(sprintf@width+1)& (0+255),7,b
  2913  0005D6  D005               	goto	u6670
  2914  0005D8  51B9               	movf	(sprintf@width+1)& (0+255),w,b
  2915  0005DA  E1F1               	bnz	l5803
  2916  0005DC  05B8               	decf	sprintf@width& (0+255),w,b
  2917  0005DE  B0D8               	btfsc	status,0,c
  2918  0005E0  D7EE               	goto	l406
  2919  0005E2                     u6670:
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;doprnt.c: 1183: }
  2923                           ;doprnt.c: 1188: if(flag & 0x03)
  2924                           
  2925                           ; BSR set to: 0
  2926  0005E2  0E03               	movlw	3
  2927  0005E4  15AC               	andwf	sprintf@flag& (0+255),w,b
  2928  0005E6  6F9E               	movwf	??_sprintf& (0+255),b
  2929  0005E8  0E00               	movlw	0
  2930  0005EA  15AD               	andwf	(sprintf@flag+1)& (0+255),w,b
  2931  0005EC  6F9F               	movwf	(??_sprintf+1)& (0+255),b
  2932  0005EE  519E               	movf	??_sprintf& (0+255),w,b
  2933  0005F0  119F               	iorwf	(??_sprintf+1)& (0+255),w,b
  2934  0005F2  B4D8               	btfsc	status,2,c
  2935  0005F4  D050               	goto	l409
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2939  0005F6  C094  FFD9         	movff	sprintf@sp,fsr2l
  2940  0005FA  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  2941  0005FE  0E2D               	movlw	45
  2942  000600  D047               	goto	L2
  2943  000602                     
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 1200: {
  2946                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2947                           
  2948                           ; BSR set to: 0
  2949  000602  C0B2  F01B         	movff	sprintf@val,___lldiv@dividend
  2950  000606  C0B3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  2951  00060A  C0B4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  2952  00060E  C0B5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  2953  000612  51C0               	movf	sprintf@c& (0+255),w,b
  2954  000614  0D04               	mullw	4
  2955  000616  0E63               	movlw	low _dpowers
  2956  000618  24F3               	addwf	prodl,w,c
  2957  00061A  6EF6               	movwf	tblptrl,c
  2958  00061C  0EFF               	movlw	high _dpowers
  2959  00061E  20F4               	addwfc	prodh,w,c
  2960  000620  6EF7               	movwf	tblptrh,c
  2961  000622                     	if	0	;There are less than 3 active tblptr bytes
  2962  000622                     	endif
  2963  000622  0009               	tblrd		*+
  2964  000624  CFF5 F01F          	movff	tablat,___lldiv@divisor
  2965  000628  0009               	tblrd		*+
  2966  00062A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  2967  00062E  0009               	tblrd		*+
  2968  000630  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  2969  000634  000A               	tblrd		*-
  2970  000636  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  2971  00063A  EC35  F014         	call	___lldiv	;wreg free
  2972  00063E  C01B  F0AE         	movff	?___lldiv,sprintf@tmpval
  2973  000642  C01C  F0AF         	movff	?___lldiv+1,sprintf@tmpval+1
  2974  000646  C01D  F0B0         	movff	?___lldiv+2,sprintf@tmpval+2
  2975  00064A  C01E  F0B1         	movff	?___lldiv+3,sprintf@tmpval+3
  2976                           
  2977                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2978  00064E  C0AE  F028         	movff	sprintf@tmpval,___llmod@dividend
  2979  000652  C0AF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2980  000656  C0B0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2981  00065A  C0B1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2982  00065E  0E0A               	movlw	10
  2983  000660  6E2C               	movwf	___llmod@divisor,c
  2984  000662  0E00               	movlw	0
  2985  000664  6E2D               	movwf	___llmod@divisor+1,c
  2986  000666  0E00               	movlw	0
  2987  000668  6E2E               	movwf	___llmod@divisor+2,c
  2988  00066A  0E00               	movlw	0
  2989  00066C  6E2F               	movwf	___llmod@divisor+3,c
  2990  00066E  ECE6  F014         	call	___llmod	;wreg free
  2991  000672  C028  F0AE         	movff	?___llmod,sprintf@tmpval
  2992  000676  C029  F0AF         	movff	?___llmod+1,sprintf@tmpval+1
  2993  00067A  C02A  F0B0         	movff	?___llmod+2,sprintf@tmpval+2
  2994  00067E  C02B  F0B1         	movff	?___llmod+3,sprintf@tmpval+3
  2995                           
  2996                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2997  000682  0100               	movlb	0	; () banked
  2998  000684  51AE               	movf	sprintf@tmpval& (0+255),w,b
  2999  000686  0F30               	addlw	48
  3000  000688  C094  FFD9         	movff	sprintf@sp,fsr2l
  3001  00068C  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3002  000690                     L2:
  3003  000690  6EDF               	movwf	indf2,c
  3004                           
  3005                           ; BSR set to: 0
  3006  000692  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3007  000694  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3008  000696                     l409:
  3009                           
  3010                           ; BSR set to: 0
  3011                           
  3012                           ; BSR set to: 0
  3013  000696  07C0               	decf	sprintf@c& (0+255),f,b
  3014  000698  29C0               	incf	sprintf@c& (0+255),w,b
  3015  00069A  B4D8               	btfsc	status,2,c
  3016  00069C  D00C               	goto	l412
  3017  00069E  D7B1               	goto	l410
  3018  0006A0                     l5827:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3022  0006A0  C094  FFD9         	movff	sprintf@sp,fsr2l
  3023  0006A4  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3024  0006A8  0E30               	movlw	48
  3025  0006AA  6EDF               	movwf	indf2,c
  3026                           
  3027                           ; BSR set to: 0
  3028  0006AC  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3029  0006AE  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1209: exp--;
  3033  0006B0  07B6               	decf	sprintf@exp& (0+255),f,b
  3034  0006B2  A0D8               	btfss	status,0,c
  3035  0006B4  07B7               	decf	(sprintf@exp+1)& (0+255),f,b
  3036  0006B6                     l412:
  3037                           
  3038                           ; BSR set to: 0
  3039                           
  3040                           ; BSR set to: 0
  3041  0006B6  BFB7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3042  0006B8  D005               	goto	u6700
  3043  0006BA  51B7               	movf	(sprintf@exp+1)& (0+255),w,b
  3044  0006BC  E1F1               	bnz	l5827
  3045  0006BE  05B6               	decf	sprintf@exp& (0+255),w,b
  3046  0006C0  B0D8               	btfsc	status,0,c
  3047  0006C2  D7EE               	goto	l413
  3048  0006C4                     u6700:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;doprnt.c: 1210: }
  3052                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3053                           
  3054                           ; BSR set to: 0
  3055  0006C4  BFBF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3056  0006C6  D009               	goto	l415
  3057  0006C8  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  3058  0006CA  E104               	bnz	u6710
  3059  0006CC  0E09               	movlw	9
  3060  0006CE  5DBE               	subwf	sprintf@prec& (0+255),w,b
  3061  0006D0  A0D8               	btfss	status,0,c
  3062  0006D2  D003               	goto	l415
  3063  0006D4                     u6710:
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3067  0006D4  0E08               	movlw	8
  3068  0006D6  6FC0               	movwf	sprintf@c& (0+255),b
  3069  0006D8  D002               	goto	l416
  3070  0006DA                     l415:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;doprnt.c: 1213: else
  3074                           ;doprnt.c: 1214: c = prec;
  3075  0006DA  C0BE  F0C0         	movff	sprintf@prec,sprintf@c
  3076  0006DE                     l416:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;doprnt.c: 1215: prec -= c;
  3080                           
  3081                           ; BSR set to: 0
  3082  0006DE  51C0               	movf	sprintf@c& (0+255),w,b
  3083  0006E0  5FBE               	subwf	sprintf@prec& (0+255),f,b
  3084  0006E2  0E00               	movlw	0
  3085  0006E4  BFC0               	btfsc	sprintf@c& (0+255),7,b
  3086  0006E6  0EFF               	movlw	255
  3087  0006E8  5BBF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;doprnt.c: 1219: if(c)
  3091  0006EA  51C0               	movf	sprintf@c& (0+255),w,b
  3092  0006EC  B4D8               	btfsc	status,2,c
  3093  0006EE  D008               	goto	l417
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3097  0006F0  C094  FFD9         	movff	sprintf@sp,fsr2l
  3098  0006F4  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3099  0006F8  0E2E               	movlw	46
  3100  0006FA  6EDF               	movwf	indf2,c
  3101                           
  3102                           ; BSR set to: 0
  3103  0006FC  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3104  0006FE  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3105  000700                     l417:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3109                           
  3110                           ; BSR set to: 0
  3111  000700  51C0               	movf	sprintf@c& (0+255),w,b
  3112  000702  ECF9  F007         	call	_scale
  3113  000706  C042  F0A2         	movff	?_scale,_sprintf$1919
  3114  00070A  C043  F0A3         	movff	?_scale+1,_sprintf$1919+1
  3115  00070E  C044  F0A4         	movff	?_scale+2,_sprintf$1919+2
  3116  000712  C045  F0A5         	movff	?_scale+3,_sprintf$1919+3
  3117                           
  3118                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3119  000716  C0BA  F02D         	movff	sprintf@fval,___flmul@a
  3120  00071A  C0BB  F02E         	movff	sprintf@fval+1,___flmul@a+1
  3121  00071E  C0BC  F02F         	movff	sprintf@fval+2,___flmul@a+2
  3122  000722  C0BD  F030         	movff	sprintf@fval+3,___flmul@a+3
  3123  000726  C0A2  F029         	movff	_sprintf$1919,___flmul@b
  3124  00072A  C0A3  F02A         	movff	_sprintf$1919+1,___flmul@b+1
  3125  00072E  C0A4  F02B         	movff	_sprintf$1919+2,___flmul@b+2
  3126  000732  C0A5  F02C         	movff	_sprintf$1919+3,___flmul@b+3
  3127  000736  EC15  F00A         	call	___flmul	;wreg free
  3128  00073A  C029  F088         	movff	?___flmul,___fltol@f1
  3129  00073E  C02A  F089         	movff	?___flmul+1,___fltol@f1+1
  3130  000742  C02B  F08A         	movff	?___flmul+2,___fltol@f1+2
  3131  000746  C02C  F08B         	movff	?___flmul+3,___fltol@f1+3
  3132  00074A  ECE4  F012         	call	___fltol	;wreg free
  3133  00074E  C088  F0B2         	movff	?___fltol,sprintf@val
  3134  000752  C089  F0B3         	movff	?___fltol+1,sprintf@val+1
  3135  000756  C08A  F0B4         	movff	?___fltol+2,sprintf@val+2
  3136  00075A  C08B  F0B5         	movff	?___fltol+3,sprintf@val+3
  3137                           
  3138                           ;doprnt.c: 1228: while(c--) {
  3139  00075E  D071               	goto	l418
  3140  000760                     
  3141                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3142  000760  C0B2  F01B         	movff	sprintf@val,___lldiv@dividend
  3143  000764  C0B3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  3144  000768  C0B4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  3145  00076C  C0B5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  3146  000770  0100               	movlb	0	; () banked
  3147  000772  51C0               	movf	sprintf@c& (0+255),w,b
  3148  000774  0D04               	mullw	4
  3149  000776  0E63               	movlw	low _dpowers
  3150  000778  24F3               	addwf	prodl,w,c
  3151  00077A  6EF6               	movwf	tblptrl,c
  3152  00077C  0EFF               	movlw	high _dpowers
  3153  00077E  20F4               	addwfc	prodh,w,c
  3154  000780  6EF7               	movwf	tblptrh,c
  3155  000782                     	if	0	;There are less than 3 active tblptr bytes
  3156  000782                     	endif
  3157  000782  0009               	tblrd		*+
  3158  000784  CFF5 F01F          	movff	tablat,___lldiv@divisor
  3159  000788  0009               	tblrd		*+
  3160  00078A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  3161  00078E  0009               	tblrd		*+
  3162  000790  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  3163  000794  000A               	tblrd		*-
  3164  000796  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  3165  00079A  EC35  F014         	call	___lldiv	;wreg free
  3166  00079E  C01B  F0AE         	movff	?___lldiv,sprintf@tmpval
  3167  0007A2  C01C  F0AF         	movff	?___lldiv+1,sprintf@tmpval+1
  3168  0007A6  C01D  F0B0         	movff	?___lldiv+2,sprintf@tmpval+2
  3169  0007AA  C01E  F0B1         	movff	?___lldiv+3,sprintf@tmpval+3
  3170                           
  3171                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3172  0007AE  C0AE  F028         	movff	sprintf@tmpval,___llmod@dividend
  3173  0007B2  C0AF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3174  0007B6  C0B0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3175  0007BA  C0B1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3176  0007BE  0E0A               	movlw	10
  3177  0007C0  6E2C               	movwf	___llmod@divisor,c
  3178  0007C2  0E00               	movlw	0
  3179  0007C4  6E2D               	movwf	___llmod@divisor+1,c
  3180  0007C6  0E00               	movlw	0
  3181  0007C8  6E2E               	movwf	___llmod@divisor+2,c
  3182  0007CA  0E00               	movlw	0
  3183  0007CC  6E2F               	movwf	___llmod@divisor+3,c
  3184  0007CE  ECE6  F014         	call	___llmod	;wreg free
  3185  0007D2  C028  F0AE         	movff	?___llmod,sprintf@tmpval
  3186  0007D6  C029  F0AF         	movff	?___llmod+1,sprintf@tmpval+1
  3187  0007DA  C02A  F0B0         	movff	?___llmod+2,sprintf@tmpval+2
  3188  0007DE  C02B  F0B1         	movff	?___llmod+3,sprintf@tmpval+3
  3189                           
  3190                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3191  0007E2  0100               	movlb	0	; () banked
  3192  0007E4  51AE               	movf	sprintf@tmpval& (0+255),w,b
  3193  0007E6  0F30               	addlw	48
  3194  0007E8  C094  FFD9         	movff	sprintf@sp,fsr2l
  3195  0007EC  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3196  0007F0  6EDF               	movwf	indf2,c
  3197                           
  3198                           ; BSR set to: 0
  3199  0007F2  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3200  0007F4  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 1232: val %= dpowers[c];
  3204  0007F6  C0B2  F028         	movff	sprintf@val,___llmod@dividend
  3205  0007FA  C0B3  F029         	movff	sprintf@val+1,___llmod@dividend+1
  3206  0007FE  C0B4  F02A         	movff	sprintf@val+2,___llmod@dividend+2
  3207  000802  C0B5  F02B         	movff	sprintf@val+3,___llmod@dividend+3
  3208  000806  51C0               	movf	sprintf@c& (0+255),w,b
  3209  000808  0D04               	mullw	4
  3210  00080A  0E63               	movlw	low _dpowers
  3211  00080C  24F3               	addwf	prodl,w,c
  3212  00080E  6EF6               	movwf	tblptrl,c
  3213  000810  0EFF               	movlw	high _dpowers
  3214  000812  20F4               	addwfc	prodh,w,c
  3215  000814  6EF7               	movwf	tblptrh,c
  3216  000816                     	if	0	;There are less than 3 active tblptr bytes
  3217  000816                     	endif
  3218  000816  0009               	tblrd		*+
  3219  000818  CFF5 F02C          	movff	tablat,___llmod@divisor
  3220  00081C  0009               	tblrd		*+
  3221  00081E  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  3222  000822  0009               	tblrd		*+
  3223  000824  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  3224  000828  000A               	tblrd		*-
  3225  00082A  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  3226  00082E  ECE6  F014         	call	___llmod	;wreg free
  3227  000832  C028  F0B2         	movff	?___llmod,sprintf@val
  3228  000836  C029  F0B3         	movff	?___llmod+1,sprintf@val+1
  3229  00083A  C02A  F0B4         	movff	?___llmod+2,sprintf@val+2
  3230  00083E  C02B  F0B5         	movff	?___llmod+3,sprintf@val+3
  3231  000842                     l418:
  3232  000842  0100               	movlb	0	; () banked
  3233  000844  07C0               	decf	sprintf@c& (0+255),f,b
  3234  000846  29C0               	incf	sprintf@c& (0+255),w,b
  3235  000848  B4D8               	btfsc	status,2,c
  3236  00084A  D00C               	goto	l421
  3237  00084C  D789               	goto	l419
  3238  00084E                     
  3239                           ; BSR set to: 0
  3240                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3241                           
  3242                           ; BSR set to: 0
  3243  00084E  C094  FFD9         	movff	sprintf@sp,fsr2l
  3244  000852  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3245  000856  0E30               	movlw	48
  3246  000858  6EDF               	movwf	indf2,c
  3247                           
  3248                           ; BSR set to: 0
  3249  00085A  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3250  00085C  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;doprnt.c: 1237: prec--;
  3254  00085E  07BE               	decf	sprintf@prec& (0+255),f,b
  3255  000860  A0D8               	btfss	status,0,c
  3256  000862  07BF               	decf	(sprintf@prec+1)& (0+255),f,b
  3257  000864                     l421:
  3258                           
  3259                           ; BSR set to: 0
  3260                           
  3261                           ; BSR set to: 0
  3262  000864  51BE               	movf	sprintf@prec& (0+255),w,b
  3263  000866  11BF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3264  000868  B4D8               	btfsc	status,2,c
  3265  00086A  D112               	goto	u6910
  3266  00086C  D7F0               	goto	l422
  3267  00086E                     l381:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;doprnt.c: 1246: }
  3271                           ;doprnt.c: 1253: {
  3272                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3273                           
  3274                           ; BSR set to: 0
  3275  00086E  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  3276  000872  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  3277  000876  CFDE F0B2          	movff	postinc2,sprintf@val
  3278  00087A  CFDD F0B3          	movff	postdec2,sprintf@val+1
  3279  00087E  0E00               	movlw	0
  3280  000880  BFB3               	btfsc	(sprintf@val+1)& (0+255),7,b
  3281  000882  0EFF               	movlw	-1
  3282  000884  6FB4               	movwf	(sprintf@val+2)& (0+255),b
  3283  000886  6FB5               	movwf	(sprintf@val+3)& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286  000888  0E02               	movlw	2
  3287  00088A  27A8               	addwf	sprintf@ap& (0+255),f,b
  3288  00088C  0E00               	movlw	0
  3289  00088E  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;doprnt.c: 1261: if((long)val < 0) {
  3293  000890  AFB5               	btfss	(sprintf@val+3)& (0+255),7,b
  3294  000892  D00A               	goto	l424
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;doprnt.c: 1262: flag |= 0x03;
  3298  000894  0E03               	movlw	3
  3299  000896  13AC               	iorwf	sprintf@flag& (0+255),f,b
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;doprnt.c: 1263: val = -val;
  3303  000898  1FB5               	comf	(sprintf@val+3)& (0+255),f,b
  3304  00089A  1FB4               	comf	(sprintf@val+2)& (0+255),f,b
  3305  00089C  1FB3               	comf	(sprintf@val+1)& (0+255),f,b
  3306  00089E  6DB2               	negf	sprintf@val& (0+255),b
  3307  0008A0  0E00               	movlw	0
  3308  0008A2  23B3               	addwfc	(sprintf@val+1)& (0+255),f,b
  3309  0008A4  23B4               	addwfc	(sprintf@val+2)& (0+255),f,b
  3310  0008A6  23B5               	addwfc	(sprintf@val+3)& (0+255),f,b
  3311  0008A8                     l424:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;doprnt.c: 1264: }
  3315                           ;doprnt.c: 1266: }
  3316                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3317                           
  3318                           ; BSR set to: 0
  3319  0008A8  51BE               	movf	sprintf@prec& (0+255),w,b
  3320  0008AA  11BF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3321  0008AC  A4D8               	btfss	status,2,c
  3322  0008AE  D008               	goto	l425
  3323                           
  3324                           ; BSR set to: 0
  3325  0008B0  51B2               	movf	sprintf@val& (0+255),w,b
  3326  0008B2  11B3               	iorwf	(sprintf@val+1)& (0+255),w,b
  3327  0008B4  11B4               	iorwf	(sprintf@val+2)& (0+255),w,b
  3328  0008B6  11B5               	iorwf	(sprintf@val+3)& (0+255),w,b
  3329  0008B8  A4D8               	btfss	status,2,c
  3330  0008BA  D002               	goto	l425
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 1291: prec++;
  3334  0008BC  4BBE               	infsnz	sprintf@prec& (0+255),f,b
  3335  0008BE  2BBF               	incf	(sprintf@prec+1)& (0+255),f,b
  3336  0008C0                     l425:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3340                           
  3341                           ; BSR set to: 0
  3342  0008C0  0E01               	movlw	1
  3343  0008C2  6FC0               	movwf	sprintf@c& (0+255),b
  3344  0008C4                     l5889:
  3345                           
  3346                           ; BSR set to: 0
  3347  0008C4  0E0A               	movlw	10
  3348  0008C6  19C0               	xorwf	sprintf@c& (0+255),w,b
  3349  0008C8  B4D8               	btfsc	status,2,c
  3350  0008CA  D018               	goto	u6800
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;doprnt.c: 1306: if(val < dpowers[c])
  3354                           
  3355                           ; BSR set to: 0
  3356                           
  3357                           ; BSR set to: 0
  3358  0008CC  51C0               	movf	sprintf@c& (0+255),w,b
  3359  0008CE  0D04               	mullw	4
  3360  0008D0  0E63               	movlw	low _dpowers
  3361  0008D2  24F3               	addwf	prodl,w,c
  3362  0008D4  6EF6               	movwf	tblptrl,c
  3363  0008D6  0EFF               	movlw	high _dpowers
  3364  0008D8  20F4               	addwfc	prodh,w,c
  3365  0008DA  6EF7               	movwf	tblptrh,c
  3366  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  3367  0008DC                     	endif
  3368  0008DC  0009               	tblrd		*+
  3369  0008DE  50F5               	movf	tablat,w,c
  3370  0008E0  5DB2               	subwf	sprintf@val& (0+255),w,b
  3371  0008E2  0009               	tblrd		*+
  3372  0008E4  50F5               	movf	tablat,w,c
  3373  0008E6  59B3               	subwfb	(sprintf@val+1)& (0+255),w,b
  3374  0008E8  0009               	tblrd		*+
  3375  0008EA  50F5               	movf	tablat,w,c
  3376  0008EC  59B4               	subwfb	(sprintf@val+2)& (0+255),w,b
  3377  0008EE  0009               	tblrd		*+
  3378  0008F0  50F5               	movf	tablat,w,c
  3379  0008F2  59B5               	subwfb	(sprintf@val+3)& (0+255),w,b
  3380  0008F4  A0D8               	btfss	status,0,c
  3381  0008F6  D002               	goto	u6800
  3382                           
  3383                           ; BSR set to: 0
  3384                           
  3385                           ; BSR set to: 0
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 1307: break;
  3389  0008F8  2BC0               	incf	sprintf@c& (0+255),f,b
  3390  0008FA  D7E4               	goto	l5889
  3391  0008FC                     u6800:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;doprnt.c: 1339: if(c < prec)
  3395                           
  3396                           ; BSR set to: 0
  3397  0008FC  0E80               	movlw	128
  3398  0008FE  BFC0               	btfsc	sprintf@c& (0+255),7,b
  3399  000900  0E7F               	movlw	127
  3400  000902  6F9E               	movwf	??_sprintf& (0+255),b
  3401  000904  51BE               	movf	sprintf@prec& (0+255),w,b
  3402  000906  5DC0               	subwf	sprintf@c& (0+255),w,b
  3403  000908  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  3404  00090A  0A80               	xorlw	128
  3405  00090C  599E               	subwfb	??_sprintf& (0+255),w,b
  3406  00090E  B0D8               	btfsc	status,0,c
  3407  000910  D003               	goto	l429
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;doprnt.c: 1340: c = prec;
  3411  000912  C0BE  F0C0         	movff	sprintf@prec,sprintf@c
  3412  000916  D010               	goto	l431
  3413  000918                     l429:
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;doprnt.c: 1341: else if(prec < c)
  3417                           
  3418                           ; BSR set to: 0
  3419  000918  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  3420  00091A  0A80               	xorlw	128
  3421  00091C  6F9E               	movwf	??_sprintf& (0+255),b
  3422  00091E  51C0               	movf	sprintf@c& (0+255),w,b
  3423  000920  5DBE               	subwf	sprintf@prec& (0+255),w,b
  3424  000922  0E80               	movlw	128
  3425  000924  BFC0               	btfsc	sprintf@c& (0+255),7,b
  3426  000926  0E7F               	movlw	127
  3427  000928  599E               	subwfb	??_sprintf& (0+255),w,b
  3428  00092A  B0D8               	btfsc	status,0,c
  3429  00092C  D005               	goto	l431
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;doprnt.c: 1342: prec = c;
  3433  00092E  51C0               	movf	sprintf@c& (0+255),w,b
  3434  000930  6FBE               	movwf	sprintf@prec& (0+255),b
  3435  000932  6BBF               	clrf	(sprintf@prec+1)& (0+255),b
  3436  000934  BFBE               	btfsc	sprintf@prec& (0+255),7,b
  3437  000936  07BF               	decf	(sprintf@prec+1)& (0+255),f,b
  3438  000938                     l431:
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446  000938  51B8               	movf	sprintf@width& (0+255),w,b
  3447  00093A  11B9               	iorwf	(sprintf@width+1)& (0+255),w,b
  3448  00093C  B4D8               	btfsc	status,2,c
  3449  00093E  D00D               	goto	l432
  3450                           
  3451                           ; BSR set to: 0
  3452  000940  0E03               	movlw	3
  3453  000942  15AC               	andwf	sprintf@flag& (0+255),w,b
  3454  000944  6F9E               	movwf	??_sprintf& (0+255),b
  3455  000946  0E00               	movlw	0
  3456  000948  15AD               	andwf	(sprintf@flag+1)& (0+255),w,b
  3457  00094A  6F9F               	movwf	(??_sprintf+1)& (0+255),b
  3458  00094C  519E               	movf	??_sprintf& (0+255),w,b
  3459  00094E  119F               	iorwf	(??_sprintf+1)& (0+255),w,b
  3460  000950  B4D8               	btfsc	status,2,c
  3461  000952  D003               	goto	l432
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;doprnt.c: 1346: width--;
  3465  000954  07B8               	decf	sprintf@width& (0+255),f,b
  3466  000956  A0D8               	btfss	status,0,c
  3467  000958  07B9               	decf	(sprintf@width+1)& (0+255),f,b
  3468  00095A                     l432:
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3472                           
  3473                           ; BSR set to: 0
  3474  00095A  ADAD               	btfss	(sprintf@flag+1)& (0+255),6,b
  3475  00095C  D013               	goto	l435
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;doprnt.c: 1349: if(width > prec)
  3479  00095E  51B8               	movf	sprintf@width& (0+255),w,b
  3480  000960  5DBE               	subwf	sprintf@prec& (0+255),w,b
  3481  000962  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  3482  000964  0A80               	xorlw	128
  3483  000966  6F9E               	movwf	??_sprintf& (0+255),b
  3484  000968  51B9               	movf	(sprintf@width+1)& (0+255),w,b
  3485  00096A  0A80               	xorlw	128
  3486  00096C  599E               	subwfb	??_sprintf& (0+255),w,b
  3487  00096E  B0D8               	btfsc	status,0,c
  3488  000970  D005               	goto	l434
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;doprnt.c: 1350: width -= prec;
  3492  000972  51BE               	movf	sprintf@prec& (0+255),w,b
  3493  000974  5FB8               	subwf	sprintf@width& (0+255),f,b
  3494  000976  51BF               	movf	(sprintf@prec+1)& (0+255),w,b
  3495  000978  5BB9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3496  00097A  D004               	goto	l435
  3497  00097C                     l434:
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;doprnt.c: 1351: else
  3501                           ;doprnt.c: 1352: width = 0;
  3502                           
  3503                           ; BSR set to: 0
  3504  00097C  0E00               	movlw	0
  3505  00097E  6FB9               	movwf	(sprintf@width+1)& (0+255),b
  3506  000980  0E00               	movlw	0
  3507  000982  6FB8               	movwf	sprintf@width& (0+255),b
  3508  000984                     l435:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;doprnt.c: 1353: }
  3512                           ;doprnt.c: 1381: if(width > c)
  3513                           
  3514                           ; BSR set to: 0
  3515                           
  3516                           ; BSR set to: 0
  3517  000984  0E80               	movlw	128
  3518  000986  BFC0               	btfsc	sprintf@c& (0+255),7,b
  3519  000988  0E7F               	movlw	127
  3520  00098A  6F9E               	movwf	??_sprintf& (0+255),b
  3521  00098C  51B8               	movf	sprintf@width& (0+255),w,b
  3522  00098E  5DC0               	subwf	sprintf@c& (0+255),w,b
  3523  000990  51B9               	movf	(sprintf@width+1)& (0+255),w,b
  3524  000992  0A80               	xorlw	128
  3525  000994  599E               	subwfb	??_sprintf& (0+255),w,b
  3526  000996  B0D8               	btfsc	status,0,c
  3527  000998  D007               	goto	l436
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 1382: width -= c;
  3531  00099A  51C0               	movf	sprintf@c& (0+255),w,b
  3532  00099C  5FB8               	subwf	sprintf@width& (0+255),f,b
  3533  00099E  0E00               	movlw	0
  3534  0009A0  BFC0               	btfsc	sprintf@c& (0+255),7,b
  3535  0009A2  0EFF               	movlw	255
  3536  0009A4  5BB9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3537  0009A6  D004               	goto	l437
  3538  0009A8                     l436:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1383: else
  3542                           ;doprnt.c: 1384: width = 0;
  3543                           
  3544                           ; BSR set to: 0
  3545  0009A8  0E00               	movlw	0
  3546  0009AA  6FB9               	movwf	(sprintf@width+1)& (0+255),b
  3547  0009AC  0E00               	movlw	0
  3548  0009AE  6FB8               	movwf	sprintf@width& (0+255),b
  3549  0009B0                     l437:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;doprnt.c: 1422: {
  3553                           ;doprnt.c: 1424: if(width
  3554                           ;doprnt.c: 1428: )
  3555                           
  3556                           ; BSR set to: 0
  3557  0009B0  51B8               	movf	sprintf@width& (0+255),w,b
  3558  0009B2  11B9               	iorwf	(sprintf@width+1)& (0+255),w,b
  3559  0009B4  B4D8               	btfsc	status,2,c
  3560  0009B6  D00F               	goto	u6890
  3561  0009B8                     u6880:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3565                           
  3566                           ; BSR set to: 0
  3567                           
  3568                           ;doprnt.c: 1429: do
  3569  0009B8  C094  FFD9         	movff	sprintf@sp,fsr2l
  3570  0009BC  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3571  0009C0  0E20               	movlw	32
  3572  0009C2  6EDF               	movwf	indf2,c
  3573                           
  3574                           ; BSR set to: 0
  3575  0009C4  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3576  0009C6  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;doprnt.c: 1431: while(--width);
  3580  0009C8  07B8               	decf	sprintf@width& (0+255),f,b
  3581  0009CA  A0D8               	btfss	status,0,c
  3582  0009CC  07B9               	decf	(sprintf@width+1)& (0+255),f,b
  3583  0009CE  51B8               	movf	sprintf@width& (0+255),w,b
  3584  0009D0  11B9               	iorwf	(sprintf@width+1)& (0+255),w,b
  3585  0009D2  A4D8               	btfss	status,2,c
  3586  0009D4  D7F1               	goto	u6880
  3587  0009D6                     u6890:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;doprnt.c: 1438: if(flag & 0x03)
  3591                           
  3592                           ; BSR set to: 0
  3593                           
  3594                           ; BSR set to: 0
  3595  0009D6  0E03               	movlw	3
  3596  0009D8  15AC               	andwf	sprintf@flag& (0+255),w,b
  3597  0009DA  6F9E               	movwf	??_sprintf& (0+255),b
  3598  0009DC  0E00               	movlw	0
  3599  0009DE  15AD               	andwf	(sprintf@flag+1)& (0+255),w,b
  3600  0009E0  6F9F               	movwf	(??_sprintf+1)& (0+255),b
  3601  0009E2  519E               	movf	??_sprintf& (0+255),w,b
  3602  0009E4  119F               	iorwf	(??_sprintf+1)& (0+255),w,b
  3603  0009E6  B4D8               	btfsc	status,2,c
  3604  0009E8  D04B               	goto	l442
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3608  0009EA  C094  FFD9         	movff	sprintf@sp,fsr2l
  3609  0009EE  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3610  0009F2  0E2D               	movlw	45
  3611  0009F4  6EDF               	movwf	indf2,c
  3612  0009F6  D042               	goto	l5947
  3613  0009F8                     l5943:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;doprnt.c: 1478: {
  3617                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3618  0009F8  C0BE  F09E         	movff	sprintf@prec,??_sprintf
  3619  0009FC  C0BF  F09F         	movff	sprintf@prec+1,??_sprintf+1
  3620  000A00  90D8               	bcf	status,0,c
  3621  000A02  379E               	rlcf	??_sprintf& (0+255),f,b
  3622  000A04  379F               	rlcf	(??_sprintf+1)& (0+255),f,b
  3623  000A06  90D8               	bcf	status,0,c
  3624  000A08  379E               	rlcf	??_sprintf& (0+255),f,b
  3625  000A0A  379F               	rlcf	(??_sprintf+1)& (0+255),f,b
  3626  000A0C  0E63               	movlw	low _dpowers
  3627  000A0E  259E               	addwf	??_sprintf& (0+255),w,b
  3628  000A10  6EF6               	movwf	tblptrl,c
  3629  000A12  0EFF               	movlw	high _dpowers
  3630  000A14  219F               	addwfc	(??_sprintf+1)& (0+255),w,b
  3631  000A16  6EF7               	movwf	tblptrh,c
  3632  000A18                     	if	0	;There are less than 3 active tblptr bytes
  3633  000A18                     	endif
  3634  000A18  0009               	tblrd		*+
  3635  000A1A  CFF5 F01F          	movff	tablat,___lldiv@divisor
  3636  000A1E  0009               	tblrd		*+
  3637  000A20  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  3638  000A24  0009               	tblrd		*+
  3639  000A26  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  3640  000A2A  000A               	tblrd		*-
  3641  000A2C  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  3642  000A30  C0B2  F01B         	movff	sprintf@val,___lldiv@dividend
  3643  000A34  C0B3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  3644  000A38  C0B4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  3645  000A3C  C0B5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  3646  000A40  EC35  F014         	call	___lldiv	;wreg free
  3647  000A44  C01B  F028         	movff	?___lldiv,___llmod@dividend
  3648  000A48  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  3649  000A4C  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  3650  000A50  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  3651  000A54  0E0A               	movlw	10
  3652  000A56  6E2C               	movwf	___llmod@divisor,c
  3653  000A58  0E00               	movlw	0
  3654  000A5A  6E2D               	movwf	___llmod@divisor+1,c
  3655  000A5C  0E00               	movlw	0
  3656  000A5E  6E2E               	movwf	___llmod@divisor+2,c
  3657  000A60  0E00               	movlw	0
  3658  000A62  6E2F               	movwf	___llmod@divisor+3,c
  3659  000A64  ECE6  F014         	call	___llmod	;wreg free
  3660  000A68  5028               	movf	?___llmod,w,c
  3661  000A6A  0F30               	addlw	48
  3662  000A6C  0100               	movlb	0	; () banked
  3663  000A6E  6FC0               	movwf	sprintf@c& (0+255),b
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;doprnt.c: 1523: }
  3667                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3668  000A70  C094  FFD9         	movff	sprintf@sp,fsr2l
  3669  000A74  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3670  000A78  C0C0  FFDF         	movff	sprintf@c,indf2
  3671  000A7C                     l5947:
  3672                           
  3673                           ; BSR set to: 0
  3674  000A7C  4B94               	infsnz	sprintf@sp& (0+255),f,b
  3675  000A7E  2B95               	incf	(sprintf@sp+1)& (0+255),f,b
  3676  000A80                     l442:
  3677                           
  3678                           ; BSR set to: 0
  3679                           
  3680                           ; BSR set to: 0
  3681  000A80  07BE               	decf	sprintf@prec& (0+255),f,b
  3682  000A82  A0D8               	btfss	status,0,c
  3683  000A84  07BF               	decf	(sprintf@prec+1)& (0+255),f,b
  3684  000A86  29BE               	incf	sprintf@prec& (0+255),w,b
  3685  000A88  E1B7               	bnz	l5943
  3686  000A8A  29BF               	incf	(sprintf@prec+1)& (0+255),w,b
  3687  000A8C  A4D8               	btfss	status,2,c
  3688  000A8E  D7B4               	goto	l443
  3689  000A90                     u6910:
  3690                           
  3691                           ; BSR set to: 0
  3692                           
  3693                           ; BSR set to: 0
  3694                           
  3695                           ; BSR set to: 0
  3696  000A90  C096  FFF6         	movff	sprintf@f,tblptrl
  3697  000A94  C097  FFF7         	movff	sprintf@f+1,tblptrh
  3698  000A98  4B96               	infsnz	sprintf@f& (0+255),f,b
  3699  000A9A  2B97               	incf	(sprintf@f+1)& (0+255),f,b
  3700  000A9C                     	if	0	;tblptru may be non-zero
  3701  000A9C                     	endif
  3702  000A9C                     	if	0	;tblptru may be non-zero
  3703  000A9C                     	endif
  3704  000A9C  0008               	tblrd		*
  3705  000A9E  CFF5 F0C0          	movff	tablat,sprintf@c
  3706  000AA2  51C0               	movf	sprintf@c& (0+255),w,b
  3707  000AA4  A4D8               	btfss	status,2,c
  3708  000AA6  EF10  F000         	goto	l353
  3709  000AAA                     u6920:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;doprnt.c: 1538: *sp = 0;
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ;doprnt.c: 1525: }
  3717                           ;doprnt.c: 1533: }
  3718                           ;doprnt.c: 1535: alldone:
  3719                           
  3720                           ; BSR set to: 0
  3721  000AAA  C094  FFD9         	movff	sprintf@sp,fsr2l
  3722  000AAE  C095  FFDA         	movff	sprintf@sp+1,fsr2h
  3723  000AB2  0E00               	movlw	0
  3724  000AB4  6EDF               	movwf	indf2,c
  3725  000AB6  0012               	return	
  3726  000AB8                     __end_of_sprintf:
  3727                           	opt stack 0
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           indf1	equ	0xFE7
  3737                           postdec1	equ	0xFE5
  3738                           fsr1h	equ	0xFE2
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _scale *****************
  3748 ;; Defined at:
  3749 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  scl             1    wreg     char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  scl             1   73[COMRAM] char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  4   65[COMRAM] char 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        9 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		___awdiv
  3772 ;;		___awmod
  3773 ;;		___flmul
  3774 ;; This function is called by:
  3775 ;;		_sprintf
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text2
  3780  000FF2                     __ptext2:
  3781                           	opt stack 0
  3782  000FF2                     _scale:
  3783                           	opt stack 26
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;incstack = 0
  3787                           ;scale@scl stored from wreg
  3788  000FF2  6E4A               	movwf	scale@scl,c
  3789                           
  3790                           ;doprnt.c: 428: if(scl < 0) {
  3791  000FF4  AE4A               	btfss	scale@scl,7,c
  3792  000FF6  D10D               	goto	l342
  3793                           
  3794                           ;doprnt.c: 429: scl = -scl;
  3795  000FF8  6C4A               	negf	scale@scl,c
  3796                           
  3797                           ;doprnt.c: 430: if(scl>=110)
  3798  000FFA  504A               	movf	scale@scl,w,c
  3799  000FFC  0A80               	xorlw	128
  3800  000FFE  0F12               	addlw	-238
  3801  001000  A0D8               	btfss	status,0,c
  3802  001002  D098               	goto	l343
  3803                           
  3804                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3805  001004  0E00               	movlw	0
  3806  001006  6E24               	movwf	___awdiv@divisor+1,c
  3807  001008  0E0A               	movlw	10
  3808  00100A  6E23               	movwf	___awdiv@divisor,c
  3809  00100C  0E00               	movlw	0
  3810  00100E  6E1E               	movwf	___awmod@divisor+1,c
  3811  001010  0E64               	movlw	100
  3812  001012  6E1D               	movwf	___awmod@divisor,c
  3813  001014  504A               	movf	scale@scl,w,c
  3814  001016  6E1B               	movwf	___awmod@dividend,c
  3815  001018  6A1C               	clrf	___awmod@dividend+1,c
  3816  00101A  BE1B               	btfsc	___awmod@dividend,7,c
  3817  00101C  061C               	decf	___awmod@dividend+1,f,c
  3818  00101E  EC76  F014         	call	___awmod	;wreg free
  3819  001022  C01B  F021         	movff	?___awmod,___awdiv@dividend
  3820  001026  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  3821  00102A  ECF3  F013         	call	___awdiv	;wreg free
  3822  00102E  90D8               	bcf	status,0,c
  3823  001030  3621               	rlcf	?___awdiv,f,c
  3824  001032  3622               	rlcf	?___awdiv+1,f,c
  3825  001034  90D8               	bcf	status,0,c
  3826  001036  3621               	rlcf	?___awdiv,f,c
  3827  001038  3622               	rlcf	?___awdiv+1,f,c
  3828  00103A  0E24               	movlw	36
  3829  00103C  2621               	addwf	?___awdiv,f,c
  3830  00103E  0E00               	movlw	0
  3831  001040  2222               	addwfc	?___awdiv+1,f,c
  3832  001042  0E2F               	movlw	low __npowers_
  3833  001044  2421               	addwf	?___awdiv,w,c
  3834  001046  6EF6               	movwf	tblptrl,c
  3835  001048  0EFF               	movlw	high __npowers_
  3836  00104A  2022               	addwfc	?___awdiv+1,w,c
  3837  00104C  6EF7               	movwf	tblptrh,c
  3838  00104E                     	if	0	;There are less than 3 active tblptr bytes
  3839  00104E                     	endif
  3840  00104E  0009               	tblrd		*+
  3841  001050  CFF5 F02D          	movff	tablat,___flmul@a
  3842  001054  0009               	tblrd		*+
  3843  001056  CFF5 F02E          	movff	tablat,___flmul@a+1
  3844  00105A  0009               	tblrd		*+
  3845  00105C  CFF5 F02F          	movff	tablat,___flmul@a+2
  3846  001060  000A               	tblrd		*-
  3847  001062  CFF5 F030          	movff	tablat,___flmul@a+3
  3848  001066  0E00               	movlw	0
  3849  001068  6E24               	movwf	___awdiv@divisor+1,c
  3850  00106A  0E64               	movlw	100
  3851  00106C  6E23               	movwf	___awdiv@divisor,c
  3852  00106E  504A               	movf	scale@scl,w,c
  3853  001070  6E21               	movwf	___awdiv@dividend,c
  3854  001072  6A22               	clrf	___awdiv@dividend+1,c
  3855  001074  BE21               	btfsc	___awdiv@dividend,7,c
  3856  001076  0622               	decf	___awdiv@dividend+1,f,c
  3857  001078  ECF3  F013         	call	___awdiv	;wreg free
  3858  00107C  90D8               	bcf	status,0,c
  3859  00107E  3621               	rlcf	?___awdiv,f,c
  3860  001080  3622               	rlcf	?___awdiv+1,f,c
  3861  001082  90D8               	bcf	status,0,c
  3862  001084  3621               	rlcf	?___awdiv,f,c
  3863  001086  3622               	rlcf	?___awdiv+1,f,c
  3864  001088  0E48               	movlw	72
  3865  00108A  2621               	addwf	?___awdiv,f,c
  3866  00108C  0E00               	movlw	0
  3867  00108E  2222               	addwfc	?___awdiv+1,f,c
  3868  001090  0E2F               	movlw	low __npowers_
  3869  001092  2421               	addwf	?___awdiv,w,c
  3870  001094  6EF6               	movwf	tblptrl,c
  3871  001096  0EFF               	movlw	high __npowers_
  3872  001098  2022               	addwfc	?___awdiv+1,w,c
  3873  00109A  6EF7               	movwf	tblptrh,c
  3874  00109C                     	if	0	;There are less than 3 active tblptr bytes
  3875  00109C                     	endif
  3876  00109C  0009               	tblrd		*+
  3877  00109E  CFF5 F029          	movff	tablat,___flmul@b
  3878  0010A2  0009               	tblrd		*+
  3879  0010A4  CFF5 F02A          	movff	tablat,___flmul@b+1
  3880  0010A8  0009               	tblrd		*+
  3881  0010AA  CFF5 F02B          	movff	tablat,___flmul@b+2
  3882  0010AE  000A               	tblrd		*-
  3883  0010B0  CFF5 F02C          	movff	tablat,___flmul@b+3
  3884  0010B4  EC15  F00A         	call	___flmul	;wreg free
  3885  0010B8  C029  F046         	movff	?___flmul,_scale$1918
  3886  0010BC  C02A  F047         	movff	?___flmul+1,_scale$1918+1
  3887  0010C0  C02B  F048         	movff	?___flmul+2,_scale$1918+2
  3888  0010C4  C02C  F049         	movff	?___flmul+3,_scale$1918+3
  3889                           
  3890                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3891  0010C8  C046  F029         	movff	_scale$1918,___flmul@b
  3892  0010CC  C047  F02A         	movff	_scale$1918+1,___flmul@b+1
  3893  0010D0  C048  F02B         	movff	_scale$1918+2,___flmul@b+2
  3894  0010D4  C049  F02C         	movff	_scale$1918+3,___flmul@b+3
  3895  0010D8  0E00               	movlw	0
  3896  0010DA  6E1E               	movwf	___awmod@divisor+1,c
  3897  0010DC  0E0A               	movlw	10
  3898  0010DE  6E1D               	movwf	___awmod@divisor,c
  3899  0010E0  504A               	movf	scale@scl,w,c
  3900  0010E2  6E1B               	movwf	___awmod@dividend,c
  3901  0010E4  6A1C               	clrf	___awmod@dividend+1,c
  3902  0010E6  BE1B               	btfsc	___awmod@dividend,7,c
  3903  0010E8  061C               	decf	___awmod@dividend+1,f,c
  3904  0010EA  EC76  F014         	call	___awmod	;wreg free
  3905  0010EE  90D8               	bcf	status,0,c
  3906  0010F0  361B               	rlcf	?___awmod,f,c
  3907  0010F2  361C               	rlcf	?___awmod+1,f,c
  3908  0010F4  90D8               	bcf	status,0,c
  3909  0010F6  361B               	rlcf	?___awmod,f,c
  3910  0010F8  361C               	rlcf	?___awmod+1,f,c
  3911  0010FA  0E2F               	movlw	low __npowers_
  3912  0010FC  241B               	addwf	?___awmod,w,c
  3913  0010FE  6EF6               	movwf	tblptrl,c
  3914  001100  0EFF               	movlw	high __npowers_
  3915  001102  201C               	addwfc	?___awmod+1,w,c
  3916  001104  6EF7               	movwf	tblptrh,c
  3917  001106                     	if	0	;There are less than 3 active tblptr bytes
  3918  001106                     	endif
  3919  001106  0009               	tblrd		*+
  3920  001108  CFF5 F02D          	movff	tablat,___flmul@a
  3921  00110C  0009               	tblrd		*+
  3922  00110E  CFF5 F02E          	movff	tablat,___flmul@a+1
  3923  001112  0009               	tblrd		*+
  3924  001114  CFF5 F02F          	movff	tablat,___flmul@a+2
  3925  001118  000A               	tblrd		*-
  3926  00111A  CFF5 F030          	movff	tablat,___flmul@a+3
  3927  00111E  EC15  F00A         	call	___flmul	;wreg free
  3928  001122  C029  F042         	movff	?___flmul,?_scale
  3929  001126  C02A  F043         	movff	?___flmul+1,?_scale+1
  3930  00112A  C02B  F044         	movff	?___flmul+2,?_scale+2
  3931  00112E  C02C  F045         	movff	?___flmul+3,?_scale+3
  3932  001132  0012               	return	
  3933  001134                     l343:
  3934                           
  3935                           ;doprnt.c: 432: else if(scl > 10)
  3936  001134  504A               	movf	scale@scl,w,c
  3937  001136  0A80               	xorlw	128
  3938  001138  0F75               	addlw	-139
  3939  00113A  A0D8               	btfss	status,0,c
  3940  00113C  D055               	goto	l346
  3941                           
  3942                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3943  00113E  0E00               	movlw	0
  3944  001140  6E24               	movwf	___awdiv@divisor+1,c
  3945  001142  0E0A               	movlw	10
  3946  001144  6E23               	movwf	___awdiv@divisor,c
  3947  001146  504A               	movf	scale@scl,w,c
  3948  001148  6E21               	movwf	___awdiv@dividend,c
  3949  00114A  6A22               	clrf	___awdiv@dividend+1,c
  3950  00114C  BE21               	btfsc	___awdiv@dividend,7,c
  3951  00114E  0622               	decf	___awdiv@dividend+1,f,c
  3952  001150  ECF3  F013         	call	___awdiv	;wreg free
  3953  001154  90D8               	bcf	status,0,c
  3954  001156  3621               	rlcf	?___awdiv,f,c
  3955  001158  3622               	rlcf	?___awdiv+1,f,c
  3956  00115A  90D8               	bcf	status,0,c
  3957  00115C  3621               	rlcf	?___awdiv,f,c
  3958  00115E  3622               	rlcf	?___awdiv+1,f,c
  3959  001160  0E24               	movlw	36
  3960  001162  2621               	addwf	?___awdiv,f,c
  3961  001164  0E00               	movlw	0
  3962  001166  2222               	addwfc	?___awdiv+1,f,c
  3963  001168  0E2F               	movlw	low __npowers_
  3964  00116A  2421               	addwf	?___awdiv,w,c
  3965  00116C  6EF6               	movwf	tblptrl,c
  3966  00116E  0EFF               	movlw	high __npowers_
  3967  001170  2022               	addwfc	?___awdiv+1,w,c
  3968  001172  6EF7               	movwf	tblptrh,c
  3969  001174                     	if	0	;There are less than 3 active tblptr bytes
  3970  001174                     	endif
  3971  001174  0009               	tblrd		*+
  3972  001176  CFF5 F029          	movff	tablat,___flmul@b
  3973  00117A  0009               	tblrd		*+
  3974  00117C  CFF5 F02A          	movff	tablat,___flmul@b+1
  3975  001180  0009               	tblrd		*+
  3976  001182  CFF5 F02B          	movff	tablat,___flmul@b+2
  3977  001186  000A               	tblrd		*-
  3978  001188  CFF5 F02C          	movff	tablat,___flmul@b+3
  3979  00118C  0E00               	movlw	0
  3980  00118E  6E1E               	movwf	___awmod@divisor+1,c
  3981  001190  0E0A               	movlw	10
  3982  001192  6E1D               	movwf	___awmod@divisor,c
  3983  001194  504A               	movf	scale@scl,w,c
  3984  001196  6E1B               	movwf	___awmod@dividend,c
  3985  001198  6A1C               	clrf	___awmod@dividend+1,c
  3986  00119A  BE1B               	btfsc	___awmod@dividend,7,c
  3987  00119C  061C               	decf	___awmod@dividend+1,f,c
  3988  00119E  EC76  F014         	call	___awmod	;wreg free
  3989  0011A2  90D8               	bcf	status,0,c
  3990  0011A4  361B               	rlcf	?___awmod,f,c
  3991  0011A6  361C               	rlcf	?___awmod+1,f,c
  3992  0011A8  90D8               	bcf	status,0,c
  3993  0011AA  361B               	rlcf	?___awmod,f,c
  3994  0011AC  361C               	rlcf	?___awmod+1,f,c
  3995  0011AE  0E2F               	movlw	low __npowers_
  3996  0011B0  241B               	addwf	?___awmod,w,c
  3997  0011B2  6EF6               	movwf	tblptrl,c
  3998  0011B4  0EFF               	movlw	high __npowers_
  3999  0011B6  201C               	addwfc	?___awmod+1,w,c
  4000  0011B8  6EF7               	movwf	tblptrh,c
  4001  0011BA                     	if	0	;There are less than 3 active tblptr bytes
  4002  0011BA                     	endif
  4003  0011BA  0009               	tblrd		*+
  4004  0011BC  CFF5 F02D          	movff	tablat,___flmul@a
  4005  0011C0  0009               	tblrd		*+
  4006  0011C2  CFF5 F02E          	movff	tablat,___flmul@a+1
  4007  0011C6  0009               	tblrd		*+
  4008  0011C8  CFF5 F02F          	movff	tablat,___flmul@a+2
  4009  0011CC  000A               	tblrd		*-
  4010  0011CE  CFF5 F030          	movff	tablat,___flmul@a+3
  4011  0011D2  EC15  F00A         	call	___flmul	;wreg free
  4012  0011D6  C029  F042         	movff	?___flmul,?_scale
  4013  0011DA  C02A  F043         	movff	?___flmul+1,?_scale+1
  4014  0011DE  C02B  F044         	movff	?___flmul+2,?_scale+2
  4015  0011E2  C02C  F045         	movff	?___flmul+3,?_scale+3
  4016  0011E6  0012               	return	
  4017  0011E8                     l346:
  4018                           
  4019                           ;doprnt.c: 434: return _npowers_[scl];
  4020  0011E8  504A               	movf	scale@scl,w,c
  4021  0011EA  0D04               	mullw	4
  4022  0011EC  0E2F               	movlw	low __npowers_
  4023  0011EE  24F3               	addwf	prodl,w,c
  4024  0011F0  6EF6               	movwf	tblptrl,c
  4025  0011F2  0EFF               	movlw	high __npowers_
  4026  0011F4  20F4               	addwfc	prodh,w,c
  4027  0011F6  6EF7               	movwf	tblptrh,c
  4028  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  4029  0011F8                     	endif
  4030  0011F8  0009               	tblrd		*+
  4031  0011FA  CFF5 F042          	movff	tablat,?_scale
  4032  0011FE  0009               	tblrd		*+
  4033  001200  CFF5 F043          	movff	tablat,?_scale+1
  4034  001204  0009               	tblrd		*+
  4035  001206  CFF5 F044          	movff	tablat,?_scale+2
  4036  00120A  000A               	tblrd		*-
  4037  00120C  CFF5 F045          	movff	tablat,?_scale+3
  4038  001210  0012               	return	
  4039  001212                     l342:
  4040                           
  4041                           ;doprnt.c: 435: }
  4042                           ;doprnt.c: 436: if(scl>=110)
  4043  001212  504A               	movf	scale@scl,w,c
  4044  001214  0A80               	xorlw	128
  4045  001216  0F12               	addlw	-238
  4046  001218  A0D8               	btfss	status,0,c
  4047  00121A  D098               	goto	l347
  4048                           
  4049                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4050  00121C  0E00               	movlw	0
  4051  00121E  6E24               	movwf	___awdiv@divisor+1,c
  4052  001220  0E0A               	movlw	10
  4053  001222  6E23               	movwf	___awdiv@divisor,c
  4054  001224  0E00               	movlw	0
  4055  001226  6E1E               	movwf	___awmod@divisor+1,c
  4056  001228  0E64               	movlw	100
  4057  00122A  6E1D               	movwf	___awmod@divisor,c
  4058  00122C  504A               	movf	scale@scl,w,c
  4059  00122E  6E1B               	movwf	___awmod@dividend,c
  4060  001230  6A1C               	clrf	___awmod@dividend+1,c
  4061  001232  BE1B               	btfsc	___awmod@dividend,7,c
  4062  001234  061C               	decf	___awmod@dividend+1,f,c
  4063  001236  EC76  F014         	call	___awmod	;wreg free
  4064  00123A  C01B  F021         	movff	?___awmod,___awdiv@dividend
  4065  00123E  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  4066  001242  ECF3  F013         	call	___awdiv	;wreg free
  4067  001246  90D8               	bcf	status,0,c
  4068  001248  3621               	rlcf	?___awdiv,f,c
  4069  00124A  3622               	rlcf	?___awdiv+1,f,c
  4070  00124C  90D8               	bcf	status,0,c
  4071  00124E  3621               	rlcf	?___awdiv,f,c
  4072  001250  3622               	rlcf	?___awdiv+1,f,c
  4073  001252  0E24               	movlw	36
  4074  001254  2621               	addwf	?___awdiv,f,c
  4075  001256  0E00               	movlw	0
  4076  001258  2222               	addwfc	?___awdiv+1,f,c
  4077  00125A  0EFB               	movlw	low __powers_
  4078  00125C  2421               	addwf	?___awdiv,w,c
  4079  00125E  6EF6               	movwf	tblptrl,c
  4080  001260  0EFE               	movlw	high __powers_
  4081  001262  2022               	addwfc	?___awdiv+1,w,c
  4082  001264  6EF7               	movwf	tblptrh,c
  4083  001266                     	if	0	;There are less than 3 active tblptr bytes
  4084  001266                     	endif
  4085  001266  0009               	tblrd		*+
  4086  001268  CFF5 F02D          	movff	tablat,___flmul@a
  4087  00126C  0009               	tblrd		*+
  4088  00126E  CFF5 F02E          	movff	tablat,___flmul@a+1
  4089  001272  0009               	tblrd		*+
  4090  001274  CFF5 F02F          	movff	tablat,___flmul@a+2
  4091  001278  000A               	tblrd		*-
  4092  00127A  CFF5 F030          	movff	tablat,___flmul@a+3
  4093  00127E  0E00               	movlw	0
  4094  001280  6E24               	movwf	___awdiv@divisor+1,c
  4095  001282  0E64               	movlw	100
  4096  001284  6E23               	movwf	___awdiv@divisor,c
  4097  001286  504A               	movf	scale@scl,w,c
  4098  001288  6E21               	movwf	___awdiv@dividend,c
  4099  00128A  6A22               	clrf	___awdiv@dividend+1,c
  4100  00128C  BE21               	btfsc	___awdiv@dividend,7,c
  4101  00128E  0622               	decf	___awdiv@dividend+1,f,c
  4102  001290  ECF3  F013         	call	___awdiv	;wreg free
  4103  001294  90D8               	bcf	status,0,c
  4104  001296  3621               	rlcf	?___awdiv,f,c
  4105  001298  3622               	rlcf	?___awdiv+1,f,c
  4106  00129A  90D8               	bcf	status,0,c
  4107  00129C  3621               	rlcf	?___awdiv,f,c
  4108  00129E  3622               	rlcf	?___awdiv+1,f,c
  4109  0012A0  0E48               	movlw	72
  4110  0012A2  2621               	addwf	?___awdiv,f,c
  4111  0012A4  0E00               	movlw	0
  4112  0012A6  2222               	addwfc	?___awdiv+1,f,c
  4113  0012A8  0EFB               	movlw	low __powers_
  4114  0012AA  2421               	addwf	?___awdiv,w,c
  4115  0012AC  6EF6               	movwf	tblptrl,c
  4116  0012AE  0EFE               	movlw	high __powers_
  4117  0012B0  2022               	addwfc	?___awdiv+1,w,c
  4118  0012B2  6EF7               	movwf	tblptrh,c
  4119  0012B4                     	if	0	;There are less than 3 active tblptr bytes
  4120  0012B4                     	endif
  4121  0012B4  0009               	tblrd		*+
  4122  0012B6  CFF5 F029          	movff	tablat,___flmul@b
  4123  0012BA  0009               	tblrd		*+
  4124  0012BC  CFF5 F02A          	movff	tablat,___flmul@b+1
  4125  0012C0  0009               	tblrd		*+
  4126  0012C2  CFF5 F02B          	movff	tablat,___flmul@b+2
  4127  0012C6  000A               	tblrd		*-
  4128  0012C8  CFF5 F02C          	movff	tablat,___flmul@b+3
  4129  0012CC  EC15  F00A         	call	___flmul	;wreg free
  4130  0012D0  C029  F046         	movff	?___flmul,_scale$1918
  4131  0012D4  C02A  F047         	movff	?___flmul+1,_scale$1918+1
  4132  0012D8  C02B  F048         	movff	?___flmul+2,_scale$1918+2
  4133  0012DC  C02C  F049         	movff	?___flmul+3,_scale$1918+3
  4134                           
  4135                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4136  0012E0  C046  F029         	movff	_scale$1918,___flmul@b
  4137  0012E4  C047  F02A         	movff	_scale$1918+1,___flmul@b+1
  4138  0012E8  C048  F02B         	movff	_scale$1918+2,___flmul@b+2
  4139  0012EC  C049  F02C         	movff	_scale$1918+3,___flmul@b+3
  4140  0012F0  0E00               	movlw	0
  4141  0012F2  6E1E               	movwf	___awmod@divisor+1,c
  4142  0012F4  0E0A               	movlw	10
  4143  0012F6  6E1D               	movwf	___awmod@divisor,c
  4144  0012F8  504A               	movf	scale@scl,w,c
  4145  0012FA  6E1B               	movwf	___awmod@dividend,c
  4146  0012FC  6A1C               	clrf	___awmod@dividend+1,c
  4147  0012FE  BE1B               	btfsc	___awmod@dividend,7,c
  4148  001300  061C               	decf	___awmod@dividend+1,f,c
  4149  001302  EC76  F014         	call	___awmod	;wreg free
  4150  001306  90D8               	bcf	status,0,c
  4151  001308  361B               	rlcf	?___awmod,f,c
  4152  00130A  361C               	rlcf	?___awmod+1,f,c
  4153  00130C  90D8               	bcf	status,0,c
  4154  00130E  361B               	rlcf	?___awmod,f,c
  4155  001310  361C               	rlcf	?___awmod+1,f,c
  4156  001312  0EFB               	movlw	low __powers_
  4157  001314  241B               	addwf	?___awmod,w,c
  4158  001316  6EF6               	movwf	tblptrl,c
  4159  001318  0EFE               	movlw	high __powers_
  4160  00131A  201C               	addwfc	?___awmod+1,w,c
  4161  00131C  6EF7               	movwf	tblptrh,c
  4162  00131E                     	if	0	;There are less than 3 active tblptr bytes
  4163  00131E                     	endif
  4164  00131E  0009               	tblrd		*+
  4165  001320  CFF5 F02D          	movff	tablat,___flmul@a
  4166  001324  0009               	tblrd		*+
  4167  001326  CFF5 F02E          	movff	tablat,___flmul@a+1
  4168  00132A  0009               	tblrd		*+
  4169  00132C  CFF5 F02F          	movff	tablat,___flmul@a+2
  4170  001330  000A               	tblrd		*-
  4171  001332  CFF5 F030          	movff	tablat,___flmul@a+3
  4172  001336  EC15  F00A         	call	___flmul	;wreg free
  4173  00133A  C029  F042         	movff	?___flmul,?_scale
  4174  00133E  C02A  F043         	movff	?___flmul+1,?_scale+1
  4175  001342  C02B  F044         	movff	?___flmul+2,?_scale+2
  4176  001346  C02C  F045         	movff	?___flmul+3,?_scale+3
  4177  00134A  0012               	return	
  4178  00134C                     l347:
  4179                           
  4180                           ;doprnt.c: 438: else if(scl > 10)
  4181  00134C  504A               	movf	scale@scl,w,c
  4182  00134E  0A80               	xorlw	128
  4183  001350  0F75               	addlw	-139
  4184  001352  A0D8               	btfss	status,0,c
  4185  001354  D055               	goto	l349
  4186                           
  4187                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4188  001356  0E00               	movlw	0
  4189  001358  6E24               	movwf	___awdiv@divisor+1,c
  4190  00135A  0E0A               	movlw	10
  4191  00135C  6E23               	movwf	___awdiv@divisor,c
  4192  00135E  504A               	movf	scale@scl,w,c
  4193  001360  6E21               	movwf	___awdiv@dividend,c
  4194  001362  6A22               	clrf	___awdiv@dividend+1,c
  4195  001364  BE21               	btfsc	___awdiv@dividend,7,c
  4196  001366  0622               	decf	___awdiv@dividend+1,f,c
  4197  001368  ECF3  F013         	call	___awdiv	;wreg free
  4198  00136C  90D8               	bcf	status,0,c
  4199  00136E  3621               	rlcf	?___awdiv,f,c
  4200  001370  3622               	rlcf	?___awdiv+1,f,c
  4201  001372  90D8               	bcf	status,0,c
  4202  001374  3621               	rlcf	?___awdiv,f,c
  4203  001376  3622               	rlcf	?___awdiv+1,f,c
  4204  001378  0E24               	movlw	36
  4205  00137A  2621               	addwf	?___awdiv,f,c
  4206  00137C  0E00               	movlw	0
  4207  00137E  2222               	addwfc	?___awdiv+1,f,c
  4208  001380  0EFB               	movlw	low __powers_
  4209  001382  2421               	addwf	?___awdiv,w,c
  4210  001384  6EF6               	movwf	tblptrl,c
  4211  001386  0EFE               	movlw	high __powers_
  4212  001388  2022               	addwfc	?___awdiv+1,w,c
  4213  00138A  6EF7               	movwf	tblptrh,c
  4214  00138C                     	if	0	;There are less than 3 active tblptr bytes
  4215  00138C                     	endif
  4216  00138C  0009               	tblrd		*+
  4217  00138E  CFF5 F029          	movff	tablat,___flmul@b
  4218  001392  0009               	tblrd		*+
  4219  001394  CFF5 F02A          	movff	tablat,___flmul@b+1
  4220  001398  0009               	tblrd		*+
  4221  00139A  CFF5 F02B          	movff	tablat,___flmul@b+2
  4222  00139E  000A               	tblrd		*-
  4223  0013A0  CFF5 F02C          	movff	tablat,___flmul@b+3
  4224  0013A4  0E00               	movlw	0
  4225  0013A6  6E1E               	movwf	___awmod@divisor+1,c
  4226  0013A8  0E0A               	movlw	10
  4227  0013AA  6E1D               	movwf	___awmod@divisor,c
  4228  0013AC  504A               	movf	scale@scl,w,c
  4229  0013AE  6E1B               	movwf	___awmod@dividend,c
  4230  0013B0  6A1C               	clrf	___awmod@dividend+1,c
  4231  0013B2  BE1B               	btfsc	___awmod@dividend,7,c
  4232  0013B4  061C               	decf	___awmod@dividend+1,f,c
  4233  0013B6  EC76  F014         	call	___awmod	;wreg free
  4234  0013BA  90D8               	bcf	status,0,c
  4235  0013BC  361B               	rlcf	?___awmod,f,c
  4236  0013BE  361C               	rlcf	?___awmod+1,f,c
  4237  0013C0  90D8               	bcf	status,0,c
  4238  0013C2  361B               	rlcf	?___awmod,f,c
  4239  0013C4  361C               	rlcf	?___awmod+1,f,c
  4240  0013C6  0EFB               	movlw	low __powers_
  4241  0013C8  241B               	addwf	?___awmod,w,c
  4242  0013CA  6EF6               	movwf	tblptrl,c
  4243  0013CC  0EFE               	movlw	high __powers_
  4244  0013CE  201C               	addwfc	?___awmod+1,w,c
  4245  0013D0  6EF7               	movwf	tblptrh,c
  4246  0013D2                     	if	0	;There are less than 3 active tblptr bytes
  4247  0013D2                     	endif
  4248  0013D2  0009               	tblrd		*+
  4249  0013D4  CFF5 F02D          	movff	tablat,___flmul@a
  4250  0013D8  0009               	tblrd		*+
  4251  0013DA  CFF5 F02E          	movff	tablat,___flmul@a+1
  4252  0013DE  0009               	tblrd		*+
  4253  0013E0  CFF5 F02F          	movff	tablat,___flmul@a+2
  4254  0013E4  000A               	tblrd		*-
  4255  0013E6  CFF5 F030          	movff	tablat,___flmul@a+3
  4256  0013EA  EC15  F00A         	call	___flmul	;wreg free
  4257  0013EE  C029  F042         	movff	?___flmul,?_scale
  4258  0013F2  C02A  F043         	movff	?___flmul+1,?_scale+1
  4259  0013F6  C02B  F044         	movff	?___flmul+2,?_scale+2
  4260  0013FA  C02C  F045         	movff	?___flmul+3,?_scale+3
  4261  0013FE  0012               	return	
  4262  001400                     l349:
  4263                           
  4264                           ;doprnt.c: 440: return _powers_[scl];
  4265  001400  504A               	movf	scale@scl,w,c
  4266  001402  0D04               	mullw	4
  4267  001404  0EFB               	movlw	low __powers_
  4268  001406  24F3               	addwf	prodl,w,c
  4269  001408  6EF6               	movwf	tblptrl,c
  4270  00140A  0EFE               	movlw	high __powers_
  4271  00140C  20F4               	addwfc	prodh,w,c
  4272  00140E  6EF7               	movwf	tblptrh,c
  4273  001410                     	if	0	;There are less than 3 active tblptr bytes
  4274  001410                     	endif
  4275  001410  0009               	tblrd		*+
  4276  001412  CFF5 F042          	movff	tablat,?_scale
  4277  001416  0009               	tblrd		*+
  4278  001418  CFF5 F043          	movff	tablat,?_scale+1
  4279  00141C  0009               	tblrd		*+
  4280  00141E  CFF5 F044          	movff	tablat,?_scale+2
  4281  001422  000A               	tblrd		*-
  4282  001424  CFF5 F045          	movff	tablat,?_scale+3
  4283  001428  0012               	return	
  4284  00142A                     __end_of_scale:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           postinc0	equ	0xFEE
  4293                           wreg	equ	0xFE8
  4294                           indf1	equ	0xFE7
  4295                           postdec1	equ	0xFE5
  4296                           fsr1h	equ	0xFE2
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _isdigit *****************
  4306 ;; Defined at:
  4307 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  c               1    wreg     unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  c               1   28[COMRAM] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;		None               void
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:        3 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    2
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_sprintf
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text3
  4336  002E44                     __ptext3:
  4337                           	opt stack 0
  4338  002E44                     _isdigit:
  4339                           	opt stack 27
  4340                           
  4341                           ;incstack = 0
  4342                           ;isdigit@c stored from wreg
  4343  002E44  6E1D               	movwf	isdigit@c,c
  4344  002E46  0E00               	movlw	0
  4345  002E48  6E1C               	movwf	_isdigit$1549,c
  4346  002E4A  0E3A               	movlw	58
  4347  002E4C  601D               	cpfslt	isdigit@c,c
  4348  002E4E  D005               	goto	l810
  4349  002E50  0E2F               	movlw	47
  4350  002E52  641D               	cpfsgt	isdigit@c,c
  4351  002E54  D002               	goto	l810
  4352  002E56  0E01               	movlw	1
  4353  002E58  6E1C               	movwf	_isdigit$1549,c
  4354  002E5A                     l810:
  4355  002E5A  C01C  F01B         	movff	_isdigit$1549,??_isdigit
  4356  002E5E  301B               	rrcf	??_isdigit,w,c
  4357  002E60  0012               	return	
  4358  002E62                     __end_of_isdigit:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf1	equ	0xFE7
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _fround *****************
  4380 ;; Defined at:
  4381 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  prec            1    wreg     unsigned char 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  prec            1   77[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  4   65[COMRAM] unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:       13 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    3
  4402 ;; This function calls:
  4403 ;;		___awdiv
  4404 ;;		___awmod
  4405 ;;		___flmul
  4406 ;; This function is called by:
  4407 ;;		_sprintf
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text4
  4412  001D72                     __ptext4:
  4413                           	opt stack 0
  4414  001D72                     _fround:
  4415                           	opt stack 26
  4416                           
  4417                           ;incstack = 0
  4418                           ;fround@prec stored from wreg
  4419  001D72  6E4E               	movwf	fround@prec,c
  4420                           
  4421                           ;doprnt.c: 413: if(prec>=110)
  4422  001D74  0E6D               	movlw	109
  4423  001D76  644E               	cpfsgt	fround@prec,c
  4424  001D78  D0AC               	goto	l336
  4425                           
  4426                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4427  001D7A  0E00               	movlw	0
  4428  001D7C  6E24               	movwf	___awdiv@divisor+1,c
  4429  001D7E  0E0A               	movlw	10
  4430  001D80  6E23               	movwf	___awdiv@divisor,c
  4431  001D82  0E00               	movlw	0
  4432  001D84  6E1E               	movwf	___awmod@divisor+1,c
  4433  001D86  0E64               	movlw	100
  4434  001D88  6E1D               	movwf	___awmod@divisor,c
  4435  001D8A  C04E  F01B         	movff	fround@prec,___awmod@dividend
  4436  001D8E  6A1C               	clrf	___awmod@dividend+1,c
  4437  001D90  EC76  F014         	call	___awmod	;wreg free
  4438  001D94  C01B  F021         	movff	?___awmod,___awdiv@dividend
  4439  001D98  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  4440  001D9C  ECF3  F013         	call	___awdiv	;wreg free
  4441  001DA0  90D8               	bcf	status,0,c
  4442  001DA2  3621               	rlcf	?___awdiv,f,c
  4443  001DA4  3622               	rlcf	?___awdiv+1,f,c
  4444  001DA6  90D8               	bcf	status,0,c
  4445  001DA8  3621               	rlcf	?___awdiv,f,c
  4446  001DAA  3622               	rlcf	?___awdiv+1,f,c
  4447  001DAC  0E24               	movlw	36
  4448  001DAE  2621               	addwf	?___awdiv,f,c
  4449  001DB0  0E00               	movlw	0
  4450  001DB2  2222               	addwfc	?___awdiv+1,f,c
  4451  001DB4  0E2F               	movlw	low __npowers_
  4452  001DB6  2421               	addwf	?___awdiv,w,c
  4453  001DB8  6EF6               	movwf	tblptrl,c
  4454  001DBA  0EFF               	movlw	high __npowers_
  4455  001DBC  2022               	addwfc	?___awdiv+1,w,c
  4456  001DBE  6EF7               	movwf	tblptrh,c
  4457  001DC0                     	if	0	;There are less than 3 active tblptr bytes
  4458  001DC0                     	endif
  4459  001DC0  0009               	tblrd		*+
  4460  001DC2  CFF5 F02D          	movff	tablat,___flmul@a
  4461  001DC6  0009               	tblrd		*+
  4462  001DC8  CFF5 F02E          	movff	tablat,___flmul@a+1
  4463  001DCC  0009               	tblrd		*+
  4464  001DCE  CFF5 F02F          	movff	tablat,___flmul@a+2
  4465  001DD2  000A               	tblrd		*-
  4466  001DD4  CFF5 F030          	movff	tablat,___flmul@a+3
  4467  001DD8  0E00               	movlw	0
  4468  001DDA  6E24               	movwf	___awdiv@divisor+1,c
  4469  001DDC  0E64               	movlw	100
  4470  001DDE  6E23               	movwf	___awdiv@divisor,c
  4471  001DE0  C04E  F021         	movff	fround@prec,___awdiv@dividend
  4472  001DE4  6A22               	clrf	___awdiv@dividend+1,c
  4473  001DE6  ECF3  F013         	call	___awdiv	;wreg free
  4474  001DEA  90D8               	bcf	status,0,c
  4475  001DEC  3621               	rlcf	?___awdiv,f,c
  4476  001DEE  3622               	rlcf	?___awdiv+1,f,c
  4477  001DF0  90D8               	bcf	status,0,c
  4478  001DF2  3621               	rlcf	?___awdiv,f,c
  4479  001DF4  3622               	rlcf	?___awdiv+1,f,c
  4480  001DF6  0E48               	movlw	72
  4481  001DF8  2621               	addwf	?___awdiv,f,c
  4482  001DFA  0E00               	movlw	0
  4483  001DFC  2222               	addwfc	?___awdiv+1,f,c
  4484  001DFE  0E2F               	movlw	low __npowers_
  4485  001E00  2421               	addwf	?___awdiv,w,c
  4486  001E02  6EF6               	movwf	tblptrl,c
  4487  001E04  0EFF               	movlw	high __npowers_
  4488  001E06  2022               	addwfc	?___awdiv+1,w,c
  4489  001E08  6EF7               	movwf	tblptrh,c
  4490  001E0A                     	if	0	;There are less than 3 active tblptr bytes
  4491  001E0A                     	endif
  4492  001E0A  0009               	tblrd		*+
  4493  001E0C  CFF5 F029          	movff	tablat,___flmul@b
  4494  001E10  0009               	tblrd		*+
  4495  001E12  CFF5 F02A          	movff	tablat,___flmul@b+1
  4496  001E16  0009               	tblrd		*+
  4497  001E18  CFF5 F02B          	movff	tablat,___flmul@b+2
  4498  001E1C  000A               	tblrd		*-
  4499  001E1E  CFF5 F02C          	movff	tablat,___flmul@b+3
  4500  001E22  EC15  F00A         	call	___flmul	;wreg free
  4501  001E26  C029  F04A         	movff	?___flmul,_fround$1916
  4502  001E2A  C02A  F04B         	movff	?___flmul+1,_fround$1916+1
  4503  001E2E  C02B  F04C         	movff	?___flmul+2,_fround$1916+2
  4504  001E32  C02C  F04D         	movff	?___flmul+3,_fround$1916+3
  4505                           
  4506                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4507  001E36  0E00               	movlw	0
  4508  001E38  6E1E               	movwf	___awmod@divisor+1,c
  4509  001E3A  0E0A               	movlw	10
  4510  001E3C  6E1D               	movwf	___awmod@divisor,c
  4511  001E3E  C04E  F01B         	movff	fround@prec,___awmod@dividend
  4512  001E42  6A1C               	clrf	___awmod@dividend+1,c
  4513  001E44  EC76  F014         	call	___awmod	;wreg free
  4514  001E48  90D8               	bcf	status,0,c
  4515  001E4A  361B               	rlcf	?___awmod,f,c
  4516  001E4C  361C               	rlcf	?___awmod+1,f,c
  4517  001E4E  90D8               	bcf	status,0,c
  4518  001E50  361B               	rlcf	?___awmod,f,c
  4519  001E52  361C               	rlcf	?___awmod+1,f,c
  4520  001E54  0E2F               	movlw	low __npowers_
  4521  001E56  241B               	addwf	?___awmod,w,c
  4522  001E58  6EF6               	movwf	tblptrl,c
  4523  001E5A  0EFF               	movlw	high __npowers_
  4524  001E5C  201C               	addwfc	?___awmod+1,w,c
  4525  001E5E  6EF7               	movwf	tblptrh,c
  4526  001E60                     	if	0	;There are less than 3 active tblptr bytes
  4527  001E60                     	endif
  4528  001E60  0009               	tblrd		*+
  4529  001E62  CFF5 F02D          	movff	tablat,___flmul@a
  4530  001E66  0009               	tblrd		*+
  4531  001E68  CFF5 F02E          	movff	tablat,___flmul@a+1
  4532  001E6C  0009               	tblrd		*+
  4533  001E6E  CFF5 F02F          	movff	tablat,___flmul@a+2
  4534  001E72  000A               	tblrd		*-
  4535  001E74  CFF5 F030          	movff	tablat,___flmul@a+3
  4536  001E78  C04A  F029         	movff	_fround$1916,___flmul@b
  4537  001E7C  C04B  F02A         	movff	_fround$1916+1,___flmul@b+1
  4538  001E80  C04C  F02B         	movff	_fround$1916+2,___flmul@b+2
  4539  001E84  C04D  F02C         	movff	_fround$1916+3,___flmul@b+3
  4540  001E88  EC15  F00A         	call	___flmul	;wreg free
  4541  001E8C  C029  F046         	movff	?___flmul,_fround$1917
  4542  001E90  C02A  F047         	movff	?___flmul+1,_fround$1917+1
  4543  001E94  C02B  F048         	movff	?___flmul+2,_fround$1917+2
  4544  001E98  C02C  F049         	movff	?___flmul+3,_fround$1917+3
  4545                           
  4546                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4547  001E9C  C046  F029         	movff	_fround$1917,___flmul@b
  4548  001EA0  C047  F02A         	movff	_fround$1917+1,___flmul@b+1
  4549  001EA4  C048  F02B         	movff	_fround$1917+2,___flmul@b+2
  4550  001EA8  C049  F02C         	movff	_fround$1917+3,___flmul@b+3
  4551  001EAC  0E00               	movlw	0
  4552  001EAE  6E2D               	movwf	___flmul@a,c
  4553  001EB0  0E00               	movlw	0
  4554  001EB2  6E2E               	movwf	___flmul@a+1,c
  4555  001EB4  0E00               	movlw	0
  4556  001EB6  6E2F               	movwf	___flmul@a+2,c
  4557  001EB8  0E3F               	movlw	63
  4558  001EBA  6E30               	movwf	___flmul@a+3,c
  4559  001EBC  EC15  F00A         	call	___flmul	;wreg free
  4560  001EC0  C029  F042         	movff	?___flmul,?_fround
  4561  001EC4  C02A  F043         	movff	?___flmul+1,?_fround+1
  4562  001EC8  C02B  F044         	movff	?___flmul+2,?_fround+2
  4563  001ECC  C02C  F045         	movff	?___flmul+3,?_fround+3
  4564  001ED0  0012               	return	
  4565  001ED2                     l336:
  4566                           
  4567                           ;doprnt.c: 415: else if(prec > 10)
  4568  001ED2  0E0A               	movlw	10
  4569  001ED4  644E               	cpfsgt	fround@prec,c
  4570  001ED6  D06B               	goto	l339
  4571                           
  4572                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4573  001ED8  0E00               	movlw	0
  4574  001EDA  6E1E               	movwf	___awmod@divisor+1,c
  4575  001EDC  0E0A               	movlw	10
  4576  001EDE  6E1D               	movwf	___awmod@divisor,c
  4577  001EE0  C04E  F01B         	movff	fround@prec,___awmod@dividend
  4578  001EE4  6A1C               	clrf	___awmod@dividend+1,c
  4579  001EE6  EC76  F014         	call	___awmod	;wreg free
  4580  001EEA  90D8               	bcf	status,0,c
  4581  001EEC  361B               	rlcf	?___awmod,f,c
  4582  001EEE  361C               	rlcf	?___awmod+1,f,c
  4583  001EF0  90D8               	bcf	status,0,c
  4584  001EF2  361B               	rlcf	?___awmod,f,c
  4585  001EF4  361C               	rlcf	?___awmod+1,f,c
  4586  001EF6  0E2F               	movlw	low __npowers_
  4587  001EF8  241B               	addwf	?___awmod,w,c
  4588  001EFA  6EF6               	movwf	tblptrl,c
  4589  001EFC  0EFF               	movlw	high __npowers_
  4590  001EFE  201C               	addwfc	?___awmod+1,w,c
  4591  001F00  6EF7               	movwf	tblptrh,c
  4592  001F02                     	if	0	;There are less than 3 active tblptr bytes
  4593  001F02                     	endif
  4594  001F02  0009               	tblrd		*+
  4595  001F04  CFF5 F02D          	movff	tablat,___flmul@a
  4596  001F08  0009               	tblrd		*+
  4597  001F0A  CFF5 F02E          	movff	tablat,___flmul@a+1
  4598  001F0E  0009               	tblrd		*+
  4599  001F10  CFF5 F02F          	movff	tablat,___flmul@a+2
  4600  001F14  000A               	tblrd		*-
  4601  001F16  CFF5 F030          	movff	tablat,___flmul@a+3
  4602  001F1A  0E00               	movlw	0
  4603  001F1C  6E24               	movwf	___awdiv@divisor+1,c
  4604  001F1E  0E0A               	movlw	10
  4605  001F20  6E23               	movwf	___awdiv@divisor,c
  4606  001F22  C04E  F021         	movff	fround@prec,___awdiv@dividend
  4607  001F26  6A22               	clrf	___awdiv@dividend+1,c
  4608  001F28  ECF3  F013         	call	___awdiv	;wreg free
  4609  001F2C  90D8               	bcf	status,0,c
  4610  001F2E  3621               	rlcf	?___awdiv,f,c
  4611  001F30  3622               	rlcf	?___awdiv+1,f,c
  4612  001F32  90D8               	bcf	status,0,c
  4613  001F34  3621               	rlcf	?___awdiv,f,c
  4614  001F36  3622               	rlcf	?___awdiv+1,f,c
  4615  001F38  0E24               	movlw	36
  4616  001F3A  2621               	addwf	?___awdiv,f,c
  4617  001F3C  0E00               	movlw	0
  4618  001F3E  2222               	addwfc	?___awdiv+1,f,c
  4619  001F40  0E2F               	movlw	low __npowers_
  4620  001F42  2421               	addwf	?___awdiv,w,c
  4621  001F44  6EF6               	movwf	tblptrl,c
  4622  001F46  0EFF               	movlw	high __npowers_
  4623  001F48  2022               	addwfc	?___awdiv+1,w,c
  4624  001F4A  6EF7               	movwf	tblptrh,c
  4625  001F4C                     	if	0	;There are less than 3 active tblptr bytes
  4626  001F4C                     	endif
  4627  001F4C  0009               	tblrd		*+
  4628  001F4E  CFF5 F029          	movff	tablat,___flmul@b
  4629  001F52  0009               	tblrd		*+
  4630  001F54  CFF5 F02A          	movff	tablat,___flmul@b+1
  4631  001F58  0009               	tblrd		*+
  4632  001F5A  CFF5 F02B          	movff	tablat,___flmul@b+2
  4633  001F5E  000A               	tblrd		*-
  4634  001F60  CFF5 F02C          	movff	tablat,___flmul@b+3
  4635  001F64  EC15  F00A         	call	___flmul	;wreg free
  4636  001F68  C029  F04A         	movff	?___flmul,_fround$1916
  4637  001F6C  C02A  F04B         	movff	?___flmul+1,_fround$1916+1
  4638  001F70  C02B  F04C         	movff	?___flmul+2,_fround$1916+2
  4639  001F74  C02C  F04D         	movff	?___flmul+3,_fround$1916+3
  4640                           
  4641                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4642  001F78  C04A  F029         	movff	_fround$1916,___flmul@b
  4643  001F7C  C04B  F02A         	movff	_fround$1916+1,___flmul@b+1
  4644  001F80  C04C  F02B         	movff	_fround$1916+2,___flmul@b+2
  4645  001F84  C04D  F02C         	movff	_fround$1916+3,___flmul@b+3
  4646  001F88  0E00               	movlw	0
  4647  001F8A  6E2D               	movwf	___flmul@a,c
  4648  001F8C  0E00               	movlw	0
  4649  001F8E  6E2E               	movwf	___flmul@a+1,c
  4650  001F90  0E00               	movlw	0
  4651  001F92  6E2F               	movwf	___flmul@a+2,c
  4652  001F94  0E3F               	movlw	63
  4653  001F96  6E30               	movwf	___flmul@a+3,c
  4654  001F98  EC15  F00A         	call	___flmul	;wreg free
  4655  001F9C  C029  F042         	movff	?___flmul,?_fround
  4656  001FA0  C02A  F043         	movff	?___flmul+1,?_fround+1
  4657  001FA4  C02B  F044         	movff	?___flmul+2,?_fround+2
  4658  001FA8  C02C  F045         	movff	?___flmul+3,?_fround+3
  4659  001FAC  0012               	return	
  4660  001FAE                     l339:
  4661                           
  4662                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4663  001FAE  504E               	movf	fround@prec,w,c
  4664  001FB0  0D04               	mullw	4
  4665  001FB2  0E2F               	movlw	low __npowers_
  4666  001FB4  24F3               	addwf	prodl,w,c
  4667  001FB6  6EF6               	movwf	tblptrl,c
  4668  001FB8  0EFF               	movlw	high __npowers_
  4669  001FBA  20F4               	addwfc	prodh,w,c
  4670  001FBC  6EF7               	movwf	tblptrh,c
  4671  001FBE                     	if	0	;There are less than 3 active tblptr bytes
  4672  001FBE                     	endif
  4673  001FBE  0009               	tblrd		*+
  4674  001FC0  CFF5 F029          	movff	tablat,___flmul@b
  4675  001FC4  0009               	tblrd		*+
  4676  001FC6  CFF5 F02A          	movff	tablat,___flmul@b+1
  4677  001FCA  0009               	tblrd		*+
  4678  001FCC  CFF5 F02B          	movff	tablat,___flmul@b+2
  4679  001FD0  000A               	tblrd		*-
  4680  001FD2  CFF5 F02C          	movff	tablat,___flmul@b+3
  4681  001FD6  0E00               	movlw	0
  4682  001FD8  6E2D               	movwf	___flmul@a,c
  4683  001FDA  0E00               	movlw	0
  4684  001FDC  6E2E               	movwf	___flmul@a+1,c
  4685  001FDE  0E00               	movlw	0
  4686  001FE0  6E2F               	movwf	___flmul@a+2,c
  4687  001FE2  0E3F               	movlw	63
  4688  001FE4  6E30               	movwf	___flmul@a+3,c
  4689  001FE6  EC15  F00A         	call	___flmul	;wreg free
  4690  001FEA  C029  F042         	movff	?___flmul,?_fround
  4691  001FEE  C02A  F043         	movff	?___flmul+1,?_fround+1
  4692  001FF2  C02B  F044         	movff	?___flmul+2,?_fround+2
  4693  001FF6  C02C  F045         	movff	?___flmul+3,?_fround+3
  4694  001FFA  0012               	return	
  4695  001FFC                     __end_of_fround:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf1	equ	0xFE7
  4706                           postdec1	equ	0xFE5
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716 ;; *************** function ___awmod *****************
  4717 ;; Defined at:
  4718 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  dividend        2   26[COMRAM] int 
  4721 ;;  divisor         2   28[COMRAM] int 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  sign            1   31[COMRAM] unsigned char 
  4724 ;;  counter         1   30[COMRAM] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2   26[COMRAM] int 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;Total ram usage:        6 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    2
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_fround
  4745 ;;		_scale
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text5
  4750  0028EC                     __ptext5:
  4751                           	opt stack 0
  4752  0028EC                     ___awmod:
  4753                           	opt stack 26
  4754                           
  4755                           ;incstack = 0
  4756  0028EC  0E00               	movlw	0
  4757  0028EE  6E20               	movwf	___awmod@sign,c
  4758  0028F0  AE1C               	btfss	___awmod@dividend+1,7,c
  4759  0028F2  D006               	goto	l627
  4760  0028F4  6C1B               	negf	___awmod@dividend,c
  4761  0028F6  1E1C               	comf	___awmod@dividend+1,f,c
  4762  0028F8  B0D8               	btfsc	status,0,c
  4763  0028FA  2A1C               	incf	___awmod@dividend+1,f,c
  4764  0028FC  0E01               	movlw	1
  4765  0028FE  6E20               	movwf	___awmod@sign,c
  4766  002900                     l627:
  4767  002900  AE1E               	btfss	___awmod@divisor+1,7,c
  4768  002902  D004               	goto	l628
  4769  002904  6C1D               	negf	___awmod@divisor,c
  4770  002906  1E1E               	comf	___awmod@divisor+1,f,c
  4771  002908  B0D8               	btfsc	status,0,c
  4772  00290A  2A1E               	incf	___awmod@divisor+1,f,c
  4773  00290C                     l628:
  4774  00290C  501D               	movf	___awmod@divisor,w,c
  4775  00290E  101E               	iorwf	___awmod@divisor+1,w,c
  4776  002910  B4D8               	btfsc	status,2,c
  4777  002912  D018               	goto	l635
  4778  002914  0E01               	movlw	1
  4779  002916  6E1F               	movwf	___awmod@counter,c
  4780  002918  D004               	goto	l630
  4781  00291A  90D8               	bcf	status,0,c
  4782  00291C  361D               	rlcf	___awmod@divisor,f,c
  4783  00291E  361E               	rlcf	___awmod@divisor+1,f,c
  4784  002920  2A1F               	incf	___awmod@counter,f,c
  4785  002922                     l630:
  4786  002922  AE1E               	btfss	___awmod@divisor+1,7,c
  4787  002924  D7FA               	goto	l631
  4788  002926                     u5540:
  4789  002926  501D               	movf	___awmod@divisor,w,c
  4790  002928  5C1B               	subwf	___awmod@dividend,w,c
  4791  00292A  501E               	movf	___awmod@divisor+1,w,c
  4792  00292C  581C               	subwfb	___awmod@dividend+1,w,c
  4793  00292E  A0D8               	btfss	status,0,c
  4794  002930  D004               	goto	l634
  4795  002932  501D               	movf	___awmod@divisor,w,c
  4796  002934  5E1B               	subwf	___awmod@dividend,f,c
  4797  002936  501E               	movf	___awmod@divisor+1,w,c
  4798  002938  5A1C               	subwfb	___awmod@dividend+1,f,c
  4799  00293A                     l634:
  4800  00293A  90D8               	bcf	status,0,c
  4801  00293C  321E               	rrcf	___awmod@divisor+1,f,c
  4802  00293E  321D               	rrcf	___awmod@divisor,f,c
  4803  002940  2E1F               	decfsz	___awmod@counter,f,c
  4804  002942  D7F1               	goto	u5540
  4805  002944                     l635:
  4806  002944  5020               	movf	___awmod@sign,w,c
  4807  002946  B4D8               	btfsc	status,2,c
  4808  002948  D004               	goto	l636
  4809  00294A  6C1B               	negf	___awmod@dividend,c
  4810  00294C  1E1C               	comf	___awmod@dividend+1,f,c
  4811  00294E  B0D8               	btfsc	status,0,c
  4812  002950  2A1C               	incf	___awmod@dividend+1,f,c
  4813  002952                     l636:
  4814  002952  C01B  F01B         	movff	___awmod@dividend,?___awmod
  4815  002956  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  4816  00295A  0012               	return	
  4817  00295C                     __end_of___awmod:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           indf1	equ	0xFE7
  4828                           postdec1	equ	0xFE5
  4829                           fsr1h	equ	0xFE2
  4830                           fsr1l	equ	0xFE1
  4831                           indf2	equ	0xFDF
  4832                           postinc2	equ	0xFDE
  4833                           postdec2	equ	0xFDD
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function ___awdiv *****************
  4839 ;; Defined at:
  4840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  dividend        2   32[COMRAM] int 
  4843 ;;  divisor         2   34[COMRAM] int 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  quotient        2   38[COMRAM] int 
  4846 ;;  sign            1   37[COMRAM] unsigned char 
  4847 ;;  counter         1   36[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  2   32[COMRAM] int 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;Total ram usage:        8 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    2
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_fround
  4868 ;;		_scale
  4869 ;;		_sprintf
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text6
  4874  0027E6                     __ptext6:
  4875                           	opt stack 0
  4876  0027E6                     ___awdiv:
  4877                           	opt stack 26
  4878                           
  4879                           ;incstack = 0
  4880  0027E6  0E00               	movlw	0
  4881  0027E8  6E26               	movwf	___awdiv@sign,c
  4882  0027EA  AE24               	btfss	___awdiv@divisor+1,7,c
  4883  0027EC  D006               	goto	l614
  4884  0027EE  6C23               	negf	___awdiv@divisor,c
  4885  0027F0  1E24               	comf	___awdiv@divisor+1,f,c
  4886  0027F2  B0D8               	btfsc	status,0,c
  4887  0027F4  2A24               	incf	___awdiv@divisor+1,f,c
  4888  0027F6  0E01               	movlw	1
  4889  0027F8  6E26               	movwf	___awdiv@sign,c
  4890  0027FA                     l614:
  4891  0027FA  AE22               	btfss	___awdiv@dividend+1,7,c
  4892  0027FC  D006               	goto	l615
  4893  0027FE  6C21               	negf	___awdiv@dividend,c
  4894  002800  1E22               	comf	___awdiv@dividend+1,f,c
  4895  002802  B0D8               	btfsc	status,0,c
  4896  002804  2A22               	incf	___awdiv@dividend+1,f,c
  4897  002806  0E01               	movlw	1
  4898  002808  1A26               	xorwf	___awdiv@sign,f,c
  4899  00280A                     l615:
  4900  00280A  0E00               	movlw	0
  4901  00280C  6E28               	movwf	___awdiv@quotient+1,c
  4902  00280E  0E00               	movlw	0
  4903  002810  6E27               	movwf	___awdiv@quotient,c
  4904  002812  5023               	movf	___awdiv@divisor,w,c
  4905  002814  1024               	iorwf	___awdiv@divisor+1,w,c
  4906  002816  B4D8               	btfsc	status,2,c
  4907  002818  D01C               	goto	l622
  4908  00281A  0E01               	movlw	1
  4909  00281C  6E25               	movwf	___awdiv@counter,c
  4910  00281E  D004               	goto	l617
  4911  002820  90D8               	bcf	status,0,c
  4912  002822  3623               	rlcf	___awdiv@divisor,f,c
  4913  002824  3624               	rlcf	___awdiv@divisor+1,f,c
  4914  002826  2A25               	incf	___awdiv@counter,f,c
  4915  002828                     l617:
  4916  002828  AE24               	btfss	___awdiv@divisor+1,7,c
  4917  00282A  D7FA               	goto	l618
  4918  00282C                     u5480:
  4919  00282C  90D8               	bcf	status,0,c
  4920  00282E  3627               	rlcf	___awdiv@quotient,f,c
  4921  002830  3628               	rlcf	___awdiv@quotient+1,f,c
  4922  002832  5023               	movf	___awdiv@divisor,w,c
  4923  002834  5C21               	subwf	___awdiv@dividend,w,c
  4924  002836  5024               	movf	___awdiv@divisor+1,w,c
  4925  002838  5822               	subwfb	___awdiv@dividend+1,w,c
  4926  00283A  A0D8               	btfss	status,0,c
  4927  00283C  D005               	goto	l621
  4928  00283E  5023               	movf	___awdiv@divisor,w,c
  4929  002840  5E21               	subwf	___awdiv@dividend,f,c
  4930  002842  5024               	movf	___awdiv@divisor+1,w,c
  4931  002844  5A22               	subwfb	___awdiv@dividend+1,f,c
  4932  002846  8027               	bsf	___awdiv@quotient,0,c
  4933  002848                     l621:
  4934  002848  90D8               	bcf	status,0,c
  4935  00284A  3224               	rrcf	___awdiv@divisor+1,f,c
  4936  00284C  3223               	rrcf	___awdiv@divisor,f,c
  4937  00284E  2E25               	decfsz	___awdiv@counter,f,c
  4938  002850  D7ED               	goto	u5480
  4939  002852                     l622:
  4940  002852  5026               	movf	___awdiv@sign,w,c
  4941  002854  B4D8               	btfsc	status,2,c
  4942  002856  D004               	goto	l623
  4943  002858  6C27               	negf	___awdiv@quotient,c
  4944  00285A  1E28               	comf	___awdiv@quotient+1,f,c
  4945  00285C  B0D8               	btfsc	status,0,c
  4946  00285E  2A28               	incf	___awdiv@quotient+1,f,c
  4947  002860                     l623:
  4948  002860  C027  F021         	movff	___awdiv@quotient,?___awdiv
  4949  002864  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  4950  002868  0012               	return	
  4951  00286A                     __end_of___awdiv:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           postdec1	equ	0xFE5
  4963                           fsr1h	equ	0xFE2
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function __tdiv_to_l_ *****************
  4973 ;; Defined at:
  4974 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  f1              4   26[COMRAM] float 
  4977 ;;  f2              4   30[COMRAM] float 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  quot            4   37[COMRAM] unsigned long 
  4980 ;;  exp1            1   42[COMRAM] unsigned char 
  4981 ;;  cntr            1   41[COMRAM] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  4   26[COMRAM] unsigned long 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:       17 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    2
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_sprintf
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text7
  5006  00214C                     __ptext7:
  5007                           	opt stack 0
  5008  00214C                     __tdiv_to_l_:
  5009                           	opt stack 27
  5010                           
  5011                           ;incstack = 0
  5012  00214C  C01D  F023         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5013  002150  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5014  002152  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5015  002154  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  5016  002156  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5017  002158  E301               	bnc	u5671
  5018  00215A  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5019  00215C                     u5671:
  5020  00215C  5023               	movf	??__tdiv_to_l_,w,c
  5021  00215E  6E2B               	movwf	__tdiv_to_l_@exp1,c
  5022  002160  502B               	movf	__tdiv_to_l_@exp1,w,c
  5023  002162  A4D8               	btfss	status,2,c
  5024  002164  D009               	goto	l750
  5025  002166  0E00               	movlw	0
  5026  002168  6E1B               	movwf	?__tdiv_to_l_,c
  5027  00216A  0E00               	movlw	0
  5028  00216C  6E1C               	movwf	?__tdiv_to_l_+1,c
  5029  00216E  0E00               	movlw	0
  5030  002170  6E1D               	movwf	?__tdiv_to_l_+2,c
  5031  002172  0E00               	movlw	0
  5032  002174  6E1E               	movwf	?__tdiv_to_l_+3,c
  5033  002176  0012               	return	
  5034  002178                     l750:
  5035  002178  C021  F023         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5036  00217C  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5037  00217E  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5038  002180  3420               	rlcf	__tdiv_to_l_@f2+1,w,c
  5039  002182  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5040  002184  E301               	bnc	u5691
  5041  002186  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5042  002188                     u5691:
  5043  002188  5023               	movf	??__tdiv_to_l_,w,c
  5044  00218A  6E2A               	movwf	__tdiv_to_l_@cntr,c
  5045  00218C  502A               	movf	__tdiv_to_l_@cntr,w,c
  5046  00218E  A4D8               	btfss	status,2,c
  5047  002190  D009               	goto	l752
  5048  002192  0E00               	movlw	0
  5049  002194  6E1B               	movwf	?__tdiv_to_l_,c
  5050  002196  0E00               	movlw	0
  5051  002198  6E1C               	movwf	?__tdiv_to_l_+1,c
  5052  00219A  0E00               	movlw	0
  5053  00219C  6E1D               	movwf	?__tdiv_to_l_+2,c
  5054  00219E  0E00               	movlw	0
  5055  0021A0  6E1E               	movwf	?__tdiv_to_l_+3,c
  5056  0021A2  0012               	return	
  5057  0021A4                     l752:
  5058  0021A4  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  5059  0021A6  0EFF               	movlw	255
  5060  0021A8  161B               	andwf	__tdiv_to_l_@f1,f,c
  5061  0021AA  0EFF               	movlw	255
  5062  0021AC  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  5063  0021AE  0E00               	movlw	0
  5064  0021B0  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  5065  0021B2  8E20               	bsf	__tdiv_to_l_@f2+1,7,c
  5066  0021B4  0EFF               	movlw	255
  5067  0021B6  161F               	andwf	__tdiv_to_l_@f2,f,c
  5068  0021B8  0EFF               	movlw	255
  5069  0021BA  1620               	andwf	__tdiv_to_l_@f2+1,f,c
  5070  0021BC  0E00               	movlw	0
  5071  0021BE  1621               	andwf	__tdiv_to_l_@f2+2,f,c
  5072  0021C0  0E00               	movlw	0
  5073  0021C2  6E26               	movwf	__tdiv_to_l_@quot,c
  5074  0021C4  0E00               	movlw	0
  5075  0021C6  6E27               	movwf	__tdiv_to_l_@quot+1,c
  5076  0021C8  0E00               	movlw	0
  5077  0021CA  6E28               	movwf	__tdiv_to_l_@quot+2,c
  5078  0021CC  0E00               	movlw	0
  5079  0021CE  6E29               	movwf	__tdiv_to_l_@quot+3,c
  5080  0021D0  0E7F               	movlw	127
  5081  0021D2  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  5082  0021D4  502A               	movf	__tdiv_to_l_@cntr,w,c
  5083  0021D6  0F98               	addlw	152
  5084  0021D8  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  5085  0021DA  0E18               	movlw	24
  5086  0021DC  6E2A               	movwf	__tdiv_to_l_@cntr,c
  5087  0021DE                     l753:
  5088  0021DE  90D8               	bcf	status,0,c
  5089  0021E0  3626               	rlcf	__tdiv_to_l_@quot,f,c
  5090  0021E2  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  5091  0021E4  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  5092  0021E6  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  5093  0021E8  501F               	movf	__tdiv_to_l_@f2,w,c
  5094  0021EA  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  5095  0021EC  5020               	movf	__tdiv_to_l_@f2+1,w,c
  5096  0021EE  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  5097  0021F0  5021               	movf	__tdiv_to_l_@f2+2,w,c
  5098  0021F2  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  5099  0021F4  A0D8               	btfss	status,0,c
  5100  0021F6  D007               	goto	l754
  5101  0021F8  501F               	movf	__tdiv_to_l_@f2,w,c
  5102  0021FA  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  5103  0021FC  5020               	movf	__tdiv_to_l_@f2+1,w,c
  5104  0021FE  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  5105  002200  5021               	movf	__tdiv_to_l_@f2+2,w,c
  5106  002202  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  5107  002204  8026               	bsf	__tdiv_to_l_@quot,0,c
  5108  002206                     l754:
  5109  002206  90D8               	bcf	status,0,c
  5110  002208  361B               	rlcf	__tdiv_to_l_@f1,f,c
  5111  00220A  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  5112  00220C  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  5113  00220E  2E2A               	decfsz	__tdiv_to_l_@cntr,f,c
  5114  002210  D7E6               	goto	l753
  5115  002212  AE2B               	btfss	__tdiv_to_l_@exp1,7,c
  5116  002214  D016               	goto	l756
  5117  002216  502B               	movf	__tdiv_to_l_@exp1,w,c
  5118  002218  0A80               	xorlw	128
  5119  00221A  0F97               	addlw	151
  5120  00221C  B0D8               	btfsc	status,0,c
  5121  00221E  D009               	goto	l757
  5122  002220  0E00               	movlw	0
  5123  002222  6E1B               	movwf	?__tdiv_to_l_,c
  5124  002224  0E00               	movlw	0
  5125  002226  6E1C               	movwf	?__tdiv_to_l_+1,c
  5126  002228  0E00               	movlw	0
  5127  00222A  6E1D               	movwf	?__tdiv_to_l_+2,c
  5128  00222C  0E00               	movlw	0
  5129  00222E  6E1E               	movwf	?__tdiv_to_l_+3,c
  5130  002230  0012               	return	
  5131  002232                     l757:
  5132  002232  90D8               	bcf	status,0,c
  5133  002234  3229               	rrcf	__tdiv_to_l_@quot+3,f,c
  5134  002236  3228               	rrcf	__tdiv_to_l_@quot+2,f,c
  5135  002238  3227               	rrcf	__tdiv_to_l_@quot+1,f,c
  5136  00223A  3226               	rrcf	__tdiv_to_l_@quot,f,c
  5137  00223C  3E2B               	incfsz	__tdiv_to_l_@exp1,f,c
  5138  00223E  D7F9               	goto	l757
  5139  002240  D015               	goto	u5750
  5140  002242                     l756:
  5141  002242  0E17               	movlw	23
  5142  002244  642B               	cpfsgt	__tdiv_to_l_@exp1,c
  5143  002246  D00F               	goto	l762
  5144  002248  0E00               	movlw	0
  5145  00224A  6E1B               	movwf	?__tdiv_to_l_,c
  5146  00224C  0E00               	movlw	0
  5147  00224E  6E1C               	movwf	?__tdiv_to_l_+1,c
  5148  002250  0E00               	movlw	0
  5149  002252  6E1D               	movwf	?__tdiv_to_l_+2,c
  5150  002254  0E00               	movlw	0
  5151  002256  6E1E               	movwf	?__tdiv_to_l_+3,c
  5152  002258  0012               	return	
  5153  00225A  90D8               	bcf	status,0,c
  5154  00225C  3626               	rlcf	__tdiv_to_l_@quot,f,c
  5155  00225E  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  5156  002260  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  5157  002262  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  5158  002264  062B               	decf	__tdiv_to_l_@exp1,f,c
  5159  002266                     l762:
  5160  002266  502B               	movf	__tdiv_to_l_@exp1,w,c
  5161  002268  A4D8               	btfss	status,2,c
  5162  00226A  D7F7               	goto	l763
  5163  00226C                     u5750:
  5164  00226C  C026  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5165  002270  C027  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5166  002274  C028  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5167  002278  C029  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5168  00227C  0012               	return		;funcret
  5169  00227E                     __end_of__tdiv_to_l_:
  5170                           	opt stack 0
  5171                           tblptru	equ	0xFF8
  5172                           tblptrh	equ	0xFF7
  5173                           tblptrl	equ	0xFF6
  5174                           tablat	equ	0xFF5
  5175                           prodh	equ	0xFF4
  5176                           prodl	equ	0xFF3
  5177                           postinc0	equ	0xFEE
  5178                           wreg	equ	0xFE8
  5179                           indf1	equ	0xFE7
  5180                           postdec1	equ	0xFE5
  5181                           fsr1h	equ	0xFE2
  5182                           fsr1l	equ	0xFE1
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function __div_to_l_ *****************
  5191 ;; Defined at:
  5192 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  f1              4   26[COMRAM] unsigned long 
  5195 ;;  f2              4   30[COMRAM] unsigned long 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  quot            4   34[COMRAM] unsigned long 
  5198 ;;  exp1            1   39[COMRAM] unsigned char 
  5199 ;;  cntr            1   38[COMRAM] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  4   26[COMRAM] unsigned long 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5209 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;Total ram usage:       14 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    2
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_sprintf
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text8
  5224  00227E                     __ptext8:
  5225                           	opt stack 0
  5226  00227E                     __div_to_l_:
  5227                           	opt stack 27
  5228                           
  5229                           ;incstack = 0
  5230  00227E  341D               	rlcf	__div_to_l_@f1+2,w,c
  5231  002280  341E               	rlcf	__div_to_l_@f1+3,w,c
  5232  002282  6E28               	movwf	__div_to_l_@exp1,c
  5233  002284  5028               	movf	__div_to_l_@exp1,w,c
  5234  002286  A4D8               	btfss	status,2,c
  5235  002288  D009               	goto	l646
  5236  00228A  0E00               	movlw	0
  5237  00228C  6E1B               	movwf	?__div_to_l_,c
  5238  00228E  0E00               	movlw	0
  5239  002290  6E1C               	movwf	?__div_to_l_+1,c
  5240  002292  0E00               	movlw	0
  5241  002294  6E1D               	movwf	?__div_to_l_+2,c
  5242  002296  0E00               	movlw	0
  5243  002298  6E1E               	movwf	?__div_to_l_+3,c
  5244  00229A  0012               	return	
  5245  00229C                     l646:
  5246  00229C  3421               	rlcf	__div_to_l_@f2+2,w,c
  5247  00229E  3422               	rlcf	__div_to_l_@f2+3,w,c
  5248  0022A0  6E27               	movwf	__div_to_l_@cntr,c
  5249  0022A2  5027               	movf	__div_to_l_@cntr,w,c
  5250  0022A4  A4D8               	btfss	status,2,c
  5251  0022A6  D009               	goto	l648
  5252  0022A8  0E00               	movlw	0
  5253  0022AA  6E1B               	movwf	?__div_to_l_,c
  5254  0022AC  0E00               	movlw	0
  5255  0022AE  6E1C               	movwf	?__div_to_l_+1,c
  5256  0022B0  0E00               	movlw	0
  5257  0022B2  6E1D               	movwf	?__div_to_l_+2,c
  5258  0022B4  0E00               	movlw	0
  5259  0022B6  6E1E               	movwf	?__div_to_l_+3,c
  5260  0022B8  0012               	return	
  5261  0022BA                     l648:
  5262  0022BA  8E1D               	bsf	__div_to_l_@f1+2,7,c
  5263  0022BC  0EFF               	movlw	255
  5264  0022BE  161B               	andwf	__div_to_l_@f1,f,c
  5265  0022C0  0EFF               	movlw	255
  5266  0022C2  161C               	andwf	__div_to_l_@f1+1,f,c
  5267  0022C4  0EFF               	movlw	255
  5268  0022C6  161D               	andwf	__div_to_l_@f1+2,f,c
  5269  0022C8  0E00               	movlw	0
  5270  0022CA  161E               	andwf	__div_to_l_@f1+3,f,c
  5271  0022CC  8E21               	bsf	__div_to_l_@f2+2,7,c
  5272  0022CE  0EFF               	movlw	255
  5273  0022D0  161F               	andwf	__div_to_l_@f2,f,c
  5274  0022D2  0EFF               	movlw	255
  5275  0022D4  1620               	andwf	__div_to_l_@f2+1,f,c
  5276  0022D6  0EFF               	movlw	255
  5277  0022D8  1621               	andwf	__div_to_l_@f2+2,f,c
  5278  0022DA  0E00               	movlw	0
  5279  0022DC  1622               	andwf	__div_to_l_@f2+3,f,c
  5280  0022DE  0E00               	movlw	0
  5281  0022E0  6E23               	movwf	__div_to_l_@quot,c
  5282  0022E2  0E00               	movlw	0
  5283  0022E4  6E24               	movwf	__div_to_l_@quot+1,c
  5284  0022E6  0E00               	movlw	0
  5285  0022E8  6E25               	movwf	__div_to_l_@quot+2,c
  5286  0022EA  0E00               	movlw	0
  5287  0022EC  6E26               	movwf	__div_to_l_@quot+3,c
  5288  0022EE  0E7F               	movlw	127
  5289  0022F0  5E28               	subwf	__div_to_l_@exp1,f,c
  5290  0022F2  5027               	movf	__div_to_l_@cntr,w,c
  5291  0022F4  0FA0               	addlw	160
  5292  0022F6  5E28               	subwf	__div_to_l_@exp1,f,c
  5293  0022F8  0E20               	movlw	32
  5294  0022FA  6E27               	movwf	__div_to_l_@cntr,c
  5295  0022FC  90D8               	bcf	status,0,c
  5296  0022FE  3623               	rlcf	__div_to_l_@quot,f,c
  5297  002300  3624               	rlcf	__div_to_l_@quot+1,f,c
  5298  002302  3625               	rlcf	__div_to_l_@quot+2,f,c
  5299  002304  3626               	rlcf	__div_to_l_@quot+3,f,c
  5300  002306  501F               	movf	__div_to_l_@f2,w,c
  5301  002308  5C1B               	subwf	__div_to_l_@f1,w,c
  5302  00230A  5020               	movf	__div_to_l_@f2+1,w,c
  5303  00230C  581C               	subwfb	__div_to_l_@f1+1,w,c
  5304  00230E  5021               	movf	__div_to_l_@f2+2,w,c
  5305  002310  581D               	subwfb	__div_to_l_@f1+2,w,c
  5306  002312  5022               	movf	__div_to_l_@f2+3,w,c
  5307  002314  581E               	subwfb	__div_to_l_@f1+3,w,c
  5308  002316  A0D8               	btfss	status,0,c
  5309  002318  D009               	goto	l650
  5310  00231A  501F               	movf	__div_to_l_@f2,w,c
  5311  00231C  5E1B               	subwf	__div_to_l_@f1,f,c
  5312  00231E  5020               	movf	__div_to_l_@f2+1,w,c
  5313  002320  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  5314  002322  5021               	movf	__div_to_l_@f2+2,w,c
  5315  002324  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  5316  002326  5022               	movf	__div_to_l_@f2+3,w,c
  5317  002328  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  5318  00232A  8023               	bsf	__div_to_l_@quot,0,c
  5319  00232C                     l650:
  5320  00232C  90D8               	bcf	status,0,c
  5321  00232E  361B               	rlcf	__div_to_l_@f1,f,c
  5322  002330  361C               	rlcf	__div_to_l_@f1+1,f,c
  5323  002332  361D               	rlcf	__div_to_l_@f1+2,f,c
  5324  002334  361E               	rlcf	__div_to_l_@f1+3,f,c
  5325  002336  2E27               	decfsz	__div_to_l_@cntr,f,c
  5326  002338  D7E1               	goto	l649
  5327  00233A  AE28               	btfss	__div_to_l_@exp1,7,c
  5328  00233C  D016               	goto	l652
  5329  00233E  5028               	movf	__div_to_l_@exp1,w,c
  5330  002340  0A80               	xorlw	128
  5331  002342  0F9F               	addlw	159
  5332  002344  B0D8               	btfsc	status,0,c
  5333  002346  D009               	goto	l653
  5334  002348  0E00               	movlw	0
  5335  00234A  6E1B               	movwf	?__div_to_l_,c
  5336  00234C  0E00               	movlw	0
  5337  00234E  6E1C               	movwf	?__div_to_l_+1,c
  5338  002350  0E00               	movlw	0
  5339  002352  6E1D               	movwf	?__div_to_l_+2,c
  5340  002354  0E00               	movlw	0
  5341  002356  6E1E               	movwf	?__div_to_l_+3,c
  5342  002358  0012               	return	
  5343  00235A                     l653:
  5344  00235A  90D8               	bcf	status,0,c
  5345  00235C  3226               	rrcf	__div_to_l_@quot+3,f,c
  5346  00235E  3225               	rrcf	__div_to_l_@quot+2,f,c
  5347  002360  3224               	rrcf	__div_to_l_@quot+1,f,c
  5348  002362  3223               	rrcf	__div_to_l_@quot,f,c
  5349  002364  3E28               	incfsz	__div_to_l_@exp1,f,c
  5350  002366  D7F9               	goto	l653
  5351  002368  D015               	goto	u5820
  5352  00236A                     l652:
  5353  00236A  0E1F               	movlw	31
  5354  00236C  6428               	cpfsgt	__div_to_l_@exp1,c
  5355  00236E  D00F               	goto	l658
  5356  002370  0E00               	movlw	0
  5357  002372  6E1B               	movwf	?__div_to_l_,c
  5358  002374  0E00               	movlw	0
  5359  002376  6E1C               	movwf	?__div_to_l_+1,c
  5360  002378  0E00               	movlw	0
  5361  00237A  6E1D               	movwf	?__div_to_l_+2,c
  5362  00237C  0E00               	movlw	0
  5363  00237E  6E1E               	movwf	?__div_to_l_+3,c
  5364  002380  0012               	return	
  5365  002382  90D8               	bcf	status,0,c
  5366  002384  3623               	rlcf	__div_to_l_@quot,f,c
  5367  002386  3624               	rlcf	__div_to_l_@quot+1,f,c
  5368  002388  3625               	rlcf	__div_to_l_@quot+2,f,c
  5369  00238A  3626               	rlcf	__div_to_l_@quot+3,f,c
  5370  00238C  0628               	decf	__div_to_l_@exp1,f,c
  5371  00238E                     l658:
  5372  00238E  5028               	movf	__div_to_l_@exp1,w,c
  5373  002390  A4D8               	btfss	status,2,c
  5374  002392  D7F7               	goto	l659
  5375  002394                     u5820:
  5376  002394  C023  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  5377  002398  C024  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5378  00239C  C025  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5379  0023A0  C026  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5380  0023A4  0012               	return		;funcret
  5381  0023A6                     __end_of__div_to_l_:
  5382                           	opt stack 0
  5383                           tblptru	equ	0xFF8
  5384                           tblptrh	equ	0xFF7
  5385                           tblptrl	equ	0xFF6
  5386                           tablat	equ	0xFF5
  5387                           prodh	equ	0xFF4
  5388                           prodl	equ	0xFF3
  5389                           postinc0	equ	0xFEE
  5390                           wreg	equ	0xFE8
  5391                           indf1	equ	0xFE7
  5392                           postdec1	equ	0xFE5
  5393                           fsr1h	equ	0xFE2
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function ___llmod *****************
  5403 ;; Defined at:
  5404 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  dividend        4   39[COMRAM] unsigned long 
  5407 ;;  divisor         4   43[COMRAM] unsigned long 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  counter         1   47[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  4   39[COMRAM] unsigned long 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5419 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;Total ram usage:        9 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    2
  5426 ;; This function calls:
  5427 ;;		Nothing
  5428 ;; This function is called by:
  5429 ;;		_sprintf
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text9
  5434  0029CC                     __ptext9:
  5435                           	opt stack 0
  5436  0029CC                     ___llmod:
  5437                           	opt stack 27
  5438                           
  5439                           ;incstack = 0
  5440  0029CC  502C               	movf	___llmod@divisor,w,c
  5441  0029CE  102D               	iorwf	___llmod@divisor+1,w,c
  5442  0029D0  102E               	iorwf	___llmod@divisor+2,w,c
  5443  0029D2  102F               	iorwf	___llmod@divisor+3,w,c
  5444  0029D4  B4D8               	btfsc	status,2,c
  5445  0029D6  D024               	goto	l851
  5446  0029D8  0E01               	movlw	1
  5447  0029DA  6E30               	movwf	___llmod@counter,c
  5448  0029DC  D006               	goto	l846
  5449  0029DE  90D8               	bcf	status,0,c
  5450  0029E0  362C               	rlcf	___llmod@divisor,f,c
  5451  0029E2  362D               	rlcf	___llmod@divisor+1,f,c
  5452  0029E4  362E               	rlcf	___llmod@divisor+2,f,c
  5453  0029E6  362F               	rlcf	___llmod@divisor+3,f,c
  5454  0029E8  2A30               	incf	___llmod@counter,f,c
  5455  0029EA                     l846:
  5456  0029EA  AE2F               	btfss	___llmod@divisor+3,7,c
  5457  0029EC  D7F8               	goto	l847
  5458  0029EE                     u6230:
  5459  0029EE  502C               	movf	___llmod@divisor,w,c
  5460  0029F0  5C28               	subwf	___llmod@dividend,w,c
  5461  0029F2  502D               	movf	___llmod@divisor+1,w,c
  5462  0029F4  5829               	subwfb	___llmod@dividend+1,w,c
  5463  0029F6  502E               	movf	___llmod@divisor+2,w,c
  5464  0029F8  582A               	subwfb	___llmod@dividend+2,w,c
  5465  0029FA  502F               	movf	___llmod@divisor+3,w,c
  5466  0029FC  582B               	subwfb	___llmod@dividend+3,w,c
  5467  0029FE  A0D8               	btfss	status,0,c
  5468  002A00  D008               	goto	l850
  5469  002A02  502C               	movf	___llmod@divisor,w,c
  5470  002A04  5E28               	subwf	___llmod@dividend,f,c
  5471  002A06  502D               	movf	___llmod@divisor+1,w,c
  5472  002A08  5A29               	subwfb	___llmod@dividend+1,f,c
  5473  002A0A  502E               	movf	___llmod@divisor+2,w,c
  5474  002A0C  5A2A               	subwfb	___llmod@dividend+2,f,c
  5475  002A0E  502F               	movf	___llmod@divisor+3,w,c
  5476  002A10  5A2B               	subwfb	___llmod@dividend+3,f,c
  5477  002A12                     l850:
  5478  002A12  90D8               	bcf	status,0,c
  5479  002A14  322F               	rrcf	___llmod@divisor+3,f,c
  5480  002A16  322E               	rrcf	___llmod@divisor+2,f,c
  5481  002A18  322D               	rrcf	___llmod@divisor+1,f,c
  5482  002A1A  322C               	rrcf	___llmod@divisor,f,c
  5483  002A1C  2E30               	decfsz	___llmod@counter,f,c
  5484  002A1E  D7E7               	goto	u6230
  5485  002A20                     l851:
  5486  002A20  C028  F028         	movff	___llmod@dividend,?___llmod
  5487  002A24  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  5488  002A28  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  5489  002A2C  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  5490  002A30  0012               	return		;funcret
  5491  002A32                     __end_of___llmod:
  5492                           	opt stack 0
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           postinc0	equ	0xFEE
  5500                           wreg	equ	0xFE8
  5501                           indf1	equ	0xFE7
  5502                           postdec1	equ	0xFE5
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function ___lldiv *****************
  5513 ;; Defined at:
  5514 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  dividend        4   26[COMRAM] unsigned long 
  5517 ;;  divisor         4   30[COMRAM] unsigned long 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  quotient        4   34[COMRAM] unsigned long 
  5520 ;;  counter         1   38[COMRAM] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  4   26[COMRAM] unsigned long 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5530 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;Total ram usage:       13 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    2
  5537 ;; This function calls:
  5538 ;;		Nothing
  5539 ;; This function is called by:
  5540 ;;		_sprintf
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           	psect	text10
  5545  00286A                     __ptext10:
  5546                           	opt stack 0
  5547  00286A                     ___lldiv:
  5548                           	opt stack 27
  5549                           
  5550                           ;incstack = 0
  5551  00286A  0E00               	movlw	0
  5552  00286C  6E23               	movwf	___lldiv@quotient,c
  5553  00286E  0E00               	movlw	0
  5554  002870  6E24               	movwf	___lldiv@quotient+1,c
  5555  002872  0E00               	movlw	0
  5556  002874  6E25               	movwf	___lldiv@quotient+2,c
  5557  002876  0E00               	movlw	0
  5558  002878  6E26               	movwf	___lldiv@quotient+3,c
  5559  00287A  501F               	movf	___lldiv@divisor,w,c
  5560  00287C  1020               	iorwf	___lldiv@divisor+1,w,c
  5561  00287E  1021               	iorwf	___lldiv@divisor+2,w,c
  5562  002880  1022               	iorwf	___lldiv@divisor+3,w,c
  5563  002882  B4D8               	btfsc	status,2,c
  5564  002884  D02A               	goto	l841
  5565  002886  0E01               	movlw	1
  5566  002888  6E27               	movwf	___lldiv@counter,c
  5567  00288A  D006               	goto	l836
  5568  00288C  90D8               	bcf	status,0,c
  5569  00288E  361F               	rlcf	___lldiv@divisor,f,c
  5570  002890  3620               	rlcf	___lldiv@divisor+1,f,c
  5571  002892  3621               	rlcf	___lldiv@divisor+2,f,c
  5572  002894  3622               	rlcf	___lldiv@divisor+3,f,c
  5573  002896  2A27               	incf	___lldiv@counter,f,c
  5574  002898                     l836:
  5575  002898  AE22               	btfss	___lldiv@divisor+3,7,c
  5576  00289A  D7F8               	goto	l837
  5577  00289C                     u6200:
  5578  00289C  90D8               	bcf	status,0,c
  5579  00289E  3623               	rlcf	___lldiv@quotient,f,c
  5580  0028A0  3624               	rlcf	___lldiv@quotient+1,f,c
  5581  0028A2  3625               	rlcf	___lldiv@quotient+2,f,c
  5582  0028A4  3626               	rlcf	___lldiv@quotient+3,f,c
  5583  0028A6  501F               	movf	___lldiv@divisor,w,c
  5584  0028A8  5C1B               	subwf	___lldiv@dividend,w,c
  5585  0028AA  5020               	movf	___lldiv@divisor+1,w,c
  5586  0028AC  581C               	subwfb	___lldiv@dividend+1,w,c
  5587  0028AE  5021               	movf	___lldiv@divisor+2,w,c
  5588  0028B0  581D               	subwfb	___lldiv@dividend+2,w,c
  5589  0028B2  5022               	movf	___lldiv@divisor+3,w,c
  5590  0028B4  581E               	subwfb	___lldiv@dividend+3,w,c
  5591  0028B6  A0D8               	btfss	status,0,c
  5592  0028B8  D009               	goto	l840
  5593  0028BA  501F               	movf	___lldiv@divisor,w,c
  5594  0028BC  5E1B               	subwf	___lldiv@dividend,f,c
  5595  0028BE  5020               	movf	___lldiv@divisor+1,w,c
  5596  0028C0  5A1C               	subwfb	___lldiv@dividend+1,f,c
  5597  0028C2  5021               	movf	___lldiv@divisor+2,w,c
  5598  0028C4  5A1D               	subwfb	___lldiv@dividend+2,f,c
  5599  0028C6  5022               	movf	___lldiv@divisor+3,w,c
  5600  0028C8  5A1E               	subwfb	___lldiv@dividend+3,f,c
  5601  0028CA  8023               	bsf	___lldiv@quotient,0,c
  5602  0028CC                     l840:
  5603  0028CC  90D8               	bcf	status,0,c
  5604  0028CE  3222               	rrcf	___lldiv@divisor+3,f,c
  5605  0028D0  3221               	rrcf	___lldiv@divisor+2,f,c
  5606  0028D2  3220               	rrcf	___lldiv@divisor+1,f,c
  5607  0028D4  321F               	rrcf	___lldiv@divisor,f,c
  5608  0028D6  2E27               	decfsz	___lldiv@counter,f,c
  5609  0028D8  D7E1               	goto	u6200
  5610  0028DA                     l841:
  5611  0028DA  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  5612  0028DE  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  5613  0028E2  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  5614  0028E6  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  5615  0028EA  0012               	return		;funcret
  5616  0028EC                     __end_of___lldiv:
  5617                           	opt stack 0
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           postinc0	equ	0xFEE
  5625                           wreg	equ	0xFE8
  5626                           indf1	equ	0xFE7
  5627                           postdec1	equ	0xFE5
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function ___flsub *****************
  5638 ;; Defined at:
  5639 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  b               4    8[BANK0 ] unsigned long 
  5642 ;;  a               4   12[BANK0 ] unsigned long 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  4    8[BANK0 ] unsigned long 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        8 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    3
  5661 ;; This function calls:
  5662 ;;		___fladd
  5663 ;; This function is called by:
  5664 ;;		_sprintf
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text11
  5669  002BDC                     __ptext11:
  5670                           	opt stack 0
  5671  002BDC                     ___flsub:
  5672                           	opt stack 26
  5673                           
  5674                           ;incstack = 0
  5675  002BDC  0E00               	movlw	0
  5676  002BDE  0100               	movlb	0	; () banked
  5677  002BE0  1B8C               	xorwf	___flsub@a& (0+255),f,b
  5678  002BE2  0E00               	movlw	0
  5679  002BE4  1B8D               	xorwf	(___flsub@a+1)& (0+255),f,b
  5680  002BE6  0E00               	movlw	0
  5681  002BE8  1B8E               	xorwf	(___flsub@a+2)& (0+255),f,b
  5682  002BEA  0E80               	movlw	128
  5683  002BEC  1B8F               	xorwf	(___flsub@a+3)& (0+255),f,b
  5684                           
  5685                           ; BSR set to: 0
  5686  002BEE  C088  F04F         	movff	___flsub@b,___fladd@b
  5687  002BF2  C089  F050         	movff	___flsub@b+1,___fladd@b+1
  5688  002BF6  C08A  F051         	movff	___flsub@b+2,___fladd@b+2
  5689  002BFA  C08B  F052         	movff	___flsub@b+3,___fladd@b+3
  5690  002BFE  C08C  F053         	movff	___flsub@a,___fladd@a
  5691  002C02  C08D  F054         	movff	___flsub@a+1,___fladd@a+1
  5692  002C06  C08E  F055         	movff	___flsub@a+2,___fladd@a+2
  5693  002C0A  C08F  F056         	movff	___flsub@a+3,___fladd@a+3
  5694  002C0E  ECBD  F00B         	call	___fladd	;wreg free
  5695  002C12  C04F  F088         	movff	?___fladd,?___flsub
  5696  002C16  C050  F089         	movff	?___fladd+1,?___flsub+1
  5697  002C1A  C051  F08A         	movff	?___fladd+2,?___flsub+2
  5698  002C1E  C052  F08B         	movff	?___fladd+3,?___flsub+3
  5699  002C22  0012               	return	
  5700  002C24                     __end_of___flsub:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           indf1	equ	0xFE7
  5711                           postdec1	equ	0xFE5
  5712                           fsr1h	equ	0xFE2
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function ___flneg *****************
  5722 ;; Defined at:
  5723 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  f1              4   46[COMRAM] unsigned long 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  4   46[COMRAM] unsigned long 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        4 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    2
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_main
  5748 ;;		_sprintf
  5749 ;;		_set_pwm1_general
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text12
  5754  002D28                     __ptext12:
  5755                           	opt stack 0
  5756  002D28                     ___flneg:
  5757                           	opt stack 27
  5758                           
  5759                           ;incstack = 0
  5760  002D28  502F               	movf	___flneg@f1,w,c
  5761  002D2A  1030               	iorwf	___flneg@f1+1,w,c
  5762  002D2C  1031               	iorwf	___flneg@f1+2,w,c
  5763  002D2E  1032               	iorwf	___flneg@f1+3,w,c
  5764  002D30  B4D8               	btfsc	status,2,c
  5765  002D32  D008               	goto	l670
  5766  002D34  0E00               	movlw	0
  5767  002D36  1A2F               	xorwf	___flneg@f1,f,c
  5768  002D38  0E00               	movlw	0
  5769  002D3A  1A30               	xorwf	___flneg@f1+1,f,c
  5770  002D3C  0E00               	movlw	0
  5771  002D3E  1A31               	xorwf	___flneg@f1+2,f,c
  5772  002D40  0E80               	movlw	128
  5773  002D42  1A32               	xorwf	___flneg@f1+3,f,c
  5774  002D44                     l670:
  5775  002D44  C02F  F02F         	movff	___flneg@f1,?___flneg
  5776  002D48  C030  F030         	movff	___flneg@f1+1,?___flneg+1
  5777  002D4C  C031  F031         	movff	___flneg@f1+2,?___flneg+2
  5778  002D50  C032  F032         	movff	___flneg@f1+3,?___flneg+3
  5779  002D54  0012               	return	
  5780  002D56                     __end_of___flneg:
  5781                           	opt stack 0
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodh	equ	0xFF4
  5787                           prodl	equ	0xFF3
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           indf1	equ	0xFE7
  5791                           postdec1	equ	0xFE5
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801 ;; *************** function ___flge *****************
  5802 ;; Defined at:
  5803 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  ff1             4    8[BANK0 ] unsigned long 
  5806 ;;  ff2             4   12[BANK0 ] unsigned long 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;		None               void
  5811 ;; Registers used:
  5812 ;;		wreg, status,2, status,0
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5818 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;Total ram usage:       12 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    2
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_main
  5829 ;;		_sprintf
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text13
  5834  0023A6                     __ptext13:
  5835                           	opt stack 0
  5836  0023A6                     ___flge:
  5837                           	opt stack 27
  5838                           
  5839                           ;incstack = 0
  5840  0023A6  0E00               	movlw	0
  5841  0023A8  0100               	movlb	0	; () banked
  5842  0023AA  1588               	andwf	___flge@ff1& (0+255),w,b
  5843  0023AC  6F90               	movwf	??___flge& (0+255),b
  5844  0023AE  0E00               	movlw	0
  5845  0023B0  1589               	andwf	(___flge@ff1+1)& (0+255),w,b
  5846  0023B2  6F91               	movwf	(??___flge+1)& (0+255),b
  5847  0023B4  0E80               	movlw	128
  5848  0023B6  158A               	andwf	(___flge@ff1+2)& (0+255),w,b
  5849  0023B8  6F92               	movwf	(??___flge+2)& (0+255),b
  5850  0023BA  0E7F               	movlw	127
  5851  0023BC  158B               	andwf	(___flge@ff1+3)& (0+255),w,b
  5852  0023BE  6F93               	movwf	(??___flge+3)& (0+255),b
  5853  0023C0  5190               	movf	??___flge& (0+255),w,b
  5854  0023C2  1191               	iorwf	(??___flge+1)& (0+255),w,b
  5855  0023C4  1192               	iorwf	(??___flge+2)& (0+255),w,b
  5856  0023C6  1193               	iorwf	(??___flge+3)& (0+255),w,b
  5857  0023C8  A4D8               	btfss	status,2,c
  5858  0023CA  D008               	goto	l663
  5859                           
  5860                           ; BSR set to: 0
  5861  0023CC  0E00               	movlw	0
  5862  0023CE  6F88               	movwf	___flge@ff1& (0+255),b
  5863  0023D0  0E00               	movlw	0
  5864  0023D2  6F89               	movwf	(___flge@ff1+1)& (0+255),b
  5865  0023D4  0E00               	movlw	0
  5866  0023D6  6F8A               	movwf	(___flge@ff1+2)& (0+255),b
  5867  0023D8  0E00               	movlw	0
  5868  0023DA  6F8B               	movwf	(___flge@ff1+3)& (0+255),b
  5869  0023DC                     l663:
  5870                           
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874  0023DC  0E00               	movlw	0
  5875  0023DE  158C               	andwf	___flge@ff2& (0+255),w,b
  5876  0023E0  6F90               	movwf	??___flge& (0+255),b
  5877  0023E2  0E00               	movlw	0
  5878  0023E4  158D               	andwf	(___flge@ff2+1)& (0+255),w,b
  5879  0023E6  6F91               	movwf	(??___flge+1)& (0+255),b
  5880  0023E8  0E80               	movlw	128
  5881  0023EA  158E               	andwf	(___flge@ff2+2)& (0+255),w,b
  5882  0023EC  6F92               	movwf	(??___flge+2)& (0+255),b
  5883  0023EE  0E7F               	movlw	127
  5884  0023F0  158F               	andwf	(___flge@ff2+3)& (0+255),w,b
  5885  0023F2  6F93               	movwf	(??___flge+3)& (0+255),b
  5886  0023F4  5190               	movf	??___flge& (0+255),w,b
  5887  0023F6  1191               	iorwf	(??___flge+1)& (0+255),w,b
  5888  0023F8  1192               	iorwf	(??___flge+2)& (0+255),w,b
  5889  0023FA  1193               	iorwf	(??___flge+3)& (0+255),w,b
  5890  0023FC  A4D8               	btfss	status,2,c
  5891  0023FE  D008               	goto	l664
  5892                           
  5893                           ; BSR set to: 0
  5894  002400  0E00               	movlw	0
  5895  002402  6F8C               	movwf	___flge@ff2& (0+255),b
  5896  002404  0E00               	movlw	0
  5897  002406  6F8D               	movwf	(___flge@ff2+1)& (0+255),b
  5898  002408  0E00               	movlw	0
  5899  00240A  6F8E               	movwf	(___flge@ff2+2)& (0+255),b
  5900  00240C  0E00               	movlw	0
  5901  00240E  6F8F               	movwf	(___flge@ff2+3)& (0+255),b
  5902  002410                     l664:
  5903                           
  5904                           ; BSR set to: 0
  5905                           
  5906                           ; BSR set to: 0
  5907  002410  AF8B               	btfss	(___flge@ff1+3)& (0+255),7,b
  5908  002412  D01D               	goto	l665
  5909                           
  5910                           ; BSR set to: 0
  5911  002414  C088  F090         	movff	___flge@ff1,??___flge
  5912  002418  C089  F091         	movff	___flge@ff1+1,??___flge+1
  5913  00241C  C08A  F092         	movff	___flge@ff1+2,??___flge+2
  5914  002420  C08B  F093         	movff	___flge@ff1+3,??___flge+3
  5915  002424  1F90               	comf	??___flge& (0+255),f,b
  5916  002426  1F91               	comf	(??___flge+1)& (0+255),f,b
  5917  002428  1F92               	comf	(??___flge+2)& (0+255),f,b
  5918  00242A  1F93               	comf	(??___flge+3)& (0+255),f,b
  5919  00242C  2B90               	incf	??___flge& (0+255),f,b
  5920  00242E  0E00               	movlw	0
  5921  002430  2391               	addwfc	(??___flge+1)& (0+255),f,b
  5922  002432  2392               	addwfc	(??___flge+2)& (0+255),f,b
  5923  002434  2393               	addwfc	(??___flge+3)& (0+255),f,b
  5924  002436  0E00               	movlw	0
  5925  002438  2590               	addwf	??___flge& (0+255),w,b
  5926  00243A  6F88               	movwf	___flge@ff1& (0+255),b
  5927  00243C  0E00               	movlw	0
  5928  00243E  2191               	addwfc	(??___flge+1)& (0+255),w,b
  5929  002440  6F89               	movwf	(___flge@ff1+1)& (0+255),b
  5930  002442  0E00               	movlw	0
  5931  002444  2192               	addwfc	(??___flge+2)& (0+255),w,b
  5932  002446  6F8A               	movwf	(___flge@ff1+2)& (0+255),b
  5933  002448  0E80               	movlw	128
  5934  00244A  2193               	addwfc	(??___flge+3)& (0+255),w,b
  5935  00244C  6F8B               	movwf	(___flge@ff1+3)& (0+255),b
  5936  00244E                     l665:
  5937                           
  5938                           ; BSR set to: 0
  5939                           
  5940                           ; BSR set to: 0
  5941  00244E  AF8F               	btfss	(___flge@ff2+3)& (0+255),7,b
  5942  002450  D01D               	goto	l666
  5943                           
  5944                           ; BSR set to: 0
  5945  002452  C08C  F090         	movff	___flge@ff2,??___flge
  5946  002456  C08D  F091         	movff	___flge@ff2+1,??___flge+1
  5947  00245A  C08E  F092         	movff	___flge@ff2+2,??___flge+2
  5948  00245E  C08F  F093         	movff	___flge@ff2+3,??___flge+3
  5949  002462  1F90               	comf	??___flge& (0+255),f,b
  5950  002464  1F91               	comf	(??___flge+1)& (0+255),f,b
  5951  002466  1F92               	comf	(??___flge+2)& (0+255),f,b
  5952  002468  1F93               	comf	(??___flge+3)& (0+255),f,b
  5953  00246A  2B90               	incf	??___flge& (0+255),f,b
  5954  00246C  0E00               	movlw	0
  5955  00246E  2391               	addwfc	(??___flge+1)& (0+255),f,b
  5956  002470  2392               	addwfc	(??___flge+2)& (0+255),f,b
  5957  002472  2393               	addwfc	(??___flge+3)& (0+255),f,b
  5958  002474  0E00               	movlw	0
  5959  002476  2590               	addwf	??___flge& (0+255),w,b
  5960  002478  6F8C               	movwf	___flge@ff2& (0+255),b
  5961  00247A  0E00               	movlw	0
  5962  00247C  2191               	addwfc	(??___flge+1)& (0+255),w,b
  5963  00247E  6F8D               	movwf	(___flge@ff2+1)& (0+255),b
  5964  002480  0E00               	movlw	0
  5965  002482  2192               	addwfc	(??___flge+2)& (0+255),w,b
  5966  002484  6F8E               	movwf	(___flge@ff2+2)& (0+255),b
  5967  002486  0E80               	movlw	128
  5968  002488  2193               	addwfc	(??___flge+3)& (0+255),w,b
  5969  00248A  6F8F               	movwf	(___flge@ff2+3)& (0+255),b
  5970  00248C                     l666:
  5971                           
  5972                           ; BSR set to: 0
  5973  00248C  0E00               	movlw	0
  5974  00248E  1B88               	xorwf	___flge@ff1& (0+255),f,b
  5975  002490  0E00               	movlw	0
  5976  002492  1B89               	xorwf	(___flge@ff1+1)& (0+255),f,b
  5977  002494  0E00               	movlw	0
  5978  002496  1B8A               	xorwf	(___flge@ff1+2)& (0+255),f,b
  5979  002498  0E80               	movlw	128
  5980  00249A  1B8B               	xorwf	(___flge@ff1+3)& (0+255),f,b
  5981  00249C  0E00               	movlw	0
  5982  00249E  1B8C               	xorwf	___flge@ff2& (0+255),f,b
  5983  0024A0  0E00               	movlw	0
  5984  0024A2  1B8D               	xorwf	(___flge@ff2+1)& (0+255),f,b
  5985  0024A4  0E00               	movlw	0
  5986  0024A6  1B8E               	xorwf	(___flge@ff2+2)& (0+255),f,b
  5987  0024A8  0E80               	movlw	128
  5988  0024AA  1B8F               	xorwf	(___flge@ff2+3)& (0+255),f,b
  5989  0024AC  518C               	movf	___flge@ff2& (0+255),w,b
  5990  0024AE  5D88               	subwf	___flge@ff1& (0+255),w,b
  5991  0024B0  518D               	movf	(___flge@ff2+1)& (0+255),w,b
  5992  0024B2  5989               	subwfb	(___flge@ff1+1)& (0+255),w,b
  5993  0024B4  518E               	movf	(___flge@ff2+2)& (0+255),w,b
  5994  0024B6  598A               	subwfb	(___flge@ff1+2)& (0+255),w,b
  5995  0024B8  518F               	movf	(___flge@ff2+3)& (0+255),w,b
  5996  0024BA  598B               	subwfb	(___flge@ff1+3)& (0+255),w,b
  5997  0024BC  B0D8               	btfsc	status,0,c
  5998  0024BE  D002               	goto	l4541
  5999                           
  6000                           ; BSR set to: 0
  6001  0024C0  90D8               	bcf	status,0,c
  6002  0024C2  0012               	return	
  6003  0024C4                     l4541:
  6004                           
  6005                           ; BSR set to: 0
  6006                           
  6007                           ; BSR set to: 0
  6008  0024C4  80D8               	bsf	status,0,c
  6009                           
  6010                           ; BSR set to: 0
  6011  0024C6  0012               	return	
  6012  0024C8                     __end_of___flge:
  6013                           	opt stack 0
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           postinc0	equ	0xFEE
  6021                           wreg	equ	0xFE8
  6022                           indf1	equ	0xFE7
  6023                           postdec1	equ	0xFE5
  6024                           fsr1h	equ	0xFE2
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _setupSerial *****************
  6034 ;; Defined at:
  6035 ;;		line 3 in file "my_ser.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  dummy           1   26[COMRAM] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;Total ram usage:        1 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    2
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		_main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text14
  6064  002DFE                     __ptext14:
  6065                           	opt stack 0
  6066  002DFE                     _setupSerial:
  6067                           	opt stack 28
  6068                           
  6069                           ;my_ser.c: 4: unsigned char dummy;
  6070                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;incstack = 0
  6074  002DFE  96B8               	bcf	4024,3,c	;volatile
  6075                           
  6076                           ;my_ser.c: 6: TXSTA = 0;
  6077  002E00  0E00               	movlw	0
  6078  002E02  6EAC               	movwf	4012,c	;volatile
  6079                           
  6080                           ;my_ser.c: 7: SPBRG = 25;
  6081  002E04  0E19               	movlw	25
  6082  002E06  6EAF               	movwf	4015,c	;volatile
  6083                           
  6084                           ;my_ser.c: 8: SPBRGH = 0;
  6085  002E08  0E00               	movlw	0
  6086  002E0A  6EB0               	movwf	4016,c	;volatile
  6087                           
  6088                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  6089  002E0C  84AC               	bsf	4012,2,c	;volatile
  6090                           
  6091                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  6092  002E0E  8AAC               	bsf	4012,5,c	;volatile
  6093                           
  6094                           ;my_ser.c: 12: RCSTA = 0;
  6095  002E10  0E00               	movlw	0
  6096  002E12  6EAB               	movwf	4011,c	;volatile
  6097                           
  6098                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  6099  002E14  88AB               	bsf	4011,4,c	;volatile
  6100                           
  6101                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  6102  002E16  8EAB               	bsf	4011,7,c	;volatile
  6103                           
  6104                           ;my_ser.c: 15: ;
  6105                           ;my_ser.c: 16: dummy = RCREG;
  6106  002E18  CFAE F01B          	movff	4014,setupSerial@dummy	;volatile
  6107                           
  6108                           ;my_ser.c: 17: dummy = RCREG;
  6109  002E1C  CFAE F01B          	movff	4014,setupSerial@dummy	;volatile
  6110  002E20  0012               	return	
  6111  002E22                     __end_of_setupSerial:
  6112                           	opt stack 0
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           prodh	equ	0xFF4
  6118                           prodl	equ	0xFF3
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           indf1	equ	0xFE7
  6122                           postdec1	equ	0xFE5
  6123                           fsr1h	equ	0xFE2
  6124                           fsr1l	equ	0xFE1
  6125                           indf2	equ	0xFDF
  6126                           postinc2	equ	0xFDE
  6127                           postdec2	equ	0xFDD
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _setupPorts *****************
  6133 ;; Defined at:
  6134 ;;		line 84 in file "pwm_asl.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;		None
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      void 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;Total ram usage:        0 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    2
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_main
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text15
  6163  002E62                     __ptext15:
  6164                           	opt stack 0
  6165  002E62                     _setupPorts:
  6166                           	opt stack 28
  6167                           
  6168                           ;pwm_asl.c: 85: ADCON0 = 0;
  6169                           
  6170                           ;incstack = 0
  6171  002E62  0E00               	movlw	0
  6172  002E64  6EC2               	movwf	4034,c	;volatile
  6173                           
  6174                           ;pwm_asl.c: 86: ADCON1 = 0b00001100;
  6175  002E66  0E0C               	movlw	12
  6176  002E68  6EC1               	movwf	4033,c	;volatile
  6177                           
  6178                           ;pwm_asl.c: 88: TRISB = 0xFF;
  6179  002E6A  6893               	setf	3987,c	;volatile
  6180                           
  6181                           ;pwm_asl.c: 89: TRISC = 0x80;
  6182  002E6C  0E80               	movlw	128
  6183  002E6E  6E94               	movwf	3988,c	;volatile
  6184                           
  6185                           ;pwm_asl.c: 90: TRISA = 0xFF;
  6186  002E70  6892               	setf	3986,c	;volatile
  6187                           
  6188                           ;pwm_asl.c: 91: TRISD = 0x00;
  6189  002E72  0E00               	movlw	0
  6190  002E74  6E95               	movwf	3989,c	;volatile
  6191                           
  6192                           ;pwm_asl.c: 92: TRISE = 0x00;
  6193  002E76  0E00               	movlw	0
  6194  002E78  6E96               	movwf	3990,c	;volatile
  6195  002E7A  0012               	return		;funcret
  6196  002E7C                     __end_of_setupPorts:
  6197                           	opt stack 0
  6198                           tblptru	equ	0xFF8
  6199                           tblptrh	equ	0xFF7
  6200                           tblptrl	equ	0xFF6
  6201                           tablat	equ	0xFF5
  6202                           prodh	equ	0xFF4
  6203                           prodl	equ	0xFF3
  6204                           postinc0	equ	0xFEE
  6205                           wreg	equ	0xFE8
  6206                           indf1	equ	0xFE7
  6207                           postdec1	equ	0xFE5
  6208                           fsr1h	equ	0xFE2
  6209                           fsr1l	equ	0xFE1
  6210                           indf2	equ	0xFDF
  6211                           postinc2	equ	0xFDE
  6212                           postdec2	equ	0xFDD
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _set_pwm1_percent *****************
  6218 ;; Defined at:
  6219 ;;		line 22 in file "my_pwm.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  value           4   18[BANK0 ] float 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  tmp             4   22[BANK0 ] float 
  6224 ;;  raw_val         2   26[BANK0 ] int 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:       10 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    3
  6241 ;; This function calls:
  6242 ;;		___fladd
  6243 ;;		___fldiv
  6244 ;;		___flmul
  6245 ;;		___fltol
  6246 ;;		_set_pwm1_raw
  6247 ;; This function is called by:
  6248 ;;		_main
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text16
  6253  0026A6                     __ptext16:
  6254                           	opt stack 0
  6255  0026A6                     _set_pwm1_percent:
  6256                           	opt stack 27
  6257                           
  6258                           ;my_pwm.c: 24: float tmp = value*1023.0/100.0;
  6259                           
  6260                           ;incstack = 0
  6261  0026A6  0E00               	movlw	0
  6262  0026A8  6E2D               	movwf	___flmul@a,c
  6263  0026AA  0EC0               	movlw	192
  6264  0026AC  6E2E               	movwf	___flmul@a+1,c
  6265  0026AE  0E7F               	movlw	127
  6266  0026B0  6E2F               	movwf	___flmul@a+2,c
  6267  0026B2  0E44               	movlw	68
  6268  0026B4  6E30               	movwf	___flmul@a+3,c
  6269  0026B6  C092  F029         	movff	set_pwm1_percent@value,___flmul@b
  6270  0026BA  C093  F02A         	movff	set_pwm1_percent@value+1,___flmul@b+1
  6271  0026BE  C094  F02B         	movff	set_pwm1_percent@value+2,___flmul@b+2
  6272  0026C2  C095  F02C         	movff	set_pwm1_percent@value+3,___flmul@b+3
  6273  0026C6  EC15  F00A         	call	___flmul	;wreg free
  6274  0026CA  C029  F042         	movff	?___flmul,___fldiv@b
  6275  0026CE  C02A  F043         	movff	?___flmul+1,___fldiv@b+1
  6276  0026D2  C02B  F044         	movff	?___flmul+2,___fldiv@b+2
  6277  0026D6  C02C  F045         	movff	?___flmul+3,___fldiv@b+3
  6278  0026DA  0E00               	movlw	0
  6279  0026DC  6E46               	movwf	___fldiv@a,c
  6280  0026DE  0E00               	movlw	0
  6281  0026E0  6E47               	movwf	___fldiv@a+1,c
  6282  0026E2  0EC8               	movlw	200
  6283  0026E4  6E48               	movwf	___fldiv@a+2,c
  6284  0026E6  0E42               	movlw	66
  6285  0026E8  6E49               	movwf	___fldiv@a+3,c
  6286  0026EA  EC5F  F00D         	call	___fldiv	;wreg free
  6287  0026EE  C042  F096         	movff	?___fldiv,set_pwm1_percent@tmp
  6288  0026F2  C043  F097         	movff	?___fldiv+1,set_pwm1_percent@tmp+1
  6289  0026F6  C044  F098         	movff	?___fldiv+2,set_pwm1_percent@tmp+2
  6290  0026FA  C045  F099         	movff	?___fldiv+3,set_pwm1_percent@tmp+3
  6291                           
  6292                           ;my_pwm.c: 25: int raw_val = (int)(tmp +0.5);
  6293  0026FE  0E00               	movlw	0
  6294  002700  6E53               	movwf	___fladd@a,c
  6295  002702  0E00               	movlw	0
  6296  002704  6E54               	movwf	___fladd@a+1,c
  6297  002706  0E00               	movlw	0
  6298  002708  6E55               	movwf	___fladd@a+2,c
  6299  00270A  0E3F               	movlw	63
  6300  00270C  6E56               	movwf	___fladd@a+3,c
  6301  00270E  C096  F04F         	movff	set_pwm1_percent@tmp,___fladd@b
  6302  002712  C097  F050         	movff	set_pwm1_percent@tmp+1,___fladd@b+1
  6303  002716  C098  F051         	movff	set_pwm1_percent@tmp+2,___fladd@b+2
  6304  00271A  C099  F052         	movff	set_pwm1_percent@tmp+3,___fladd@b+3
  6305  00271E  ECBD  F00B         	call	___fladd	;wreg free
  6306  002722  C04F  F088         	movff	?___fladd,___fltol@f1
  6307  002726  C050  F089         	movff	?___fladd+1,___fltol@f1+1
  6308  00272A  C051  F08A         	movff	?___fladd+2,___fltol@f1+2
  6309  00272E  C052  F08B         	movff	?___fladd+3,___fltol@f1+3
  6310  002732  ECE4  F012         	call	___fltol	;wreg free
  6311  002736  C088  F09A         	movff	?___fltol,set_pwm1_percent@raw_val
  6312  00273A  C089  F09B         	movff	?___fltol+1,set_pwm1_percent@raw_val+1
  6313                           
  6314                           ;my_pwm.c: 26: if ( raw_val> 1023) raw_val = 1023;
  6315  00273E  0100               	movlb	0	; () banked
  6316  002740  BF9B               	btfsc	(set_pwm1_percent@raw_val+1)& (0+255),7,b
  6317  002742  D007               	goto	l262
  6318  002744  0E04               	movlw	4
  6319  002746  5D9B               	subwf	(set_pwm1_percent@raw_val+1)& (0+255),w,b
  6320  002748  A0D8               	btfss	status,0,c
  6321  00274A  D003               	goto	l262
  6322                           
  6323                           ; BSR set to: 0
  6324  00274C  0E03               	movlw	3
  6325  00274E  6F9B               	movwf	(set_pwm1_percent@raw_val+1)& (0+255),b
  6326  002750  699A               	setf	set_pwm1_percent@raw_val& (0+255),b
  6327  002752                     l262:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;my_pwm.c: 27: set_pwm1_raw(raw_val);
  6331                           
  6332                           ; BSR set to: 0
  6333  002752  C09A  F01B         	movff	set_pwm1_percent@raw_val,set_pwm1_raw@raw_value
  6334  002756  C09B  F01C         	movff	set_pwm1_percent@raw_val+1,set_pwm1_raw@raw_value+1
  6335  00275A  ECAB  F016         	call	_set_pwm1_raw	;wreg free
  6336  00275E  0012               	return		;funcret
  6337  002760                     __end_of_set_pwm1_percent:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           indf1	equ	0xFE7
  6348                           postdec1	equ	0xFE5
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _set_pwm1_raw *****************
  6359 ;; Defined at:
  6360 ;;		line 14 in file "my_pwm.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  raw_value       2   26[COMRAM] unsigned int 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        4 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    2
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_main
  6385 ;;		_set_pwm1_percent
  6386 ;;		_set_pwm1_voltage
  6387 ;;		_set_pwm1_general
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text17
  6392  002D56                     __ptext17:
  6393                           	opt stack 0
  6394  002D56                     _set_pwm1_raw:
  6395                           	opt stack 28
  6396                           
  6397                           ;my_pwm.c: 16: CCPR1L = (raw_value >> 2) & 0x00FF;
  6398                           
  6399                           ;incstack = 0
  6400  002D56  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6401  002D5A  C01C  F01E         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  6402  002D5E  90D8               	bcf	status,0,c
  6403  002D60  321E               	rrcf	??_set_pwm1_raw+1,f,c
  6404  002D62  321D               	rrcf	??_set_pwm1_raw,f,c
  6405  002D64  90D8               	bcf	status,0,c
  6406  002D66  321E               	rrcf	??_set_pwm1_raw+1,f,c
  6407  002D68  321D               	rrcf	??_set_pwm1_raw,f,c
  6408  002D6A  501D               	movf	??_set_pwm1_raw,w,c
  6409  002D6C  6EBE               	movwf	4030,c	;volatile
  6410                           
  6411                           ;my_pwm.c: 17: CCP1CONbits.DC1B = raw_value & 0x0003;
  6412  002D6E  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6413  002D72  0E03               	movlw	3
  6414  002D74  161D               	andwf	??_set_pwm1_raw,f,c
  6415  002D76  3A1D               	swapf	??_set_pwm1_raw,f,c
  6416  002D78  50BD               	movf	4029,w,c	;volatile
  6417  002D7A  181D               	xorwf	??_set_pwm1_raw,w,c
  6418  002D7C  0BCF               	andlw	-49
  6419  002D7E  181D               	xorwf	??_set_pwm1_raw,w,c
  6420  002D80  6EBD               	movwf	4029,c	;volatile
  6421  002D82  0012               	return		;funcret
  6422  002D84                     __end_of_set_pwm1_raw:
  6423                           	opt stack 0
  6424                           tblptru	equ	0xFF8
  6425                           tblptrh	equ	0xFF7
  6426                           tblptrl	equ	0xFF6
  6427                           tablat	equ	0xFF5
  6428                           prodh	equ	0xFF4
  6429                           prodl	equ	0xFF3
  6430                           postinc0	equ	0xFEE
  6431                           wreg	equ	0xFE8
  6432                           indf1	equ	0xFE7
  6433                           postdec1	equ	0xFE5
  6434                           fsr1h	equ	0xFE2
  6435                           fsr1l	equ	0xFE1
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           postdec2	equ	0xFDD
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;; *************** function ___fltol *****************
  6444 ;; Defined at:
  6445 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  f1              4    8[BANK0 ] void 
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;  exp1            1   17[BANK0 ] unsigned char 
  6450 ;;  sign1           1   16[BANK0 ] unsigned char 
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  4    8[BANK0 ] long 
  6453 ;; Registers used:
  6454 ;;		wreg, status,2, status,0
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6460 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;Total ram usage:       10 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    2
  6467 ;; This function calls:
  6468 ;;		Nothing
  6469 ;; This function is called by:
  6470 ;;		_main
  6471 ;;		_set_pwm1_percent
  6472 ;;		_sprintf
  6473 ;;		_set_pwm1_voltage
  6474 ;;		_set_pwm1_general
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text18
  6479  0025C8                     __ptext18:
  6480                           	opt stack 0
  6481  0025C8                     ___fltol:
  6482                           	opt stack 27
  6483                           
  6484                           ;incstack = 0
  6485  0025C8  0100               	movlb	0	; () banked
  6486  0025CA  358A               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6487  0025CC  358B               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6488  0025CE  6F91               	movwf	___fltol@exp1& (0+255),b
  6489  0025D0  5191               	movf	___fltol@exp1& (0+255),w,b
  6490  0025D2  A4D8               	btfss	status,2,c
  6491  0025D4  D009               	goto	l693
  6492                           
  6493                           ; BSR set to: 0
  6494  0025D6  0E00               	movlw	0
  6495  0025D8  6F88               	movwf	?___fltol& (0+255),b
  6496  0025DA  0E00               	movlw	0
  6497  0025DC  6F89               	movwf	(?___fltol+1)& (0+255),b
  6498  0025DE  0E00               	movlw	0
  6499  0025E0  6F8A               	movwf	(?___fltol+2)& (0+255),b
  6500  0025E2  0E00               	movlw	0
  6501  0025E4  6F8B               	movwf	(?___fltol+3)& (0+255),b
  6502                           
  6503                           ; BSR set to: 0
  6504  0025E6  0012               	return	
  6505  0025E8                     l693:
  6506                           
  6507                           ; BSR set to: 0
  6508                           
  6509                           ; BSR set to: 0
  6510  0025E8  C088  F08C         	movff	___fltol@f1,??___fltol
  6511  0025EC  C089  F08D         	movff	___fltol@f1+1,??___fltol+1
  6512  0025F0  C08A  F08E         	movff	___fltol@f1+2,??___fltol+2
  6513  0025F4  C08B  F08F         	movff	___fltol@f1+3,??___fltol+3
  6514  0025F8  0E20               	movlw	32
  6515  0025FA  D005               	goto	u6130
  6516  0025FC                     u6135:
  6517  0025FC  90D8               	bcf	status,0,c
  6518  0025FE  338F               	rrcf	(??___fltol+3)& (0+255),f,b
  6519  002600  338E               	rrcf	(??___fltol+2)& (0+255),f,b
  6520  002602  338D               	rrcf	(??___fltol+1)& (0+255),f,b
  6521  002604  338C               	rrcf	??___fltol& (0+255),f,b
  6522  002606                     u6130:
  6523  002606  2EE8               	decfsz	wreg,f,c
  6524  002608  D7F9               	goto	u6135
  6525  00260A  518C               	movf	??___fltol& (0+255),w,b
  6526  00260C  6F90               	movwf	___fltol@sign1& (0+255),b
  6527                           
  6528                           ; BSR set to: 0
  6529  00260E  8F8A               	bsf	(___fltol@f1+2)& (0+255),7,b
  6530                           
  6531                           ; BSR set to: 0
  6532  002610  0EFF               	movlw	255
  6533  002612  1788               	andwf	___fltol@f1& (0+255),f,b
  6534  002614  0EFF               	movlw	255
  6535  002616  1789               	andwf	(___fltol@f1+1)& (0+255),f,b
  6536  002618  0EFF               	movlw	255
  6537  00261A  178A               	andwf	(___fltol@f1+2)& (0+255),f,b
  6538  00261C  0E00               	movlw	0
  6539  00261E  178B               	andwf	(___fltol@f1+3)& (0+255),f,b
  6540                           
  6541                           ; BSR set to: 0
  6542  002620  0E96               	movlw	150
  6543  002622  5F91               	subwf	___fltol@exp1& (0+255),f,b
  6544                           
  6545                           ; BSR set to: 0
  6546  002624  AF91               	btfss	___fltol@exp1& (0+255),7,b
  6547  002626  D016               	goto	l695
  6548                           
  6549                           ; BSR set to: 0
  6550  002628  5191               	movf	___fltol@exp1& (0+255),w,b
  6551  00262A  0A80               	xorlw	128
  6552  00262C  0F97               	addlw	151
  6553  00262E  B0D8               	btfsc	status,0,c
  6554  002630  D009               	goto	l696
  6555                           
  6556                           ; BSR set to: 0
  6557  002632  0E00               	movlw	0
  6558  002634  6F88               	movwf	?___fltol& (0+255),b
  6559  002636  0E00               	movlw	0
  6560  002638  6F89               	movwf	(?___fltol+1)& (0+255),b
  6561  00263A  0E00               	movlw	0
  6562  00263C  6F8A               	movwf	(?___fltol+2)& (0+255),b
  6563  00263E  0E00               	movlw	0
  6564  002640  6F8B               	movwf	(?___fltol+3)& (0+255),b
  6565                           
  6566                           ; BSR set to: 0
  6567  002642  0012               	return	
  6568  002644                     l696:
  6569                           
  6570                           ; BSR set to: 0
  6571                           
  6572                           ; BSR set to: 0
  6573                           
  6574                           ; BSR set to: 0
  6575  002644  90D8               	bcf	status,0,c
  6576  002646  338B               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6577  002648  338A               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6578  00264A  3389               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6579  00264C  3388               	rrcf	___fltol@f1& (0+255),f,b
  6580                           
  6581                           ; BSR set to: 0
  6582  00264E  3F91               	incfsz	___fltol@exp1& (0+255),f,b
  6583  002650  D7F9               	goto	l696
  6584                           
  6585                           ; BSR set to: 0
  6586  002652  D015               	goto	u6170
  6587  002654                     l695:
  6588                           
  6589                           ; BSR set to: 0
  6590                           
  6591                           ; BSR set to: 0
  6592  002654  0E1F               	movlw	31
  6593  002656  6591               	cpfsgt	___fltol@exp1& (0+255),b
  6594  002658  D00F               	goto	l701
  6595                           
  6596                           ; BSR set to: 0
  6597  00265A  0E00               	movlw	0
  6598  00265C  6F88               	movwf	?___fltol& (0+255),b
  6599  00265E  0E00               	movlw	0
  6600  002660  6F89               	movwf	(?___fltol+1)& (0+255),b
  6601  002662  0E00               	movlw	0
  6602  002664  6F8A               	movwf	(?___fltol+2)& (0+255),b
  6603  002666  0E00               	movlw	0
  6604  002668  6F8B               	movwf	(?___fltol+3)& (0+255),b
  6605                           
  6606                           ; BSR set to: 0
  6607  00266A  0012               	return	
  6608  00266C                     
  6609                           ; BSR set to: 0
  6610                           
  6611                           ; BSR set to: 0
  6612  00266C  90D8               	bcf	status,0,c
  6613  00266E  3788               	rlcf	___fltol@f1& (0+255),f,b
  6614  002670  3789               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6615  002672  378A               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6616  002674  378B               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6617  002676  0791               	decf	___fltol@exp1& (0+255),f,b
  6618  002678                     l701:
  6619                           
  6620                           ; BSR set to: 0
  6621                           
  6622                           ; BSR set to: 0
  6623  002678  5191               	movf	___fltol@exp1& (0+255),w,b
  6624  00267A  A4D8               	btfss	status,2,c
  6625  00267C  D7F7               	goto	l702
  6626  00267E                     u6170:
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631                           
  6632                           ; BSR set to: 0
  6633  00267E  5190               	movf	___fltol@sign1& (0+255),w,b
  6634  002680  B4D8               	btfsc	status,2,c
  6635  002682  D008               	goto	l704
  6636                           
  6637                           ; BSR set to: 0
  6638  002684  1F8B               	comf	(___fltol@f1+3)& (0+255),f,b
  6639  002686  1F8A               	comf	(___fltol@f1+2)& (0+255),f,b
  6640  002688  1F89               	comf	(___fltol@f1+1)& (0+255),f,b
  6641  00268A  6D88               	negf	___fltol@f1& (0+255),b
  6642  00268C  0E00               	movlw	0
  6643  00268E  2389               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6644  002690  238A               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6645  002692  238B               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6646  002694                     l704:
  6647                           
  6648                           ; BSR set to: 0
  6649                           
  6650                           ; BSR set to: 0
  6651  002694  C088  F088         	movff	___fltol@f1,?___fltol
  6652  002698  C089  F089         	movff	___fltol@f1+1,?___fltol+1
  6653  00269C  C08A  F08A         	movff	___fltol@f1+2,?___fltol+2
  6654  0026A0  C08B  F08B         	movff	___fltol@f1+3,?___fltol+3
  6655  0026A4  0012               	return	
  6656  0026A6                     __end_of___fltol:
  6657                           	opt stack 0
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           prodh	equ	0xFF4
  6663                           prodl	equ	0xFF3
  6664                           postinc0	equ	0xFEE
  6665                           wreg	equ	0xFE8
  6666                           indf1	equ	0xFE7
  6667                           postdec1	equ	0xFE5
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function ___flmul *****************
  6678 ;; Defined at:
  6679 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  b               4   40[COMRAM] long 
  6682 ;;  a               4   44[COMRAM] long 
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  prod            4   59[COMRAM] struct .
  6685 ;;  grs             4   54[COMRAM] unsigned long 
  6686 ;;  temp            2   63[COMRAM] struct .
  6687 ;;  bexp            1   58[COMRAM] unsigned char 
  6688 ;;  aexp            1   53[COMRAM] unsigned char 
  6689 ;;  sign            1   52[COMRAM] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  4   40[COMRAM] unsigned char 
  6692 ;; Registers used:
  6693 ;;		wreg, status,2, status,0, prodl, prodh
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6699 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;Total ram usage:       25 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    2
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_main
  6710 ;;		_set_pwm1_percent
  6711 ;;		_fround
  6712 ;;		_scale
  6713 ;;		_sprintf
  6714 ;;		_set_pwm1_voltage
  6715 ;;		_set_pwm1_general
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text19
  6720  00142A                     __ptext19:
  6721                           	opt stack 0
  6722  00142A                     ___flmul:
  6723                           	opt stack 26
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;incstack = 0
  6727  00142A  502C               	movf	___flmul@b+3,w,c
  6728  00142C  0B80               	andlw	128
  6729  00142E  6E35               	movwf	___flmul@sign,c
  6730  001430  502C               	movf	___flmul@b+3,w,c
  6731  001432  242C               	addwf	___flmul@b+3,w,c
  6732  001434  6E3B               	movwf	___flmul@bexp,c
  6733  001436  BE2B               	btfsc	___flmul@b+2,7,c
  6734  001438  803B               	bsf	___flmul@bexp,0,c
  6735  00143A  503B               	movf	___flmul@bexp,w,c
  6736  00143C  B4D8               	btfsc	status,2,c
  6737  00143E  D00D               	goto	l1009
  6738  001440  283B               	incf	___flmul@bexp,w,c
  6739  001442  A4D8               	btfss	status,2,c
  6740  001444  D008               	goto	l1010
  6741  001446  0E00               	movlw	0
  6742  001448  6E29               	movwf	___flmul@b,c
  6743  00144A  0E00               	movlw	0
  6744  00144C  6E2A               	movwf	___flmul@b+1,c
  6745  00144E  0E00               	movlw	0
  6746  001450  6E2B               	movwf	___flmul@b+2,c
  6747  001452  0E00               	movlw	0
  6748  001454  6E2C               	movwf	___flmul@b+3,c
  6749  001456                     l1010:
  6750  001456  8E2B               	bsf	___flmul@b+2,7,c
  6751  001458  D008               	goto	l1011
  6752  00145A                     l1009:
  6753  00145A  0E00               	movlw	0
  6754  00145C  6E29               	movwf	___flmul@b,c
  6755  00145E  0E00               	movlw	0
  6756  001460  6E2A               	movwf	___flmul@b+1,c
  6757  001462  0E00               	movlw	0
  6758  001464  6E2B               	movwf	___flmul@b+2,c
  6759  001466  0E00               	movlw	0
  6760  001468  6E2C               	movwf	___flmul@b+3,c
  6761  00146A                     l1011:
  6762  00146A  5030               	movf	___flmul@a+3,w,c
  6763  00146C  0B80               	andlw	128
  6764  00146E  1A35               	xorwf	___flmul@sign,f,c
  6765  001470  5030               	movf	___flmul@a+3,w,c
  6766  001472  2430               	addwf	___flmul@a+3,w,c
  6767  001474  6E36               	movwf	___flmul@aexp,c
  6768  001476  BE2F               	btfsc	___flmul@a+2,7,c
  6769  001478  8036               	bsf	___flmul@aexp,0,c
  6770  00147A  5036               	movf	___flmul@aexp,w,c
  6771  00147C  B4D8               	btfsc	status,2,c
  6772  00147E  D00D               	goto	l1013
  6773  001480  2836               	incf	___flmul@aexp,w,c
  6774  001482  A4D8               	btfss	status,2,c
  6775  001484  D008               	goto	l1014
  6776  001486  0E00               	movlw	0
  6777  001488  6E2D               	movwf	___flmul@a,c
  6778  00148A  0E00               	movlw	0
  6779  00148C  6E2E               	movwf	___flmul@a+1,c
  6780  00148E  0E00               	movlw	0
  6781  001490  6E2F               	movwf	___flmul@a+2,c
  6782  001492  0E00               	movlw	0
  6783  001494  6E30               	movwf	___flmul@a+3,c
  6784  001496                     l1014:
  6785  001496  8E2F               	bsf	___flmul@a+2,7,c
  6786  001498  D008               	goto	l1015
  6787  00149A                     l1013:
  6788  00149A  0E00               	movlw	0
  6789  00149C  6E2D               	movwf	___flmul@a,c
  6790  00149E  0E00               	movlw	0
  6791  0014A0  6E2E               	movwf	___flmul@a+1,c
  6792  0014A2  0E00               	movlw	0
  6793  0014A4  6E2F               	movwf	___flmul@a+2,c
  6794  0014A6  0E00               	movlw	0
  6795  0014A8  6E30               	movwf	___flmul@a+3,c
  6796  0014AA                     l1015:
  6797  0014AA  5036               	movf	___flmul@aexp,w,c
  6798  0014AC  B4D8               	btfsc	status,2,c
  6799  0014AE  D003               	goto	u5330
  6800  0014B0  503B               	movf	___flmul@bexp,w,c
  6801  0014B2  A4D8               	btfss	status,2,c
  6802  0014B4  D009               	goto	l1016
  6803  0014B6                     u5330:
  6804  0014B6  0E00               	movlw	0
  6805  0014B8  6E29               	movwf	?___flmul,c
  6806  0014BA  0E00               	movlw	0
  6807  0014BC  6E2A               	movwf	?___flmul+1,c
  6808  0014BE  0E00               	movlw	0
  6809  0014C0  6E2B               	movwf	?___flmul+2,c
  6810  0014C2  0E00               	movlw	0
  6811  0014C4  6E2C               	movwf	?___flmul+3,c
  6812  0014C6  0012               	return	
  6813  0014C8                     l1016:
  6814  0014C8  502F               	movf	___flmul@a+2,w,c
  6815  0014CA  0229               	mulwf	___flmul@b,c
  6816  0014CC  CFF3 F040          	movff	prodl,___flmul@temp
  6817  0014D0  CFF4 F041          	movff	prodh,___flmul@temp+1
  6818  0014D4  5040               	movf	___flmul@temp,w,c
  6819  0014D6  6E37               	movwf	___flmul@grs,c
  6820  0014D8  6A38               	clrf	___flmul@grs+1,c
  6821  0014DA  6A39               	clrf	___flmul@grs+2,c
  6822  0014DC  6A3A               	clrf	___flmul@grs+3,c
  6823  0014DE  5041               	movf	___flmul@temp+1,w,c
  6824  0014E0  6E3C               	movwf	___flmul@prod,c
  6825  0014E2  6A3D               	clrf	___flmul@prod+1,c
  6826  0014E4  6A3E               	clrf	___flmul@prod+2,c
  6827  0014E6  6A3F               	clrf	___flmul@prod+3,c
  6828  0014E8  502E               	movf	___flmul@a+1,w,c
  6829  0014EA  022A               	mulwf	___flmul@b+1,c
  6830  0014EC  CFF3 F040          	movff	prodl,___flmul@temp
  6831  0014F0  CFF4 F041          	movff	prodh,___flmul@temp+1
  6832  0014F4  5040               	movf	___flmul@temp,w,c
  6833  0014F6  2637               	addwf	___flmul@grs,f,c
  6834  0014F8  0E00               	movlw	0
  6835  0014FA  2238               	addwfc	___flmul@grs+1,f,c
  6836  0014FC  2239               	addwfc	___flmul@grs+2,f,c
  6837  0014FE  223A               	addwfc	___flmul@grs+3,f,c
  6838  001500  5041               	movf	___flmul@temp+1,w,c
  6839  001502  263C               	addwf	___flmul@prod,f,c
  6840  001504  0E00               	movlw	0
  6841  001506  223D               	addwfc	___flmul@prod+1,f,c
  6842  001508  223E               	addwfc	___flmul@prod+2,f,c
  6843  00150A  223F               	addwfc	___flmul@prod+3,f,c
  6844  00150C  502D               	movf	___flmul@a,w,c
  6845  00150E  022B               	mulwf	___flmul@b+2,c
  6846  001510  CFF3 F040          	movff	prodl,___flmul@temp
  6847  001514  CFF4 F041          	movff	prodh,___flmul@temp+1
  6848  001518  5040               	movf	___flmul@temp,w,c
  6849  00151A  2637               	addwf	___flmul@grs,f,c
  6850  00151C  0E00               	movlw	0
  6851  00151E  2238               	addwfc	___flmul@grs+1,f,c
  6852  001520  2239               	addwfc	___flmul@grs+2,f,c
  6853  001522  223A               	addwfc	___flmul@grs+3,f,c
  6854  001524  5041               	movf	___flmul@temp+1,w,c
  6855  001526  263C               	addwf	___flmul@prod,f,c
  6856  001528  0E00               	movlw	0
  6857  00152A  223D               	addwfc	___flmul@prod+1,f,c
  6858  00152C  223E               	addwfc	___flmul@prod+2,f,c
  6859  00152E  223F               	addwfc	___flmul@prod+3,f,c
  6860  001530  C039  F03A         	movff	___flmul@grs+2,___flmul@grs+3
  6861  001534  C038  F039         	movff	___flmul@grs+1,___flmul@grs+2
  6862  001538  C037  F038         	movff	___flmul@grs,___flmul@grs+1
  6863  00153C  6A37               	clrf	___flmul@grs,c
  6864  00153E  502D               	movf	___flmul@a,w,c
  6865  001540  022A               	mulwf	___flmul@b+1,c
  6866  001542  CFF3 F040          	movff	prodl,___flmul@temp
  6867  001546  CFF4 F041          	movff	prodh,___flmul@temp+1
  6868  00154A  5040               	movf	___flmul@temp,w,c
  6869  00154C  2637               	addwf	___flmul@grs,f,c
  6870  00154E  5041               	movf	___flmul@temp+1,w,c
  6871  001550  2238               	addwfc	___flmul@grs+1,f,c
  6872  001552  0E00               	movlw	0
  6873  001554  2239               	addwfc	___flmul@grs+2,f,c
  6874  001556  0E00               	movlw	0
  6875  001558  223A               	addwfc	___flmul@grs+3,f,c
  6876  00155A  502E               	movf	___flmul@a+1,w,c
  6877  00155C  0229               	mulwf	___flmul@b,c
  6878  00155E  CFF3 F040          	movff	prodl,___flmul@temp
  6879  001562  CFF4 F041          	movff	prodh,___flmul@temp+1
  6880  001566  5040               	movf	___flmul@temp,w,c
  6881  001568  2637               	addwf	___flmul@grs,f,c
  6882  00156A  5041               	movf	___flmul@temp+1,w,c
  6883  00156C  2238               	addwfc	___flmul@grs+1,f,c
  6884  00156E  0E00               	movlw	0
  6885  001570  2239               	addwfc	___flmul@grs+2,f,c
  6886  001572  0E00               	movlw	0
  6887  001574  223A               	addwfc	___flmul@grs+3,f,c
  6888  001576  C039  F03A         	movff	___flmul@grs+2,___flmul@grs+3
  6889  00157A  C038  F039         	movff	___flmul@grs+1,___flmul@grs+2
  6890  00157E  C037  F038         	movff	___flmul@grs,___flmul@grs+1
  6891  001582  6A37               	clrf	___flmul@grs,c
  6892  001584  502D               	movf	___flmul@a,w,c
  6893  001586  0229               	mulwf	___flmul@b,c
  6894  001588  CFF3 F040          	movff	prodl,___flmul@temp
  6895  00158C  CFF4 F041          	movff	prodh,___flmul@temp+1
  6896  001590  5040               	movf	___flmul@temp,w,c
  6897  001592  2637               	addwf	___flmul@grs,f,c
  6898  001594  5041               	movf	___flmul@temp+1,w,c
  6899  001596  2238               	addwfc	___flmul@grs+1,f,c
  6900  001598  0E00               	movlw	0
  6901  00159A  2239               	addwfc	___flmul@grs+2,f,c
  6902  00159C  0E00               	movlw	0
  6903  00159E  223A               	addwfc	___flmul@grs+3,f,c
  6904  0015A0  502F               	movf	___flmul@a+2,w,c
  6905  0015A2  022A               	mulwf	___flmul@b+1,c
  6906  0015A4  CFF3 F040          	movff	prodl,___flmul@temp
  6907  0015A8  CFF4 F041          	movff	prodh,___flmul@temp+1
  6908  0015AC  5040               	movf	___flmul@temp,w,c
  6909  0015AE  263C               	addwf	___flmul@prod,f,c
  6910  0015B0  5041               	movf	___flmul@temp+1,w,c
  6911  0015B2  223D               	addwfc	___flmul@prod+1,f,c
  6912  0015B4  0E00               	movlw	0
  6913  0015B6  223E               	addwfc	___flmul@prod+2,f,c
  6914  0015B8  0E00               	movlw	0
  6915  0015BA  223F               	addwfc	___flmul@prod+3,f,c
  6916  0015BC  502E               	movf	___flmul@a+1,w,c
  6917  0015BE  022B               	mulwf	___flmul@b+2,c
  6918  0015C0  CFF3 F040          	movff	prodl,___flmul@temp
  6919  0015C4  CFF4 F041          	movff	prodh,___flmul@temp+1
  6920  0015C8  5040               	movf	___flmul@temp,w,c
  6921  0015CA  263C               	addwf	___flmul@prod,f,c
  6922  0015CC  5041               	movf	___flmul@temp+1,w,c
  6923  0015CE  223D               	addwfc	___flmul@prod+1,f,c
  6924  0015D0  0E00               	movlw	0
  6925  0015D2  223E               	addwfc	___flmul@prod+2,f,c
  6926  0015D4  0E00               	movlw	0
  6927  0015D6  223F               	addwfc	___flmul@prod+3,f,c
  6928  0015D8  502F               	movf	___flmul@a+2,w,c
  6929  0015DA  022B               	mulwf	___flmul@b+2,c
  6930  0015DC  CFF3 F040          	movff	prodl,___flmul@temp
  6931  0015E0  CFF4 F041          	movff	prodh,___flmul@temp+1
  6932  0015E4  5040               	movf	___flmul@temp,w,c
  6933  0015E6  6E31               	movwf	??___flmul& (0+255),c
  6934  0015E8  5041               	movf	___flmul@temp+1,w,c
  6935  0015EA  6E32               	movwf	(??___flmul+1)& (0+255),c
  6936  0015EC  6A33               	clrf	(??___flmul+2)& (0+255),c
  6937  0015EE  6A34               	clrf	(??___flmul+3)& (0+255),c
  6938  0015F0  C033  F034         	movff	??___flmul+2,??___flmul+3
  6939  0015F4  C032  F033         	movff	??___flmul+1,??___flmul+2
  6940  0015F8  C031  F032         	movff	??___flmul,??___flmul+1
  6941  0015FC  6A31               	clrf	??___flmul,c
  6942  0015FE  5031               	movf	??___flmul,w,c
  6943  001600  263C               	addwf	___flmul@prod,f,c
  6944  001602  5032               	movf	??___flmul+1,w,c
  6945  001604  223D               	addwfc	___flmul@prod+1,f,c
  6946  001606  5033               	movf	??___flmul+2,w,c
  6947  001608  223E               	addwfc	___flmul@prod+2,f,c
  6948  00160A  5034               	movf	??___flmul+3,w,c
  6949  00160C  223F               	addwfc	___flmul@prod+3,f,c
  6950  00160E  C037  F031         	movff	___flmul@grs,??___flmul
  6951  001612  C038  F032         	movff	___flmul@grs+1,??___flmul+1
  6952  001616  C039  F033         	movff	___flmul@grs+2,??___flmul+2
  6953  00161A  C03A  F034         	movff	___flmul@grs+3,??___flmul+3
  6954  00161E  0E19               	movlw	25
  6955  001620  D005               	goto	u5340
  6956  001622                     u5345:
  6957  001622  90D8               	bcf	status,0,c
  6958  001624  3234               	rrcf	??___flmul+3,f,c
  6959  001626  3233               	rrcf	??___flmul+2,f,c
  6960  001628  3232               	rrcf	??___flmul+1,f,c
  6961  00162A  3231               	rrcf	??___flmul,f,c
  6962  00162C                     u5340:
  6963  00162C  2EE8               	decfsz	wreg,f,c
  6964  00162E  D7F9               	goto	u5345
  6965  001630  5031               	movf	??___flmul,w,c
  6966  001632  263C               	addwf	___flmul@prod,f,c
  6967  001634  5032               	movf	??___flmul+1,w,c
  6968  001636  223D               	addwfc	___flmul@prod+1,f,c
  6969  001638  5033               	movf	??___flmul+2,w,c
  6970  00163A  223E               	addwfc	___flmul@prod+2,f,c
  6971  00163C  5034               	movf	??___flmul+3,w,c
  6972  00163E  223F               	addwfc	___flmul@prod+3,f,c
  6973  001640  C039  F03A         	movff	___flmul@grs+2,___flmul@grs+3
  6974  001644  C038  F039         	movff	___flmul@grs+1,___flmul@grs+2
  6975  001648  C037  F038         	movff	___flmul@grs,___flmul@grs+1
  6976  00164C  6A37               	clrf	___flmul@grs,c
  6977  00164E  5036               	movf	___flmul@aexp,w,c
  6978  001650  C03B  F031         	movff	___flmul@bexp,??___flmul
  6979  001654  6A32               	clrf	(??___flmul+1)& (0+255),c
  6980  001656  2631               	addwf	??___flmul,f,c
  6981  001658  0E00               	movlw	0
  6982  00165A  2232               	addwfc	??___flmul+1,f,c
  6983  00165C  0E82               	movlw	130
  6984  00165E  2431               	addwf	??___flmul,w,c
  6985  001660  6E40               	movwf	___flmul@temp,c
  6986  001662  0EFF               	movlw	255
  6987  001664  2032               	addwfc	??___flmul+1,w,c
  6988  001666  6E41               	movwf	___flmul@temp+1,c
  6989  001668  D00F               	goto	l1020
  6990  00166A  90D8               	bcf	status,0,c
  6991  00166C  363C               	rlcf	___flmul@prod,f,c
  6992  00166E  363D               	rlcf	___flmul@prod+1,f,c
  6993  001670  363E               	rlcf	___flmul@prod+2,f,c
  6994  001672  363F               	rlcf	___flmul@prod+3,f,c
  6995  001674  BE3A               	btfsc	___flmul@grs+3,7,c
  6996  001676  803C               	bsf	___flmul@prod,0,c
  6997  001678  90D8               	bcf	status,0,c
  6998  00167A  3637               	rlcf	___flmul@grs,f,c
  6999  00167C  3638               	rlcf	___flmul@grs+1,f,c
  7000  00167E  3639               	rlcf	___flmul@grs+2,f,c
  7001  001680  363A               	rlcf	___flmul@grs+3,f,c
  7002  001682  0640               	decf	___flmul@temp,f,c
  7003  001684  A0D8               	btfss	status,0,c
  7004  001686  0641               	decf	___flmul@temp+1,f,c
  7005  001688                     l1020:
  7006  001688  AE3E               	btfss	___flmul@prod+2,7,c
  7007  00168A  D7EF               	goto	l1021
  7008  00168C  0E00               	movlw	0
  7009  00168E  6E36               	movwf	___flmul@aexp,c
  7010  001690  AE3A               	btfss	___flmul@grs+3,7,c
  7011  001692  D016               	goto	l1027
  7012  001694  0EFF               	movlw	255
  7013  001696  1437               	andwf	___flmul@grs,w,c
  7014  001698  6E31               	movwf	??___flmul& (0+255),c
  7015  00169A  0EFF               	movlw	255
  7016  00169C  1438               	andwf	___flmul@grs+1,w,c
  7017  00169E  6E32               	movwf	(??___flmul+1)& (0+255),c
  7018  0016A0  0EFF               	movlw	255
  7019  0016A2  1439               	andwf	___flmul@grs+2,w,c
  7020  0016A4  6E33               	movwf	(??___flmul+2)& (0+255),c
  7021  0016A6  0E7F               	movlw	127
  7022  0016A8  143A               	andwf	___flmul@grs+3,w,c
  7023  0016AA  6E34               	movwf	(??___flmul+3)& (0+255),c
  7024  0016AC  5031               	movf	??___flmul,w,c
  7025  0016AE  1032               	iorwf	??___flmul+1,w,c
  7026  0016B0  1033               	iorwf	??___flmul+2,w,c
  7027  0016B2  1034               	iorwf	??___flmul+3,w,c
  7028  0016B4  A4D8               	btfss	status,2,c
  7029  0016B6  D002               	goto	u5390
  7030  0016B8  A03C               	btfss	___flmul@prod,0,c
  7031  0016BA  D002               	goto	l1027
  7032  0016BC                     u5390:
  7033  0016BC  0E01               	movlw	1
  7034  0016BE  6E36               	movwf	___flmul@aexp,c
  7035  0016C0                     l1027:
  7036  0016C0  5036               	movf	___flmul@aexp,w,c
  7037  0016C2  B4D8               	btfsc	status,2,c
  7038  0016C4  D01F               	goto	l1029
  7039  0016C6  0E01               	movlw	1
  7040  0016C8  263C               	addwf	___flmul@prod,f,c
  7041  0016CA  0E00               	movlw	0
  7042  0016CC  223D               	addwfc	___flmul@prod+1,f,c
  7043  0016CE  223E               	addwfc	___flmul@prod+2,f,c
  7044  0016D0  223F               	addwfc	___flmul@prod+3,f,c
  7045  0016D2  A03F               	btfss	___flmul@prod+3,0,c
  7046  0016D4  D017               	goto	l1029
  7047  0016D6  C03C  F031         	movff	___flmul@prod,??___flmul
  7048  0016DA  C03D  F032         	movff	___flmul@prod+1,??___flmul+1
  7049  0016DE  C03E  F033         	movff	___flmul@prod+2,??___flmul+2
  7050  0016E2  C03F  F034         	movff	___flmul@prod+3,??___flmul+3
  7051  0016E6  3434               	rlcf	??___flmul+3,w,c
  7052  0016E8  3234               	rrcf	??___flmul+3,f,c
  7053  0016EA  3233               	rrcf	??___flmul+2,f,c
  7054  0016EC  3232               	rrcf	??___flmul+1,f,c
  7055  0016EE  3231               	rrcf	??___flmul,f,c
  7056  0016F0  C031  F03C         	movff	??___flmul,___flmul@prod
  7057  0016F4  C032  F03D         	movff	??___flmul+1,___flmul@prod+1
  7058  0016F8  C033  F03E         	movff	??___flmul+2,___flmul@prod+2
  7059  0016FC  C034  F03F         	movff	??___flmul+3,___flmul@prod+3
  7060  001700  4A40               	infsnz	___flmul@temp,f,c
  7061  001702  2A41               	incf	___flmul@temp+1,f,c
  7062  001704                     l1029:
  7063  001704  BE41               	btfsc	___flmul@temp+1,7,c
  7064  001706  D00D               	goto	l1030
  7065  001708  5041               	movf	___flmul@temp+1,w,c
  7066  00170A  E103               	bnz	u5420
  7067  00170C  2840               	incf	___flmul@temp,w,c
  7068  00170E  A0D8               	btfss	status,0,c
  7069  001710  D008               	goto	l1030
  7070  001712                     u5420:
  7071  001712  0E00               	movlw	0
  7072  001714  6E3C               	movwf	___flmul@prod,c
  7073  001716  0E00               	movlw	0
  7074  001718  6E3D               	movwf	___flmul@prod+1,c
  7075  00171A  0E80               	movlw	128
  7076  00171C  6E3E               	movwf	___flmul@prod+2,c
  7077  00171E  0E7F               	movlw	127
  7078  001720  D020               	goto	L3
  7079  001722                     l1030:
  7080  001722  BE41               	btfsc	___flmul@temp+1,7,c
  7081  001724  D005               	goto	u5430
  7082  001726  5041               	movf	___flmul@temp+1,w,c
  7083  001728  E10E               	bnz	l1032
  7084  00172A  0440               	decf	___flmul@temp,w,c
  7085  00172C  B0D8               	btfsc	status,0,c
  7086  00172E  D00B               	goto	l1032
  7087  001730                     u5430:
  7088  001730  0E00               	movlw	0
  7089  001732  6E3C               	movwf	___flmul@prod,c
  7090  001734  0E00               	movlw	0
  7091  001736  6E3D               	movwf	___flmul@prod+1,c
  7092  001738  0E00               	movlw	0
  7093  00173A  6E3E               	movwf	___flmul@prod+2,c
  7094  00173C  0E00               	movlw	0
  7095  00173E  6E3F               	movwf	___flmul@prod+3,c
  7096  001740  0E00               	movlw	0
  7097  001742  6E35               	movwf	___flmul@sign,c
  7098  001744  D00F               	goto	l1033
  7099  001746                     l1032:
  7100  001746  C040  F03B         	movff	___flmul@temp,___flmul@bexp
  7101  00174A  0EFF               	movlw	255
  7102  00174C  163C               	andwf	___flmul@prod,f,c
  7103  00174E  0EFF               	movlw	255
  7104  001750  163D               	andwf	___flmul@prod+1,f,c
  7105  001752  0E7F               	movlw	127
  7106  001754  163E               	andwf	___flmul@prod+2,f,c
  7107  001756  0E00               	movlw	0
  7108  001758  163F               	andwf	___flmul@prod+3,f,c
  7109  00175A  B03B               	btfsc	___flmul@bexp,0,c
  7110  00175C  8E3E               	bsf	___flmul@prod+2,7,c
  7111  00175E  90D8               	bcf	status,0,c
  7112  001760  303B               	rrcf	___flmul@bexp,w,c
  7113  001762                     L3:
  7114  001762  6E3F               	movwf	___flmul@prod+3,c
  7115  001764                     l1033:
  7116  001764  5035               	movf	___flmul@sign,w,c
  7117  001766  123F               	iorwf	___flmul@prod+3,f,c
  7118  001768  C03C  F029         	movff	___flmul@prod,?___flmul
  7119  00176C  C03D  F02A         	movff	___flmul@prod+1,?___flmul+1
  7120  001770  C03E  F02B         	movff	___flmul@prod+2,?___flmul+2
  7121  001774  C03F  F02C         	movff	___flmul@prod+3,?___flmul+3
  7122  001778  0012               	return	
  7123  00177A                     __end_of___flmul:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           postinc0	equ	0xFEE
  7132                           wreg	equ	0xFE8
  7133                           indf1	equ	0xFE7
  7134                           postdec1	equ	0xFE5
  7135                           fsr1h	equ	0xFE2
  7136                           fsr1l	equ	0xFE1
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function ___fladd *****************
  7145 ;; Defined at:
  7146 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  b               4   78[COMRAM] unsigned char 
  7149 ;;  a               4   82[COMRAM] unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  grs             1   89[COMRAM] unsigned char 
  7152 ;;  bexp            1   88[COMRAM] unsigned char 
  7153 ;;  aexp            1   87[COMRAM] unsigned char 
  7154 ;;  signs           1   86[COMRAM] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  4   78[COMRAM] unsigned char 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:        12       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:       20 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    2
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_main
  7175 ;;		_set_pwm1_percent
  7176 ;;		_sprintf
  7177 ;;		___flsub
  7178 ;;		_set_pwm1_voltage
  7179 ;;		_set_pwm1_general
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text20
  7184  00177A                     __ptext20:
  7185                           	opt stack 0
  7186  00177A                     ___fladd:
  7187                           	opt stack 26
  7188                           
  7189                           ;incstack = 0
  7190  00177A  5052               	movf	___fladd@b+3,w,c
  7191  00177C  0B80               	andlw	128
  7192  00177E  6E57               	movwf	___fladd@signs,c
  7193  001780  5052               	movf	___fladd@b+3,w,c
  7194  001782  2452               	addwf	___fladd@b+3,w,c
  7195  001784  6E59               	movwf	___fladd@bexp,c
  7196  001786  BE51               	btfsc	___fladd@b+2,7,c
  7197  001788  8059               	bsf	___fladd@bexp,0,c
  7198  00178A  5059               	movf	___fladd@bexp,w,c
  7199  00178C  B4D8               	btfsc	status,2,c
  7200  00178E  D00D               	goto	l918
  7201  001790  2859               	incf	___fladd@bexp,w,c
  7202  001792  A4D8               	btfss	status,2,c
  7203  001794  D008               	goto	l919
  7204  001796  0E00               	movlw	0
  7205  001798  6E4F               	movwf	___fladd@b,c
  7206  00179A  0E00               	movlw	0
  7207  00179C  6E50               	movwf	___fladd@b+1,c
  7208  00179E  0E00               	movlw	0
  7209  0017A0  6E51               	movwf	___fladd@b+2,c
  7210  0017A2  0E00               	movlw	0
  7211  0017A4  6E52               	movwf	___fladd@b+3,c
  7212  0017A6                     l919:
  7213  0017A6  8E51               	bsf	___fladd@b+2,7,c
  7214  0017A8  D006               	goto	L4
  7215  0017AA                     l918:
  7216  0017AA  0E00               	movlw	0
  7217  0017AC  6E4F               	movwf	___fladd@b,c
  7218  0017AE  0E00               	movlw	0
  7219  0017B0  6E50               	movwf	___fladd@b+1,c
  7220  0017B2  0E00               	movlw	0
  7221  0017B4  6E51               	movwf	___fladd@b+2,c
  7222  0017B6                     L4:
  7223  0017B6  0E00               	movlw	0
  7224  0017B8  6E52               	movwf	___fladd@b+3,c
  7225  0017BA  5056               	movf	___fladd@a+3,w,c
  7226  0017BC  0B80               	andlw	128
  7227  0017BE  6E58               	movwf	___fladd@aexp,c
  7228  0017C0  5057               	movf	___fladd@signs,w,c
  7229  0017C2  1858               	xorwf	___fladd@aexp,w,c
  7230  0017C4  A4D8               	btfss	status,2,c
  7231  0017C6  8C57               	bsf	___fladd@signs,6,c
  7232  0017C8  5056               	movf	___fladd@a+3,w,c
  7233  0017CA  2456               	addwf	___fladd@a+3,w,c
  7234  0017CC  6E58               	movwf	___fladd@aexp,c
  7235  0017CE  BE55               	btfsc	___fladd@a+2,7,c
  7236  0017D0  8058               	bsf	___fladd@aexp,0,c
  7237  0017D2  5058               	movf	___fladd@aexp,w,c
  7238  0017D4  B4D8               	btfsc	status,2,c
  7239  0017D6  D00D               	goto	l923
  7240  0017D8  2858               	incf	___fladd@aexp,w,c
  7241  0017DA  A4D8               	btfss	status,2,c
  7242  0017DC  D008               	goto	l924
  7243  0017DE  0E00               	movlw	0
  7244  0017E0  6E53               	movwf	___fladd@a,c
  7245  0017E2  0E00               	movlw	0
  7246  0017E4  6E54               	movwf	___fladd@a+1,c
  7247  0017E6  0E00               	movlw	0
  7248  0017E8  6E55               	movwf	___fladd@a+2,c
  7249  0017EA  0E00               	movlw	0
  7250  0017EC  6E56               	movwf	___fladd@a+3,c
  7251  0017EE                     l924:
  7252  0017EE  8E55               	bsf	___fladd@a+2,7,c
  7253  0017F0  D006               	goto	L5
  7254  0017F2                     l923:
  7255  0017F2  0E00               	movlw	0
  7256  0017F4  6E53               	movwf	___fladd@a,c
  7257  0017F6  0E00               	movlw	0
  7258  0017F8  6E54               	movwf	___fladd@a+1,c
  7259  0017FA  0E00               	movlw	0
  7260  0017FC  6E55               	movwf	___fladd@a+2,c
  7261  0017FE                     L5:
  7262  0017FE  0E00               	movlw	0
  7263  001800  6E56               	movwf	___fladd@a+3,c
  7264  001802  5059               	movf	___fladd@bexp,w,c
  7265  001804  5C58               	subwf	___fladd@aexp,w,c
  7266  001806  B0D8               	btfsc	status,0,c
  7267  001808  D022               	goto	l926
  7268  00180A  AC57               	btfss	___fladd@signs,6,c
  7269  00180C  D002               	goto	l927
  7270  00180E  0E80               	movlw	128
  7271  001810  1A57               	xorwf	___fladd@signs,f,c
  7272  001812                     l927:
  7273  001812  C059  F05A         	movff	___fladd@bexp,___fladd@grs
  7274  001816  C058  F059         	movff	___fladd@aexp,___fladd@bexp
  7275  00181A  C05A  F058         	movff	___fladd@grs,___fladd@aexp
  7276  00181E  C04F  F05A         	movff	___fladd@b,___fladd@grs
  7277  001822  C053  F04F         	movff	___fladd@a,___fladd@b
  7278  001826  C05A  F053         	movff	___fladd@grs,___fladd@a
  7279  00182A  C050  F05A         	movff	___fladd@b+1,___fladd@grs
  7280  00182E  C054  F050         	movff	___fladd@a+1,___fladd@b+1
  7281  001832  C05A  F054         	movff	___fladd@grs,___fladd@a+1
  7282  001836  C051  F05A         	movff	___fladd@b+2,___fladd@grs
  7283  00183A  C055  F051         	movff	___fladd@a+2,___fladd@b+2
  7284  00183E  C05A  F055         	movff	___fladd@grs,___fladd@a+2
  7285  001842  C052  F05A         	movff	___fladd@b+3,___fladd@grs
  7286  001846  C056  F052         	movff	___fladd@a+3,___fladd@b+3
  7287  00184A  C05A  F056         	movff	___fladd@grs,___fladd@a+3
  7288  00184E                     l926:
  7289  00184E  0E00               	movlw	0
  7290  001850  6E5A               	movwf	___fladd@grs,c
  7291  001852  5059               	movf	___fladd@bexp,w,c
  7292  001854  0100               	movlb	0	; () banked
  7293  001856  6F80               	movwf	??___fladd& (0+255),b
  7294  001858  6B81               	clrf	(??___fladd+1)& (0+255),b
  7295  00185A  1F80               	comf	??___fladd& (0+255),f,b
  7296  00185C  1F81               	comf	(??___fladd+1)& (0+255),f,b
  7297  00185E  4B80               	infsnz	??___fladd& (0+255),f,b
  7298  001860  2B81               	incf	(??___fladd+1)& (0+255),f,b
  7299  001862  5058               	movf	___fladd@aexp,w,c
  7300  001864  6F82               	movwf	(??___fladd+2)& (0+255),b
  7301  001866  6B83               	clrf	(??___fladd+3)& (0+255),b
  7302  001868  5180               	movf	??___fladd& (0+255),w,b
  7303  00186A  2782               	addwf	(??___fladd+2)& (0+255),f,b
  7304  00186C  5181               	movf	(??___fladd+1)& (0+255),w,b
  7305  00186E  2383               	addwfc	(??___fladd+3)& (0+255),f,b
  7306  001870  BF83               	btfsc	(??___fladd+3)& (0+255),7,b
  7307  001872  D02C               	goto	l930
  7308  001874  5183               	movf	(??___fladd+3)& (0+255),w,b
  7309  001876  E104               	bnz	u4960
  7310  001878  0E1A               	movlw	26
  7311  00187A  5D82               	subwf	(??___fladd+2)& (0+255),w,b
  7312  00187C  A0D8               	btfss	status,0,c
  7313  00187E  D026               	goto	l930
  7314  001880                     u4960:
  7315                           
  7316                           ; BSR set to: 0
  7317  001880  504F               	movf	___fladd@b,w,c
  7318  001882  1050               	iorwf	___fladd@b+1,w,c
  7319  001884  1051               	iorwf	___fladd@b+2,w,c
  7320  001886  1052               	iorwf	___fladd@b+3,w,c
  7321  001888  B4D8               	btfsc	status,2,c
  7322  00188A  D002               	goto	u4970
  7323  00188C  0E01               	movlw	1
  7324  00188E  D001               	goto	u4980
  7325  001890                     u4970:
  7326  001890  0E00               	movlw	0
  7327  001892                     u4980:
  7328  001892  6E5A               	movwf	___fladd@grs,c
  7329                           
  7330                           ; BSR set to: 0
  7331  001894  0E00               	movlw	0
  7332  001896  6E4F               	movwf	___fladd@b,c
  7333  001898  0E00               	movlw	0
  7334  00189A  6E50               	movwf	___fladd@b+1,c
  7335  00189C  0E00               	movlw	0
  7336  00189E  6E51               	movwf	___fladd@b+2,c
  7337  0018A0  0E00               	movlw	0
  7338  0018A2  6E52               	movwf	___fladd@b+3,c
  7339                           
  7340                           ; BSR set to: 0
  7341  0018A4  C058  F059         	movff	___fladd@aexp,___fladd@bexp
  7342  0018A8  D015               	goto	u5010
  7343  0018AA                     l931:
  7344  0018AA  A05A               	btfss	___fladd@grs,0,c
  7345  0018AC  D005               	goto	l932
  7346  0018AE  90D8               	bcf	status,0,c
  7347  0018B0  305A               	rrcf	___fladd@grs,w,c
  7348  0018B2  0901               	iorlw	1
  7349  0018B4  6E5A               	movwf	___fladd@grs,c
  7350  0018B6  D002               	goto	l933
  7351  0018B8                     l932:
  7352  0018B8  90D8               	bcf	status,0,c
  7353  0018BA  325A               	rrcf	___fladd@grs,f,c
  7354  0018BC                     l933:
  7355  0018BC  B04F               	btfsc	___fladd@b,0,c
  7356  0018BE  8E5A               	bsf	___fladd@grs,7,c
  7357  0018C0  3452               	rlcf	___fladd@b+3,w,c
  7358  0018C2  3252               	rrcf	___fladd@b+3,f,c
  7359  0018C4  3251               	rrcf	___fladd@b+2,f,c
  7360  0018C6  3250               	rrcf	___fladd@b+1,f,c
  7361  0018C8  324F               	rrcf	___fladd@b,f,c
  7362  0018CA  2A59               	incf	___fladd@bexp,f,c
  7363  0018CC                     l930:
  7364  0018CC  5058               	movf	___fladd@aexp,w,c
  7365  0018CE  5C59               	subwf	___fladd@bexp,w,c
  7366  0018D0  A0D8               	btfss	status,0,c
  7367  0018D2  D7EB               	goto	l931
  7368  0018D4                     u5010:
  7369  0018D4  BC57               	btfsc	___fladd@signs,6,c
  7370  0018D6  D029               	goto	l936
  7371  0018D8  5059               	movf	___fladd@bexp,w,c
  7372  0018DA  A4D8               	btfss	status,2,c
  7373  0018DC  D009               	goto	l937
  7374  0018DE  0E00               	movlw	0
  7375  0018E0  6E4F               	movwf	?___fladd,c
  7376  0018E2  0E00               	movlw	0
  7377  0018E4  6E50               	movwf	?___fladd+1,c
  7378  0018E6  0E00               	movlw	0
  7379  0018E8  6E51               	movwf	?___fladd+2,c
  7380  0018EA  0E00               	movlw	0
  7381  0018EC  6E52               	movwf	?___fladd+3,c
  7382  0018EE  0012               	return	
  7383  0018F0                     l937:
  7384  0018F0  5053               	movf	___fladd@a,w,c
  7385  0018F2  264F               	addwf	___fladd@b,f,c
  7386  0018F4  5054               	movf	___fladd@a+1,w,c
  7387  0018F6  2250               	addwfc	___fladd@b+1,f,c
  7388  0018F8  5055               	movf	___fladd@a+2,w,c
  7389  0018FA  2251               	addwfc	___fladd@b+2,f,c
  7390  0018FC  5056               	movf	___fladd@a+3,w,c
  7391  0018FE  2252               	addwfc	___fladd@b+3,f,c
  7392  001900  A052               	btfss	___fladd@b+3,0,c
  7393  001902  D084               	goto	u5140
  7394  001904  A05A               	btfss	___fladd@grs,0,c
  7395  001906  D006               	goto	l940
  7396  001908  90D8               	bcf	status,0,c
  7397  00190A  325A               	rrcf	___fladd@grs,f,c
  7398  00190C  505A               	movf	___fladd@grs,w,c
  7399  00190E  0901               	iorlw	1
  7400  001910  6E5A               	movwf	___fladd@grs,c
  7401  001912  D002               	goto	l941
  7402  001914                     l940:
  7403  001914  90D8               	bcf	status,0,c
  7404  001916  325A               	rrcf	___fladd@grs,f,c
  7405  001918                     l941:
  7406  001918  B04F               	btfsc	___fladd@b,0,c
  7407  00191A  8E5A               	bsf	___fladd@grs,7,c
  7408  00191C  3452               	rlcf	___fladd@b+3,w,c
  7409  00191E  3252               	rrcf	___fladd@b+3,f,c
  7410  001920  3251               	rrcf	___fladd@b+2,f,c
  7411  001922  3250               	rrcf	___fladd@b+1,f,c
  7412  001924  324F               	rrcf	___fladd@b,f,c
  7413  001926  2A59               	incf	___fladd@bexp,f,c
  7414  001928  D071               	goto	u5140
  7415  00192A                     l936:
  7416  00192A  5053               	movf	___fladd@a,w,c
  7417  00192C  5C4F               	subwf	___fladd@b,w,c
  7418  00192E  5054               	movf	___fladd@a+1,w,c
  7419  001930  5850               	subwfb	___fladd@b+1,w,c
  7420  001932  5055               	movf	___fladd@a+2,w,c
  7421  001934  5851               	subwfb	___fladd@b+2,w,c
  7422  001936  5052               	movf	___fladd@b+3,w,c
  7423  001938  0A80               	xorlw	128
  7424  00193A  0100               	movlb	0	; () banked
  7425  00193C  6F80               	movwf	??___fladd& (0+255),b
  7426  00193E  5056               	movf	___fladd@a+3,w,c
  7427  001940  0A80               	xorlw	128
  7428  001942  5980               	subwfb	??___fladd& (0+255),w,b
  7429  001944  B0D8               	btfsc	status,0,c
  7430  001946  D036               	goto	l944
  7431                           
  7432                           ; BSR set to: 0
  7433  001948  C04F  F080         	movff	___fladd@b,??___fladd
  7434  00194C  C050  F081         	movff	___fladd@b+1,??___fladd+1
  7435  001950  C051  F082         	movff	___fladd@b+2,??___fladd+2
  7436  001954  C052  F083         	movff	___fladd@b+3,??___fladd+3
  7437  001958  1F80               	comf	??___fladd& (0+255),f,b
  7438  00195A  1F81               	comf	(??___fladd+1)& (0+255),f,b
  7439  00195C  1F82               	comf	(??___fladd+2)& (0+255),f,b
  7440  00195E  1F83               	comf	(??___fladd+3)& (0+255),f,b
  7441  001960  2B80               	incf	??___fladd& (0+255),f,b
  7442  001962  0E00               	movlw	0
  7443  001964  2381               	addwfc	(??___fladd+1)& (0+255),f,b
  7444  001966  2382               	addwfc	(??___fladd+2)& (0+255),f,b
  7445  001968  2383               	addwfc	(??___fladd+3)& (0+255),f,b
  7446  00196A  5053               	movf	___fladd@a,w,c
  7447  00196C  2580               	addwf	??___fladd& (0+255),w,b
  7448  00196E  6F84               	movwf	(??___fladd+4)& (0+255),b
  7449  001970  5054               	movf	___fladd@a+1,w,c
  7450  001972  2181               	addwfc	(??___fladd+1)& (0+255),w,b
  7451  001974  6F85               	movwf	(??___fladd+5)& (0+255),b
  7452  001976  5055               	movf	___fladd@a+2,w,c
  7453  001978  2182               	addwfc	(??___fladd+2)& (0+255),w,b
  7454  00197A  6F86               	movwf	(??___fladd+6)& (0+255),b
  7455  00197C  5056               	movf	___fladd@a+3,w,c
  7456  00197E  2183               	addwfc	(??___fladd+3)& (0+255),w,b
  7457  001980  6F87               	movwf	(??___fladd+7)& (0+255),b
  7458  001982  0EFF               	movlw	255
  7459  001984  2584               	addwf	(??___fladd+4)& (0+255),w,b
  7460  001986  6E4F               	movwf	___fladd@b,c
  7461  001988  0EFF               	movlw	255
  7462  00198A  2185               	addwfc	(??___fladd+5)& (0+255),w,b
  7463  00198C  6E50               	movwf	___fladd@b+1,c
  7464  00198E  0EFF               	movlw	255
  7465  001990  2186               	addwfc	(??___fladd+6)& (0+255),w,b
  7466  001992  6E51               	movwf	___fladd@b+2,c
  7467  001994  0EFF               	movlw	255
  7468  001996  2187               	addwfc	(??___fladd+7)& (0+255),w,b
  7469  001998  6E52               	movwf	___fladd@b+3,c
  7470  00199A  0E80               	movlw	128
  7471  00199C  1A57               	xorwf	___fladd@signs,f,c
  7472                           
  7473                           ; BSR set to: 0
  7474  00199E  6C5A               	negf	___fladd@grs,c
  7475                           
  7476                           ; BSR set to: 0
  7477  0019A0  505A               	movf	___fladd@grs,w,c
  7478  0019A2  A4D8               	btfss	status,2,c
  7479  0019A4  D00F               	goto	l946
  7480                           
  7481                           ; BSR set to: 0
  7482  0019A6  0E01               	movlw	1
  7483  0019A8  264F               	addwf	___fladd@b,f,c
  7484  0019AA  0E00               	movlw	0
  7485  0019AC  2250               	addwfc	___fladd@b+1,f,c
  7486  0019AE  2251               	addwfc	___fladd@b+2,f,c
  7487  0019B0  2252               	addwfc	___fladd@b+3,f,c
  7488                           
  7489                           ; BSR set to: 0
  7490  0019B2  D008               	goto	l946
  7491  0019B4                     l944:
  7492                           
  7493                           ; BSR set to: 0
  7494                           
  7495                           ; BSR set to: 0
  7496  0019B4  5053               	movf	___fladd@a,w,c
  7497  0019B6  5E4F               	subwf	___fladd@b,f,c
  7498  0019B8  5054               	movf	___fladd@a+1,w,c
  7499  0019BA  5A50               	subwfb	___fladd@b+1,f,c
  7500  0019BC  5055               	movf	___fladd@a+2,w,c
  7501  0019BE  5A51               	subwfb	___fladd@b+2,f,c
  7502  0019C0  5056               	movf	___fladd@a+3,w,c
  7503  0019C2  5A52               	subwfb	___fladd@b+3,f,c
  7504  0019C4                     l946:
  7505                           
  7506                           ; BSR set to: 0
  7507  0019C4  504F               	movf	___fladd@b,w,c
  7508  0019C6  1050               	iorwf	___fladd@b+1,w,c
  7509  0019C8  1051               	iorwf	___fladd@b+2,w,c
  7510  0019CA  1052               	iorwf	___fladd@b+3,w,c
  7511  0019CC  A4D8               	btfss	status,2,c
  7512  0019CE  D01C               	goto	l953
  7513                           
  7514                           ; BSR set to: 0
  7515  0019D0  505A               	movf	___fladd@grs,w,c
  7516  0019D2  A4D8               	btfss	status,2,c
  7517  0019D4  D019               	goto	l953
  7518                           
  7519                           ; BSR set to: 0
  7520  0019D6  0E00               	movlw	0
  7521  0019D8  6E4F               	movwf	?___fladd,c
  7522  0019DA  0E00               	movlw	0
  7523  0019DC  6E50               	movwf	?___fladd+1,c
  7524  0019DE  0E00               	movlw	0
  7525  0019E0  6E51               	movwf	?___fladd+2,c
  7526  0019E2  0E00               	movlw	0
  7527  0019E4  6E52               	movwf	?___fladd+3,c
  7528                           
  7529                           ; BSR set to: 0
  7530  0019E6  0012               	return	
  7531  0019E8                     
  7532                           ; BSR set to: 0
  7533  0019E8  90D8               	bcf	status,0,c
  7534  0019EA  364F               	rlcf	___fladd@b,f,c
  7535  0019EC  3650               	rlcf	___fladd@b+1,f,c
  7536  0019EE  3651               	rlcf	___fladd@b+2,f,c
  7537  0019F0  3652               	rlcf	___fladd@b+3,f,c
  7538  0019F2  BE5A               	btfsc	___fladd@grs,7,c
  7539  0019F4  804F               	bsf	___fladd@b,0,c
  7540  0019F6  A05A               	btfss	___fladd@grs,0,c
  7541  0019F8  D002               	goto	l951
  7542  0019FA  80D8               	bsf	status,0,c
  7543  0019FC  D001               	goto	L6
  7544  0019FE                     l951:
  7545  0019FE  90D8               	bcf	status,0,c
  7546  001A00                     L6:
  7547  001A00  365A               	rlcf	___fladd@grs,f,c
  7548  001A02  5059               	movf	___fladd@bexp,w,c
  7549  001A04  A4D8               	btfss	status,2,c
  7550  001A06  0659               	decf	___fladd@bexp,f,c
  7551  001A08                     l953:
  7552  001A08  AE51               	btfss	___fladd@b+2,7,c
  7553  001A0A  D7EE               	goto	l949
  7554  001A0C                     u5140:
  7555  001A0C  0E00               	movlw	0
  7556  001A0E  6E58               	movwf	___fladd@aexp,c
  7557  001A10  AE5A               	btfss	___fladd@grs,7,c
  7558  001A12  D00B               	goto	l958
  7559  001A14  C05A  F080         	movff	___fladd@grs,??___fladd
  7560  001A18  0E7F               	movlw	127
  7561  001A1A  0100               	movlb	0	; () banked
  7562  001A1C  1780               	andwf	??___fladd& (0+255),f,b
  7563  001A1E  A4D8               	btfss	status,2,c
  7564  001A20  D002               	goto	u5170
  7565                           
  7566                           ; BSR set to: 0
  7567                           
  7568                           ; BSR set to: 0
  7569  001A22  A04F               	btfss	___fladd@b,0,c
  7570  001A24  D002               	goto	l958
  7571  001A26                     u5170:
  7572                           
  7573                           ; BSR set to: 0
  7574  001A26  0E01               	movlw	1
  7575  001A28  6E58               	movwf	___fladd@aexp,c
  7576  001A2A                     l958:
  7577                           
  7578                           ; BSR set to: 0
  7579                           
  7580                           ; BSR set to: 0
  7581  001A2A  5058               	movf	___fladd@aexp,w,c
  7582  001A2C  B4D8               	btfsc	status,2,c
  7583  001A2E  D021               	goto	l961
  7584  001A30  0E01               	movlw	1
  7585  001A32  264F               	addwf	___fladd@b,f,c
  7586  001A34  0E00               	movlw	0
  7587  001A36  2250               	addwfc	___fladd@b+1,f,c
  7588  001A38  2251               	addwfc	___fladd@b+2,f,c
  7589  001A3A  2252               	addwfc	___fladd@b+3,f,c
  7590  001A3C  A052               	btfss	___fladd@b+3,0,c
  7591  001A3E  D019               	goto	l961
  7592  001A40  C04F  F080         	movff	___fladd@b,??___fladd
  7593  001A44  C050  F081         	movff	___fladd@b+1,??___fladd+1
  7594  001A48  C051  F082         	movff	___fladd@b+2,??___fladd+2
  7595  001A4C  C052  F083         	movff	___fladd@b+3,??___fladd+3
  7596  001A50  0100               	movlb	0	; () banked
  7597  001A52  3583               	rlcf	(??___fladd+3)& (0+255),w,b
  7598  001A54  3383               	rrcf	(??___fladd+3)& (0+255),f,b
  7599  001A56  3382               	rrcf	(??___fladd+2)& (0+255),f,b
  7600  001A58  3381               	rrcf	(??___fladd+1)& (0+255),f,b
  7601  001A5A  3380               	rrcf	??___fladd& (0+255),f,b
  7602  001A5C  C080  F04F         	movff	??___fladd,___fladd@b
  7603  001A60  C081  F050         	movff	??___fladd+1,___fladd@b+1
  7604  001A64  C082  F051         	movff	??___fladd+2,___fladd@b+2
  7605  001A68  C083  F052         	movff	??___fladd+3,___fladd@b+3
  7606  001A6C  2859               	incf	___fladd@bexp,w,c
  7607  001A6E  A4D8               	btfss	status,2,c
  7608                           
  7609                           ; BSR set to: 0
  7610  001A70  2A59               	incf	___fladd@bexp,f,c
  7611  001A72                     l961:
  7612                           
  7613                           ; BSR set to: 0
  7614                           
  7615                           ; BSR set to: 0
  7616                           
  7617                           ; BSR set to: 0
  7618  001A72  2859               	incf	___fladd@bexp,w,c
  7619  001A74  B4D8               	btfsc	status,2,c
  7620  001A76  D003               	goto	u5220
  7621  001A78  5059               	movf	___fladd@bexp,w,c
  7622  001A7A  A4D8               	btfss	status,2,c
  7623  001A7C  D00D               	goto	l965
  7624  001A7E                     u5220:
  7625  001A7E  0E00               	movlw	0
  7626  001A80  6E4F               	movwf	___fladd@b,c
  7627  001A82  0E00               	movlw	0
  7628  001A84  6E50               	movwf	___fladd@b+1,c
  7629  001A86  0E00               	movlw	0
  7630  001A88  6E51               	movwf	___fladd@b+2,c
  7631  001A8A  0E00               	movlw	0
  7632  001A8C  6E52               	movwf	___fladd@b+3,c
  7633  001A8E  5059               	movf	___fladd@bexp,w,c
  7634  001A90  A4D8               	btfss	status,2,c
  7635  001A92  D002               	goto	l965
  7636  001A94  0E00               	movlw	0
  7637  001A96  6E57               	movwf	___fladd@signs,c
  7638  001A98                     l965:
  7639  001A98  A059               	btfss	___fladd@bexp,0,c
  7640  001A9A  D002               	goto	l966
  7641  001A9C  8E51               	bsf	___fladd@b+2,7,c
  7642  001A9E  D001               	goto	l967
  7643  001AA0                     l966:
  7644  001AA0  9E51               	bcf	___fladd@b+2,7,c
  7645  001AA2                     l967:
  7646  001AA2  90D8               	bcf	status,0,c
  7647  001AA4  3059               	rrcf	___fladd@bexp,w,c
  7648  001AA6  6E52               	movwf	___fladd@b+3,c
  7649  001AA8  BE57               	btfsc	___fladd@signs,7,c
  7650  001AAA  8E52               	bsf	___fladd@b+3,7,c
  7651  001AAC  C04F  F04F         	movff	___fladd@b,?___fladd
  7652  001AB0  C050  F050         	movff	___fladd@b+1,?___fladd+1
  7653  001AB4  C051  F051         	movff	___fladd@b+2,?___fladd+2
  7654  001AB8  C052  F052         	movff	___fladd@b+3,?___fladd+3
  7655  001ABC  0012               	return	
  7656  001ABE                     __end_of___fladd:
  7657                           	opt stack 0
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           postinc0	equ	0xFEE
  7665                           wreg	equ	0xFE8
  7666                           indf1	equ	0xFE7
  7667                           postdec1	equ	0xFE5
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           fsr2h	equ	0xFDA
  7674                           fsr2l	equ	0xFD9
  7675                           status	equ	0xFD8
  7676                           
  7677 ;; *************** function _set_compare_value *****************
  7678 ;; Defined at:
  7679 ;;		line 126 in file "pwm_asl.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  compare_valu    2   26[COMRAM] unsigned int 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  1    wreg      void 
  7686 ;; Registers used:
  7687 ;;		wreg, status,2
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;Total ram usage:        2 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    2
  7700 ;; This function calls:
  7701 ;;		Nothing
  7702 ;; This function is called by:
  7703 ;;		_main
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text21
  7708  002E98                     __ptext21:
  7709                           	opt stack 0
  7710  002E98                     _set_compare_value:
  7711                           	opt stack 28
  7712                           
  7713                           ;pwm_asl.c: 127: CCPR2L = compare_value >> 8;
  7714                           
  7715                           ;incstack = 0
  7716  002E98  501C               	movf	set_compare_value@compare_value+1,w,c
  7717  002E9A  6EBB               	movwf	4027,c	;volatile
  7718                           
  7719                           ;pwm_asl.c: 128: CCPR2H = compare_value & 0xFF;
  7720  002E9C  C01B  FFBC         	movff	set_compare_value@compare_value,4028	;volatile
  7721  002EA0  0012               	return		;funcret
  7722  002EA2                     __end_of_set_compare_value:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           indf1	equ	0xFE7
  7733                           postdec1	equ	0xFE5
  7734                           fsr1h	equ	0xFE2
  7735                           fsr1l	equ	0xFE1
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function _read_adc_voltage *****************
  7744 ;; Defined at:
  7745 ;;		line 48 in file "my_adc.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  channel         1    wreg     unsigned char 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  channel         1    8[BANK0 ] unsigned char 
  7750 ;;  voltage         4    4[BANK0 ] float 
  7751 ;;  raw_value       2    9[BANK0 ] int 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  4    0[BANK0 ] float 
  7754 ;; Registers used:
  7755 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;Total ram usage:       11 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    3
  7768 ;; This function calls:
  7769 ;;		___fldiv
  7770 ;;		___wmul
  7771 ;;		___xxtofl
  7772 ;;		_read_adc_raw_no_lib
  7773 ;; This function is called by:
  7774 ;;		_main
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text22
  7779  002760                     __ptext22:
  7780                           	opt stack 0
  7781  002760                     _read_adc_voltage:
  7782                           	opt stack 27
  7783                           
  7784                           ;incstack = 0
  7785                           ;read_adc_voltage@channel stored from wreg
  7786  002760  0100               	movlb	0	; () banked
  7787  002762  6F88               	movwf	read_adc_voltage@channel& (0+255),b
  7788                           
  7789                           ;my_adc.c: 49: int raw_value;
  7790                           ;my_adc.c: 50: float voltage;
  7791                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  7792  002764  0100               	movlb	0	; () banked
  7793  002766  5188               	movf	read_adc_voltage@channel& (0+255),w,b
  7794  002768  EC77  F016         	call	_read_adc_raw_no_lib
  7795  00276C  C01B  F089         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  7796  002770  C01C  F08A         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  7797                           
  7798                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  7799  002774  C089  F01B         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  7800  002778  C08A  F01C         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  7801  00277C  0E00               	movlw	0
  7802  00277E  6E1E               	movwf	___wmul@multiplicand+1,c
  7803  002780  0E05               	movlw	5
  7804  002782  6E1D               	movwf	___wmul@multiplicand,c
  7805  002784  ECD9  F016         	call	___wmul	;wreg free
  7806  002788  C01B  F021         	movff	?___wmul,___xxtofl@val
  7807  00278C  C01C  F022         	movff	?___wmul+1,___xxtofl@val+1
  7808  002790  0E00               	movlw	0
  7809  002792  BE22               	btfsc	___xxtofl@val+1,7,c
  7810  002794  0EFF               	movlw	-1
  7811  002796  6E23               	movwf	___xxtofl@val+2,c
  7812  002798  6E24               	movwf	___xxtofl@val+3,c
  7813  00279A  0E01               	movlw	1
  7814  00279C  ECFE  F00F         	call	___xxtofl
  7815  0027A0  C021  F042         	movff	?___xxtofl,___fldiv@b
  7816  0027A4  C022  F043         	movff	?___xxtofl+1,___fldiv@b+1
  7817  0027A8  C023  F044         	movff	?___xxtofl+2,___fldiv@b+2
  7818  0027AC  C024  F045         	movff	?___xxtofl+3,___fldiv@b+3
  7819  0027B0  0E00               	movlw	0
  7820  0027B2  6E46               	movwf	___fldiv@a,c
  7821  0027B4  0EC0               	movlw	192
  7822  0027B6  6E47               	movwf	___fldiv@a+1,c
  7823  0027B8  0E7F               	movlw	127
  7824  0027BA  6E48               	movwf	___fldiv@a+2,c
  7825  0027BC  0E44               	movlw	68
  7826  0027BE  6E49               	movwf	___fldiv@a+3,c
  7827  0027C0  EC5F  F00D         	call	___fldiv	;wreg free
  7828  0027C4  C042  F084         	movff	?___fldiv,read_adc_voltage@voltage
  7829  0027C8  C043  F085         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  7830  0027CC  C044  F086         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  7831  0027D0  C045  F087         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  7832                           
  7833                           ;my_adc.c: 53: return voltage;
  7834  0027D4  C084  F080         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  7835  0027D8  C085  F081         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  7836  0027DC  C086  F082         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  7837  0027E0  C087  F083         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  7838  0027E4  0012               	return	
  7839  0027E6                     __end_of_read_adc_voltage:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           indf1	equ	0xFE7
  7850                           postdec1	equ	0xFE5
  7851                           fsr1h	equ	0xFE2
  7852                           fsr1l	equ	0xFE1
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           
  7860 ;; *************** function _read_adc_raw_no_lib *****************
  7861 ;; Defined at:
  7862 ;;		line 32 in file "my_adc.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  channel         1    wreg     unsigned char 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  channel         1   30[COMRAM] unsigned char 
  7867 ;;  raw_value       2   31[COMRAM] int 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  2   26[COMRAM] int 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;Total ram usage:        7 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    2
  7884 ;; This function calls:
  7885 ;;		Nothing
  7886 ;; This function is called by:
  7887 ;;		_main
  7888 ;;		_read_adc_voltage
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text23
  7893  002CEE                     __ptext23:
  7894                           	opt stack 0
  7895  002CEE                     _read_adc_raw_no_lib:
  7896                           	opt stack 27
  7897                           
  7898                           ;incstack = 0
  7899                           ;read_adc_raw_no_lib@channel stored from wreg
  7900  002CEE  6E1F               	movwf	read_adc_raw_no_lib@channel,c
  7901                           
  7902                           ;my_adc.c: 33: int raw_value;
  7903                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  7904  002CF0  C01F  F01D         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  7905  002CF4  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  7906  002CF6  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  7907  002CF8  50C2               	movf	4034,w,c	;volatile
  7908  002CFA  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  7909  002CFC  0BC3               	andlw	-61
  7910  002CFE  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  7911  002D00  6EC2               	movwf	4034,c	;volatile
  7912                           
  7913                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  7914  002D02  82C2               	bsf	4034,1,c	;volatile
  7915  002D04  B2C2               	btfsc	4034,1,c	;volatile
  7916  002D06  D7FE               	goto	l234
  7917                           
  7918                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  7919  002D08  50C3               	movf	4035,w,c	;volatile
  7920  002D0A  CFC4 F01D          	movff	4036,??_read_adc_raw_no_lib	;volatile
  7921  002D0E  6A1E               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  7922  002D10  C01D  F01E         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  7923  002D14  6A1D               	clrf	??_read_adc_raw_no_lib,c
  7924  002D16  101D               	iorwf	??_read_adc_raw_no_lib,w,c
  7925  002D18  6E20               	movwf	read_adc_raw_no_lib@raw_value,c
  7926  002D1A  501E               	movf	??_read_adc_raw_no_lib+1,w,c
  7927  002D1C  6E21               	movwf	read_adc_raw_no_lib@raw_value+1,c
  7928                           
  7929                           ;my_adc.c: 45: return raw_value;
  7930  002D1E  C020  F01B         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  7931  002D22  C021  F01C         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  7932  002D26  0012               	return	
  7933  002D28                     __end_of_read_adc_raw_no_lib:
  7934                           	opt stack 0
  7935                           tblptru	equ	0xFF8
  7936                           tblptrh	equ	0xFF7
  7937                           tblptrl	equ	0xFF6
  7938                           tablat	equ	0xFF5
  7939                           prodh	equ	0xFF4
  7940                           prodl	equ	0xFF3
  7941                           postinc0	equ	0xFEE
  7942                           wreg	equ	0xFE8
  7943                           indf1	equ	0xFE7
  7944                           postdec1	equ	0xFE5
  7945                           fsr1h	equ	0xFE2
  7946                           fsr1l	equ	0xFE1
  7947                           indf2	equ	0xFDF
  7948                           postinc2	equ	0xFDE
  7949                           postdec2	equ	0xFDD
  7950                           fsr2h	equ	0xFDA
  7951                           fsr2l	equ	0xFD9
  7952                           status	equ	0xFD8
  7953                           
  7954 ;; *************** function ___xxtofl *****************
  7955 ;; Defined at:
  7956 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  sign            1    wreg     unsigned char 
  7959 ;;  val             4   32[COMRAM] long 
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  sign            1   40[COMRAM] unsigned char 
  7962 ;;  arg             4   42[COMRAM] unsigned long 
  7963 ;;  exp             1   41[COMRAM] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  4   32[COMRAM] unsigned char 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:       14 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    2
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_main
  7984 ;;		_read_adc_voltage
  7985 ;;		_sprintf
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text24
  7990  001FFC                     __ptext24:
  7991                           	opt stack 0
  7992  001FFC                     ___xxtofl:
  7993                           	opt stack 27
  7994                           
  7995                           ;incstack = 0
  7996                           ;___xxtofl@sign stored from wreg
  7997  001FFC  6E29               	movwf	___xxtofl@sign,c
  7998  001FFE  5029               	movf	___xxtofl@sign,w,c
  7999  002000  A4D8               	btfss	status,2,c
  8000  002002  AE24               	btfss	___xxtofl@val+3,7,c
  8001  002004  D01A               	goto	l1037
  8002  002006  C021  F025         	movff	___xxtofl@val,??___xxtofl
  8003  00200A  C022  F026         	movff	___xxtofl@val+1,??___xxtofl+1
  8004  00200E  C023  F027         	movff	___xxtofl@val+2,??___xxtofl+2
  8005  002012  C024  F028         	movff	___xxtofl@val+3,??___xxtofl+3
  8006  002016  1E25               	comf	??___xxtofl,f,c
  8007  002018  1E26               	comf	??___xxtofl+1,f,c
  8008  00201A  1E27               	comf	??___xxtofl+2,f,c
  8009  00201C  1E28               	comf	??___xxtofl+3,f,c
  8010  00201E  2A25               	incf	??___xxtofl,f,c
  8011  002020  0E00               	movlw	0
  8012  002022  2226               	addwfc	??___xxtofl+1,f,c
  8013  002024  2227               	addwfc	??___xxtofl+2,f,c
  8014  002026  2228               	addwfc	??___xxtofl+3,f,c
  8015  002028  C025  F02B         	movff	??___xxtofl,___xxtofl@arg
  8016  00202C  C026  F02C         	movff	??___xxtofl+1,___xxtofl@arg+1
  8017  002030  C027  F02D         	movff	??___xxtofl+2,___xxtofl@arg+2
  8018  002034  C028  F02E         	movff	??___xxtofl+3,___xxtofl@arg+3
  8019  002038  D008               	goto	l1038
  8020  00203A                     l1037:
  8021  00203A  C021  F02B         	movff	___xxtofl@val,___xxtofl@arg
  8022  00203E  C022  F02C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8023  002042  C023  F02D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8024  002046  C024  F02E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8025  00204A                     l1038:
  8026  00204A  5021               	movf	___xxtofl@val,w,c
  8027  00204C  1022               	iorwf	___xxtofl@val+1,w,c
  8028  00204E  1023               	iorwf	___xxtofl@val+2,w,c
  8029  002050  1024               	iorwf	___xxtofl@val+3,w,c
  8030  002052  A4D8               	btfss	status,2,c
  8031  002054  D009               	goto	l1039
  8032  002056  0E00               	movlw	0
  8033  002058  6E21               	movwf	?___xxtofl,c
  8034  00205A  0E00               	movlw	0
  8035  00205C  6E22               	movwf	?___xxtofl+1,c
  8036  00205E  0E00               	movlw	0
  8037  002060  6E23               	movwf	?___xxtofl+2,c
  8038  002062  0E00               	movlw	0
  8039  002064  6E24               	movwf	?___xxtofl+3,c
  8040  002066  0012               	return	
  8041  002068                     l1039:
  8042  002068  0E96               	movlw	150
  8043  00206A  6E2A               	movwf	___xxtofl@exp,c
  8044  00206C  D006               	goto	l1041
  8045  00206E  2A2A               	incf	___xxtofl@exp,f,c
  8046  002070  90D8               	bcf	status,0,c
  8047  002072  322E               	rrcf	___xxtofl@arg+3,f,c
  8048  002074  322D               	rrcf	___xxtofl@arg+2,f,c
  8049  002076  322C               	rrcf	___xxtofl@arg+1,f,c
  8050  002078  322B               	rrcf	___xxtofl@arg,f,c
  8051  00207A                     l1041:
  8052  00207A  0E00               	movlw	0
  8053  00207C  142B               	andwf	___xxtofl@arg,w,c
  8054  00207E  6E25               	movwf	??___xxtofl& (0+255),c
  8055  002080  0E00               	movlw	0
  8056  002082  142C               	andwf	___xxtofl@arg+1,w,c
  8057  002084  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  8058  002086  0E00               	movlw	0
  8059  002088  142D               	andwf	___xxtofl@arg+2,w,c
  8060  00208A  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  8061  00208C  0EFE               	movlw	254
  8062  00208E  142E               	andwf	___xxtofl@arg+3,w,c
  8063  002090  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  8064  002092  5025               	movf	??___xxtofl,w,c
  8065  002094  1026               	iorwf	??___xxtofl+1,w,c
  8066  002096  1027               	iorwf	??___xxtofl+2,w,c
  8067  002098  1028               	iorwf	??___xxtofl+3,w,c
  8068  00209A  B4D8               	btfsc	status,2,c
  8069  00209C  D00D               	goto	l1044
  8070  00209E  D7E7               	goto	l1042
  8071  0020A0  2A2A               	incf	___xxtofl@exp,f,c
  8072  0020A2  0E01               	movlw	1
  8073  0020A4  262B               	addwf	___xxtofl@arg,f,c
  8074  0020A6  0E00               	movlw	0
  8075  0020A8  222C               	addwfc	___xxtofl@arg+1,f,c
  8076  0020AA  222D               	addwfc	___xxtofl@arg+2,f,c
  8077  0020AC  222E               	addwfc	___xxtofl@arg+3,f,c
  8078  0020AE  90D8               	bcf	status,0,c
  8079  0020B0  322E               	rrcf	___xxtofl@arg+3,f,c
  8080  0020B2  322D               	rrcf	___xxtofl@arg+2,f,c
  8081  0020B4  322C               	rrcf	___xxtofl@arg+1,f,c
  8082  0020B6  322B               	rrcf	___xxtofl@arg,f,c
  8083  0020B8                     l1044:
  8084  0020B8  0E00               	movlw	0
  8085  0020BA  142B               	andwf	___xxtofl@arg,w,c
  8086  0020BC  6E25               	movwf	??___xxtofl& (0+255),c
  8087  0020BE  0E00               	movlw	0
  8088  0020C0  142C               	andwf	___xxtofl@arg+1,w,c
  8089  0020C2  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  8090  0020C4  0E00               	movlw	0
  8091  0020C6  142D               	andwf	___xxtofl@arg+2,w,c
  8092  0020C8  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  8093  0020CA  0EFF               	movlw	255
  8094  0020CC  142E               	andwf	___xxtofl@arg+3,w,c
  8095  0020CE  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  8096  0020D0  5025               	movf	??___xxtofl,w,c
  8097  0020D2  1026               	iorwf	??___xxtofl+1,w,c
  8098  0020D4  1027               	iorwf	??___xxtofl+2,w,c
  8099  0020D6  1028               	iorwf	??___xxtofl+3,w,c
  8100  0020D8  B4D8               	btfsc	status,2,c
  8101  0020DA  D007               	goto	l1047
  8102  0020DC  D7E1               	goto	l1045
  8103  0020DE  062A               	decf	___xxtofl@exp,f,c
  8104  0020E0  90D8               	bcf	status,0,c
  8105  0020E2  362B               	rlcf	___xxtofl@arg,f,c
  8106  0020E4  362C               	rlcf	___xxtofl@arg+1,f,c
  8107  0020E6  362D               	rlcf	___xxtofl@arg+2,f,c
  8108  0020E8  362E               	rlcf	___xxtofl@arg+3,f,c
  8109  0020EA                     l1047:
  8110  0020EA  BE2D               	btfsc	___xxtofl@arg+2,7,c
  8111  0020EC  D003               	goto	u6310
  8112  0020EE  0E02               	movlw	2
  8113  0020F0  602A               	cpfslt	___xxtofl@exp,c
  8114  0020F2  D7F5               	goto	l1048
  8115  0020F4                     u6310:
  8116  0020F4  B02A               	btfsc	___xxtofl@exp,0,c
  8117  0020F6  D008               	goto	l1052
  8118  0020F8  0EFF               	movlw	255
  8119  0020FA  162B               	andwf	___xxtofl@arg,f,c
  8120  0020FC  0EFF               	movlw	255
  8121  0020FE  162C               	andwf	___xxtofl@arg+1,f,c
  8122  002100  0E7F               	movlw	127
  8123  002102  162D               	andwf	___xxtofl@arg+2,f,c
  8124  002104  0EFF               	movlw	255
  8125  002106  162E               	andwf	___xxtofl@arg+3,f,c
  8126  002108                     l1052:
  8127  002108  90D8               	bcf	status,0,c
  8128  00210A  322A               	rrcf	___xxtofl@exp,f,c
  8129  00210C  C02A  F025         	movff	___xxtofl@exp,??___xxtofl
  8130  002110  6A26               	clrf	(??___xxtofl+1)& (0+255),c
  8131  002112  6A27               	clrf	(??___xxtofl+2)& (0+255),c
  8132  002114  6A28               	clrf	(??___xxtofl+3)& (0+255),c
  8133  002116  C025  F028         	movff	??___xxtofl,??___xxtofl+3
  8134  00211A  6A27               	clrf	??___xxtofl+2,c
  8135  00211C  6A26               	clrf	??___xxtofl+1,c
  8136  00211E  6A25               	clrf	??___xxtofl,c
  8137  002120  5025               	movf	??___xxtofl,w,c
  8138  002122  122B               	iorwf	___xxtofl@arg,f,c
  8139  002124  5026               	movf	??___xxtofl+1,w,c
  8140  002126  122C               	iorwf	___xxtofl@arg+1,f,c
  8141  002128  5027               	movf	??___xxtofl+2,w,c
  8142  00212A  122D               	iorwf	___xxtofl@arg+2,f,c
  8143  00212C  5028               	movf	??___xxtofl+3,w,c
  8144  00212E  122E               	iorwf	___xxtofl@arg+3,f,c
  8145  002130  5029               	movf	___xxtofl@sign,w,c
  8146  002132  A4D8               	btfss	status,2,c
  8147  002134  AE24               	btfss	___xxtofl@val+3,7,c
  8148  002136  D001               	goto	l1053
  8149  002138  8E2E               	bsf	___xxtofl@arg+3,7,c
  8150  00213A                     l1053:
  8151  00213A  C02B  F021         	movff	___xxtofl@arg,?___xxtofl
  8152  00213E  C02C  F022         	movff	___xxtofl@arg+1,?___xxtofl+1
  8153  002142  C02D  F023         	movff	___xxtofl@arg+2,?___xxtofl+2
  8154  002146  C02E  F024         	movff	___xxtofl@arg+3,?___xxtofl+3
  8155  00214A  0012               	return	
  8156  00214C                     __end_of___xxtofl:
  8157                           	opt stack 0
  8158                           tblptru	equ	0xFF8
  8159                           tblptrh	equ	0xFF7
  8160                           tblptrl	equ	0xFF6
  8161                           tablat	equ	0xFF5
  8162                           prodh	equ	0xFF4
  8163                           prodl	equ	0xFF3
  8164                           postinc0	equ	0xFEE
  8165                           wreg	equ	0xFE8
  8166                           indf1	equ	0xFE7
  8167                           postdec1	equ	0xFE5
  8168                           fsr1h	equ	0xFE2
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function ___wmul *****************
  8178 ;; Defined at:
  8179 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  multiplier      2   26[COMRAM] unsigned int 
  8182 ;;  multiplicand    2   28[COMRAM] unsigned int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  product         2   30[COMRAM] unsigned int 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  2   26[COMRAM] unsigned int 
  8187 ;; Registers used:
  8188 ;;		wreg, status,2, status,0, prodl, prodh
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;Total ram usage:        6 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    2
  8201 ;; This function calls:
  8202 ;;		Nothing
  8203 ;; This function is called by:
  8204 ;;		_main
  8205 ;;		_read_adc_voltage
  8206 ;;		_sprintf
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text25
  8211  002DB2                     __ptext25:
  8212                           	opt stack 0
  8213  002DB2                     ___wmul:
  8214                           	opt stack 27
  8215                           
  8216                           ;incstack = 0
  8217  002DB2  501B               	movf	___wmul@multiplier,w,c
  8218  002DB4  021D               	mulwf	___wmul@multiplicand,c
  8219  002DB6  CFF3 F01F          	movff	prodl,___wmul@product
  8220  002DBA  CFF4 F020          	movff	prodh,___wmul@product+1
  8221  002DBE  501B               	movf	___wmul@multiplier,w,c
  8222  002DC0  021E               	mulwf	___wmul@multiplicand+1,c
  8223  002DC2  50F3               	movf	prodl,w,c
  8224  002DC4  2620               	addwf	___wmul@product+1,f,c
  8225  002DC6  501C               	movf	___wmul@multiplier+1,w,c
  8226  002DC8  021D               	mulwf	___wmul@multiplicand,c
  8227  002DCA  50F3               	movf	prodl,w,c
  8228  002DCC  2620               	addwf	___wmul@product+1,f,c
  8229  002DCE  C01F  F01B         	movff	___wmul@product,?___wmul
  8230  002DD2  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  8231  002DD6  0012               	return	
  8232  002DD8                     __end_of___wmul:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           postinc0	equ	0xFEE
  8241                           wreg	equ	0xFE8
  8242                           indf1	equ	0xFE7
  8243                           postdec1	equ	0xFE5
  8244                           fsr1h	equ	0xFE2
  8245                           fsr1l	equ	0xFE1
  8246                           indf2	equ	0xFDF
  8247                           postinc2	equ	0xFDE
  8248                           postdec2	equ	0xFDD
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function ___fldiv *****************
  8254 ;; Defined at:
  8255 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;  b               4   65[COMRAM] unsigned int 
  8258 ;;  a               4   69[COMRAM] unsigned int 
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  grs             4   84[COMRAM] unsigned long 
  8261 ;;  rem             4   78[COMRAM] unsigned long 
  8262 ;;  new_exp         2   82[COMRAM] int 
  8263 ;;  aexp            1   89[COMRAM] unsigned char 
  8264 ;;  bexp            1   88[COMRAM] unsigned char 
  8265 ;;  sign            1   77[COMRAM] unsigned char 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  4   65[COMRAM] unsigned char 
  8268 ;; Registers used:
  8269 ;;		wreg, status,2, status,0
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8275 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;Total ram usage:       25 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    2
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		_main
  8286 ;;		_read_adc_voltage
  8287 ;;		_set_pwm1_percent
  8288 ;;		_set_pwm1_voltage
  8289 ;;		_set_pwm1_general
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text26
  8294  001ABE                     __ptext26:
  8295                           	opt stack 0
  8296  001ABE                     ___fldiv:
  8297                           	opt stack 27
  8298                           
  8299                           ;incstack = 0
  8300  001ABE  5045               	movf	___fldiv@b+3,w,c
  8301  001AC0  0B80               	andlw	128
  8302  001AC2  6E4E               	movwf	___fldiv@sign,c
  8303  001AC4  5045               	movf	___fldiv@b+3,w,c
  8304  001AC6  2445               	addwf	___fldiv@b+3,w,c
  8305  001AC8  6E59               	movwf	___fldiv@bexp,c
  8306  001ACA  BE44               	btfsc	___fldiv@b+2,7,c
  8307  001ACC  8059               	bsf	___fldiv@bexp,0,c
  8308  001ACE  5059               	movf	___fldiv@bexp,w,c
  8309  001AD0  B4D8               	btfsc	status,2,c
  8310  001AD2  D00D               	goto	l975
  8311  001AD4  2859               	incf	___fldiv@bexp,w,c
  8312  001AD6  A4D8               	btfss	status,2,c
  8313  001AD8  D008               	goto	l976
  8314  001ADA  0E00               	movlw	0
  8315  001ADC  6E42               	movwf	___fldiv@b,c
  8316  001ADE  0E00               	movlw	0
  8317  001AE0  6E43               	movwf	___fldiv@b+1,c
  8318  001AE2  0E00               	movlw	0
  8319  001AE4  6E44               	movwf	___fldiv@b+2,c
  8320  001AE6  0E00               	movlw	0
  8321  001AE8  6E45               	movwf	___fldiv@b+3,c
  8322  001AEA                     l976:
  8323  001AEA  8E44               	bsf	___fldiv@b+2,7,c
  8324  001AEC  D006               	goto	L7
  8325  001AEE                     l975:
  8326  001AEE  0E00               	movlw	0
  8327  001AF0  6E42               	movwf	___fldiv@b,c
  8328  001AF2  0E00               	movlw	0
  8329  001AF4  6E43               	movwf	___fldiv@b+1,c
  8330  001AF6  0E00               	movlw	0
  8331  001AF8  6E44               	movwf	___fldiv@b+2,c
  8332  001AFA                     L7:
  8333  001AFA  0E00               	movlw	0
  8334  001AFC  6E45               	movwf	___fldiv@b+3,c
  8335  001AFE  5049               	movf	___fldiv@a+3,w,c
  8336  001B00  0B80               	andlw	128
  8337  001B02  1A4E               	xorwf	___fldiv@sign,f,c
  8338  001B04  5049               	movf	___fldiv@a+3,w,c
  8339  001B06  2449               	addwf	___fldiv@a+3,w,c
  8340  001B08  6E5A               	movwf	___fldiv@aexp,c
  8341  001B0A  BE48               	btfsc	___fldiv@a+2,7,c
  8342  001B0C  805A               	bsf	___fldiv@aexp,0,c
  8343  001B0E  505A               	movf	___fldiv@aexp,w,c
  8344  001B10  B4D8               	btfsc	status,2,c
  8345  001B12  D00D               	goto	l979
  8346  001B14  285A               	incf	___fldiv@aexp,w,c
  8347  001B16  A4D8               	btfss	status,2,c
  8348  001B18  D008               	goto	l980
  8349  001B1A  0E00               	movlw	0
  8350  001B1C  6E46               	movwf	___fldiv@a,c
  8351  001B1E  0E00               	movlw	0
  8352  001B20  6E47               	movwf	___fldiv@a+1,c
  8353  001B22  0E00               	movlw	0
  8354  001B24  6E48               	movwf	___fldiv@a+2,c
  8355  001B26  0E00               	movlw	0
  8356  001B28  6E49               	movwf	___fldiv@a+3,c
  8357  001B2A                     l980:
  8358  001B2A  8E48               	bsf	___fldiv@a+2,7,c
  8359  001B2C  D006               	goto	L8
  8360  001B2E                     l979:
  8361  001B2E  0E00               	movlw	0
  8362  001B30  6E46               	movwf	___fldiv@a,c
  8363  001B32  0E00               	movlw	0
  8364  001B34  6E47               	movwf	___fldiv@a+1,c
  8365  001B36  0E00               	movlw	0
  8366  001B38  6E48               	movwf	___fldiv@a+2,c
  8367  001B3A                     L8:
  8368  001B3A  0E00               	movlw	0
  8369  001B3C  6E49               	movwf	___fldiv@a+3,c
  8370  001B3E  5046               	movf	___fldiv@a,w,c
  8371  001B40  1047               	iorwf	___fldiv@a+1,w,c
  8372  001B42  1048               	iorwf	___fldiv@a+2,w,c
  8373  001B44  1049               	iorwf	___fldiv@a+3,w,c
  8374  001B46  A4D8               	btfss	status,2,c
  8375  001B48  D015               	goto	l982
  8376  001B4A  0E00               	movlw	0
  8377  001B4C  6E42               	movwf	___fldiv@b,c
  8378  001B4E  0E00               	movlw	0
  8379  001B50  6E43               	movwf	___fldiv@b+1,c
  8380  001B52  0E00               	movlw	0
  8381  001B54  6E44               	movwf	___fldiv@b+2,c
  8382  001B56  0E00               	movlw	0
  8383  001B58  6E45               	movwf	___fldiv@b+3,c
  8384  001B5A  0E80               	movlw	128
  8385  001B5C  1244               	iorwf	___fldiv@b+2,f,c
  8386  001B5E  0E7F               	movlw	127
  8387  001B60  1245               	iorwf	___fldiv@b+3,f,c
  8388  001B62  C042  F042         	movff	___fldiv@b,?___fldiv
  8389  001B66  C043  F043         	movff	___fldiv@b+1,?___fldiv+1
  8390  001B6A  C044  F044         	movff	___fldiv@b+2,?___fldiv+2
  8391  001B6E  C045  F045         	movff	___fldiv@b+3,?___fldiv+3
  8392  001B72  0012               	return	
  8393  001B74                     l982:
  8394  001B74  5059               	movf	___fldiv@bexp,w,c
  8395  001B76  A4D8               	btfss	status,2,c
  8396  001B78  D011               	goto	l984
  8397  001B7A  0E00               	movlw	0
  8398  001B7C  6E42               	movwf	___fldiv@b,c
  8399  001B7E  0E00               	movlw	0
  8400  001B80  6E43               	movwf	___fldiv@b+1,c
  8401  001B82  0E00               	movlw	0
  8402  001B84  6E44               	movwf	___fldiv@b+2,c
  8403  001B86  0E00               	movlw	0
  8404  001B88  6E45               	movwf	___fldiv@b+3,c
  8405  001B8A  C042  F042         	movff	___fldiv@b,?___fldiv
  8406  001B8E  C043  F043         	movff	___fldiv@b+1,?___fldiv+1
  8407  001B92  C044  F044         	movff	___fldiv@b+2,?___fldiv+2
  8408  001B96  C045  F045         	movff	___fldiv@b+3,?___fldiv+3
  8409  001B9A  0012               	return	
  8410  001B9C                     l984:
  8411  001B9C  505A               	movf	___fldiv@aexp,w,c
  8412  001B9E  6E4A               	movwf	??___fldiv& (0+255),c
  8413  001BA0  6A4B               	clrf	(??___fldiv+1)& (0+255),c
  8414  001BA2  1E4A               	comf	??___fldiv,f,c
  8415  001BA4  1E4B               	comf	??___fldiv+1,f,c
  8416  001BA6  4A4A               	infsnz	??___fldiv,f,c
  8417  001BA8  2A4B               	incf	??___fldiv+1,f,c
  8418  001BAA  5059               	movf	___fldiv@bexp,w,c
  8419  001BAC  6E4C               	movwf	(??___fldiv+2)& (0+255),c
  8420  001BAE  6A4D               	clrf	(??___fldiv+3)& (0+255),c
  8421  001BB0  504A               	movf	??___fldiv,w,c
  8422  001BB2  264C               	addwf	??___fldiv+2,f,c
  8423  001BB4  504B               	movf	??___fldiv+1,w,c
  8424  001BB6  224D               	addwfc	??___fldiv+3,f,c
  8425  001BB8  0E7F               	movlw	127
  8426  001BBA  244C               	addwf	??___fldiv+2,w,c
  8427  001BBC  6E53               	movwf	___fldiv@new_exp,c
  8428  001BBE  0E00               	movlw	0
  8429  001BC0  204D               	addwfc	??___fldiv+3,w,c
  8430  001BC2  6E54               	movwf	___fldiv@new_exp+1,c
  8431  001BC4  C042  F04F         	movff	___fldiv@b,___fldiv@rem
  8432  001BC8  C043  F050         	movff	___fldiv@b+1,___fldiv@rem+1
  8433  001BCC  C044  F051         	movff	___fldiv@b+2,___fldiv@rem+2
  8434  001BD0  C045  F052         	movff	___fldiv@b+3,___fldiv@rem+3
  8435  001BD4  0E00               	movlw	0
  8436  001BD6  6E42               	movwf	___fldiv@b,c
  8437  001BD8  0E00               	movlw	0
  8438  001BDA  6E43               	movwf	___fldiv@b+1,c
  8439  001BDC  0E00               	movlw	0
  8440  001BDE  6E44               	movwf	___fldiv@b+2,c
  8441  001BE0  0E00               	movlw	0
  8442  001BE2  6E45               	movwf	___fldiv@b+3,c
  8443  001BE4  0E00               	movlw	0
  8444  001BE6  6E55               	movwf	___fldiv@grs,c
  8445  001BE8  0E00               	movlw	0
  8446  001BEA  6E56               	movwf	___fldiv@grs+1,c
  8447  001BEC  0E00               	movlw	0
  8448  001BEE  6E57               	movwf	___fldiv@grs+2,c
  8449  001BF0  0E00               	movlw	0
  8450  001BF2  6E58               	movwf	___fldiv@grs+3,c
  8451  001BF4  0E00               	movlw	0
  8452  001BF6  6E5A               	movwf	___fldiv@aexp,c
  8453  001BF8  D028               	goto	l985
  8454  001BFA  505A               	movf	___fldiv@aexp,w,c
  8455  001BFC  B4D8               	btfsc	status,2,c
  8456  001BFE  D011               	goto	l987
  8457  001C00  90D8               	bcf	status,0,c
  8458  001C02  364F               	rlcf	___fldiv@rem,f,c
  8459  001C04  3650               	rlcf	___fldiv@rem+1,f,c
  8460  001C06  3651               	rlcf	___fldiv@rem+2,f,c
  8461  001C08  3652               	rlcf	___fldiv@rem+3,f,c
  8462  001C0A  90D8               	bcf	status,0,c
  8463  001C0C  3642               	rlcf	___fldiv@b,f,c
  8464  001C0E  3643               	rlcf	___fldiv@b+1,f,c
  8465  001C10  3644               	rlcf	___fldiv@b+2,f,c
  8466  001C12  3645               	rlcf	___fldiv@b+3,f,c
  8467  001C14  BE58               	btfsc	___fldiv@grs+3,7,c
  8468  001C16  8042               	bsf	___fldiv@b,0,c
  8469  001C18  90D8               	bcf	status,0,c
  8470  001C1A  3655               	rlcf	___fldiv@grs,f,c
  8471  001C1C  3656               	rlcf	___fldiv@grs+1,f,c
  8472  001C1E  3657               	rlcf	___fldiv@grs+2,f,c
  8473  001C20  3658               	rlcf	___fldiv@grs+3,f,c
  8474  001C22                     l987:
  8475  001C22  5046               	movf	___fldiv@a,w,c
  8476  001C24  5C4F               	subwf	___fldiv@rem,w,c
  8477  001C26  5047               	movf	___fldiv@a+1,w,c
  8478  001C28  5850               	subwfb	___fldiv@rem+1,w,c
  8479  001C2A  5048               	movf	___fldiv@a+2,w,c
  8480  001C2C  5851               	subwfb	___fldiv@rem+2,w,c
  8481  001C2E  5049               	movf	___fldiv@a+3,w,c
  8482  001C30  5852               	subwfb	___fldiv@rem+3,w,c
  8483  001C32  A0D8               	btfss	status,0,c
  8484  001C34  D009               	goto	l989
  8485  001C36  8C58               	bsf	___fldiv@grs+3,6,c
  8486  001C38  5046               	movf	___fldiv@a,w,c
  8487  001C3A  5E4F               	subwf	___fldiv@rem,f,c
  8488  001C3C  5047               	movf	___fldiv@a+1,w,c
  8489  001C3E  5A50               	subwfb	___fldiv@rem+1,f,c
  8490  001C40  5048               	movf	___fldiv@a+2,w,c
  8491  001C42  5A51               	subwfb	___fldiv@rem+2,f,c
  8492  001C44  5049               	movf	___fldiv@a+3,w,c
  8493  001C46  5A52               	subwfb	___fldiv@rem+3,f,c
  8494  001C48                     l989:
  8495  001C48  2A5A               	incf	___fldiv@aexp,f,c
  8496  001C4A                     l985:
  8497  001C4A  0E19               	movlw	25
  8498  001C4C  645A               	cpfsgt	___fldiv@aexp,c
  8499  001C4E  D7D5               	goto	l986
  8500  001C50  504F               	movf	___fldiv@rem,w,c
  8501  001C52  1050               	iorwf	___fldiv@rem+1,w,c
  8502  001C54  1051               	iorwf	___fldiv@rem+2,w,c
  8503  001C56  1052               	iorwf	___fldiv@rem+3,w,c
  8504  001C58  B4D8               	btfsc	status,2,c
  8505  001C5A  D011               	goto	l992
  8506  001C5C  8055               	bsf	___fldiv@grs,0,c
  8507  001C5E  D00F               	goto	l992
  8508  001C60  90D8               	bcf	status,0,c
  8509  001C62  3642               	rlcf	___fldiv@b,f,c
  8510  001C64  3643               	rlcf	___fldiv@b+1,f,c
  8511  001C66  3644               	rlcf	___fldiv@b+2,f,c
  8512  001C68  3645               	rlcf	___fldiv@b+3,f,c
  8513  001C6A  BE58               	btfsc	___fldiv@grs+3,7,c
  8514  001C6C  8042               	bsf	___fldiv@b,0,c
  8515  001C6E  90D8               	bcf	status,0,c
  8516  001C70  3655               	rlcf	___fldiv@grs,f,c
  8517  001C72  3656               	rlcf	___fldiv@grs+1,f,c
  8518  001C74  3657               	rlcf	___fldiv@grs+2,f,c
  8519  001C76  3658               	rlcf	___fldiv@grs+3,f,c
  8520  001C78  0653               	decf	___fldiv@new_exp,f,c
  8521  001C7A  A0D8               	btfss	status,0,c
  8522  001C7C  0654               	decf	___fldiv@new_exp+1,f,c
  8523  001C7E                     l992:
  8524  001C7E  AE44               	btfss	___fldiv@b+2,7,c
  8525  001C80  D7EF               	goto	l993
  8526  001C82  0E00               	movlw	0
  8527  001C84  6E5A               	movwf	___fldiv@aexp,c
  8528  001C86  AE58               	btfss	___fldiv@grs+3,7,c
  8529  001C88  D016               	goto	l999
  8530  001C8A  0EFF               	movlw	255
  8531  001C8C  1455               	andwf	___fldiv@grs,w,c
  8532  001C8E  6E4A               	movwf	??___fldiv& (0+255),c
  8533  001C90  0EFF               	movlw	255
  8534  001C92  1456               	andwf	___fldiv@grs+1,w,c
  8535  001C94  6E4B               	movwf	(??___fldiv+1)& (0+255),c
  8536  001C96  0EFF               	movlw	255
  8537  001C98  1457               	andwf	___fldiv@grs+2,w,c
  8538  001C9A  6E4C               	movwf	(??___fldiv+2)& (0+255),c
  8539  001C9C  0E7F               	movlw	127
  8540  001C9E  1458               	andwf	___fldiv@grs+3,w,c
  8541  001CA0  6E4D               	movwf	(??___fldiv+3)& (0+255),c
  8542  001CA2  504A               	movf	??___fldiv,w,c
  8543  001CA4  104B               	iorwf	??___fldiv+1,w,c
  8544  001CA6  104C               	iorwf	??___fldiv+2,w,c
  8545  001CA8  104D               	iorwf	??___fldiv+3,w,c
  8546  001CAA  A4D8               	btfss	status,2,c
  8547  001CAC  D002               	goto	u6000
  8548  001CAE  A042               	btfss	___fldiv@b,0,c
  8549  001CB0  D002               	goto	l999
  8550  001CB2                     u6000:
  8551  001CB2  0E01               	movlw	1
  8552  001CB4  6E5A               	movwf	___fldiv@aexp,c
  8553  001CB6                     l999:
  8554  001CB6  505A               	movf	___fldiv@aexp,w,c
  8555  001CB8  B4D8               	btfsc	status,2,c
  8556  001CBA  D01F               	goto	l1001
  8557  001CBC  0E01               	movlw	1
  8558  001CBE  2642               	addwf	___fldiv@b,f,c
  8559  001CC0  0E00               	movlw	0
  8560  001CC2  2243               	addwfc	___fldiv@b+1,f,c
  8561  001CC4  2244               	addwfc	___fldiv@b+2,f,c
  8562  001CC6  2245               	addwfc	___fldiv@b+3,f,c
  8563  001CC8  A045               	btfss	___fldiv@b+3,0,c
  8564  001CCA  D017               	goto	l1001
  8565  001CCC  C042  F04A         	movff	___fldiv@b,??___fldiv
  8566  001CD0  C043  F04B         	movff	___fldiv@b+1,??___fldiv+1
  8567  001CD4  C044  F04C         	movff	___fldiv@b+2,??___fldiv+2
  8568  001CD8  C045  F04D         	movff	___fldiv@b+3,??___fldiv+3
  8569  001CDC  344D               	rlcf	??___fldiv+3,w,c
  8570  001CDE  324D               	rrcf	??___fldiv+3,f,c
  8571  001CE0  324C               	rrcf	??___fldiv+2,f,c
  8572  001CE2  324B               	rrcf	??___fldiv+1,f,c
  8573  001CE4  324A               	rrcf	??___fldiv,f,c
  8574  001CE6  C04A  F042         	movff	??___fldiv,___fldiv@b
  8575  001CEA  C04B  F043         	movff	??___fldiv+1,___fldiv@b+1
  8576  001CEE  C04C  F044         	movff	??___fldiv+2,___fldiv@b+2
  8577  001CF2  C04D  F045         	movff	??___fldiv+3,___fldiv@b+3
  8578  001CF6  4A53               	infsnz	___fldiv@new_exp,f,c
  8579  001CF8  2A54               	incf	___fldiv@new_exp+1,f,c
  8580  001CFA                     l1001:
  8581  001CFA  BE54               	btfsc	___fldiv@new_exp+1,7,c
  8582  001CFC  D010               	goto	l1002
  8583  001CFE  5054               	movf	___fldiv@new_exp+1,w,c
  8584  001D00  E103               	bnz	u6030
  8585  001D02  2853               	incf	___fldiv@new_exp,w,c
  8586  001D04  A0D8               	btfss	status,0,c
  8587  001D06  D00B               	goto	l1002
  8588  001D08                     u6030:
  8589  001D08  0E00               	movlw	0
  8590  001D0A  6E54               	movwf	___fldiv@new_exp+1,c
  8591  001D0C  6853               	setf	___fldiv@new_exp,c
  8592  001D0E  0E00               	movlw	0
  8593  001D10  6E42               	movwf	___fldiv@b,c
  8594  001D12  0E00               	movlw	0
  8595  001D14  6E43               	movwf	___fldiv@b+1,c
  8596  001D16  0E00               	movlw	0
  8597  001D18  6E44               	movwf	___fldiv@b+2,c
  8598  001D1A  0E00               	movlw	0
  8599  001D1C  6E45               	movwf	___fldiv@b+3,c
  8600  001D1E                     l1002:
  8601  001D1E  BE54               	btfsc	___fldiv@new_exp+1,7,c
  8602  001D20  D005               	goto	u6040
  8603  001D22  5054               	movf	___fldiv@new_exp+1,w,c
  8604  001D24  E111               	bnz	l5355
  8605  001D26  0453               	decf	___fldiv@new_exp,w,c
  8606  001D28  B0D8               	btfsc	status,0,c
  8607  001D2A  D00E               	goto	l1003
  8608  001D2C                     u6040:
  8609  001D2C  0E00               	movlw	0
  8610  001D2E  6E54               	movwf	___fldiv@new_exp+1,c
  8611  001D30  0E00               	movlw	0
  8612  001D32  6E53               	movwf	___fldiv@new_exp,c
  8613  001D34  0E00               	movlw	0
  8614  001D36  6E42               	movwf	___fldiv@b,c
  8615  001D38  0E00               	movlw	0
  8616  001D3A  6E43               	movwf	___fldiv@b+1,c
  8617  001D3C  0E00               	movlw	0
  8618  001D3E  6E44               	movwf	___fldiv@b+2,c
  8619  001D40  0E00               	movlw	0
  8620  001D42  6E45               	movwf	___fldiv@b+3,c
  8621  001D44  0E00               	movlw	0
  8622  001D46  6E4E               	movwf	___fldiv@sign,c
  8623  001D48                     l1003:
  8624  001D48                     l5355:
  8625  001D48  C053  F059         	movff	___fldiv@new_exp,___fldiv@bexp
  8626  001D4C  A059               	btfss	___fldiv@bexp,0,c
  8627  001D4E  D002               	goto	l1004
  8628  001D50  8E44               	bsf	___fldiv@b+2,7,c
  8629  001D52  D001               	goto	l1005
  8630  001D54                     l1004:
  8631  001D54  9E44               	bcf	___fldiv@b+2,7,c
  8632  001D56                     l1005:
  8633  001D56  90D8               	bcf	status,0,c
  8634  001D58  3059               	rrcf	___fldiv@bexp,w,c
  8635  001D5A  6E45               	movwf	___fldiv@b+3,c
  8636  001D5C  504E               	movf	___fldiv@sign,w,c
  8637  001D5E  1245               	iorwf	___fldiv@b+3,f,c
  8638  001D60  C042  F042         	movff	___fldiv@b,?___fldiv
  8639  001D64  C043  F043         	movff	___fldiv@b+1,?___fldiv+1
  8640  001D68  C044  F044         	movff	___fldiv@b+2,?___fldiv+2
  8641  001D6C  C045  F045         	movff	___fldiv@b+3,?___fldiv+3
  8642  001D70  0012               	return	
  8643  001D72                     __end_of___fldiv:
  8644                           	opt stack 0
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodh	equ	0xFF4
  8650                           prodl	equ	0xFF3
  8651                           postinc0	equ	0xFEE
  8652                           wreg	equ	0xFE8
  8653                           indf1	equ	0xFE7
  8654                           postdec1	equ	0xFE5
  8655                           fsr1h	equ	0xFE2
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function _lcd_puts *****************
  8665 ;; Defined at:
  8666 ;;		line 120 in file "lcd_x8.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  s               2   40[COMRAM] PTR unsigned char 
  8669 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  8670 ;;		 -> main@Buffer(32), 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;		None
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;Total ram usage:        2 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    7
  8689 ;; This function calls:
  8690 ;;		_lcd_putc
  8691 ;; This function is called by:
  8692 ;;		_main
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text27
  8697  002A94                     __ptext27:
  8698                           	opt stack 0
  8699  002A94                     _lcd_puts:
  8700                           	opt stack 23
  8701                           
  8702                           ;lcd_x8.c: 121: while (*s) {
  8703                           
  8704                           ;incstack = 0
  8705  002A94  D015               	goto	l208
  8706  002A96                     
  8707                           ;lcd_x8.c: 122: lcd_putc(*s);
  8708  002A96  C029  FFF6         	movff	lcd_puts@s,tblptrl
  8709  002A9A  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  8710  002A9E  0E00               	movlw	low (__mediumconst shr (0+16))
  8711  002AA0  6EF8               	movwf	tblptru,c
  8712  002AA2  0E0F               	movlw	(high __ramtop+-1)
  8713  002AA4  64F7               	cpfsgt	tblptrh,c
  8714  002AA6  D003               	bra	u6937
  8715  002AA8  0008               	tblrd		*
  8716  002AAA  50F5               	movf	tablat,w,c
  8717  002AAC  D005               	bra	u6930
  8718  002AAE                     u6937:
  8719  002AAE  CFF6 FFE1          	movff	tblptrl,fsr1l
  8720  002AB2  CFF7 FFE2          	movff	tblptrh,fsr1h
  8721  002AB6  50E7               	movf	indf1,w,c
  8722  002AB8                     u6930:
  8723  002AB8  EC75  F015         	call	_lcd_putc
  8724                           
  8725                           ;lcd_x8.c: 123: s++;
  8726  002ABC  4A29               	infsnz	lcd_puts@s,f,c
  8727  002ABE  2A2A               	incf	lcd_puts@s+1,f,c
  8728  002AC0                     l208:
  8729  002AC0  C029  FFF6         	movff	lcd_puts@s,tblptrl
  8730  002AC4  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  8731  002AC8  0E00               	movlw	low (__mediumconst shr (0+16))
  8732  002ACA  6EF8               	movwf	tblptru,c
  8733  002ACC  0E0F               	movlw	(high __ramtop+-1)
  8734  002ACE  64F7               	cpfsgt	tblptrh,c
  8735  002AD0  D003               	bra	u6947
  8736  002AD2  0008               	tblrd		*
  8737  002AD4  50F5               	movf	tablat,w,c
  8738  002AD6  D005               	bra	u6940
  8739  002AD8                     u6947:
  8740  002AD8  CFF6 FFE1          	movff	tblptrl,fsr1l
  8741  002ADC  CFF7 FFE2          	movff	tblptrh,fsr1h
  8742  002AE0  50E7               	movf	indf1,w,c
  8743  002AE2                     u6940:
  8744  002AE2  0900               	iorlw	0
  8745  002AE4  B4D8               	btfsc	status,2,c
  8746  002AE6  0012               	return	
  8747  002AE8  D7D6               	goto	l209
  8748  002AEA                     __end_of_lcd_puts:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           postinc0	equ	0xFEE
  8757                           wreg	equ	0xFE8
  8758                           indf1	equ	0xFE7
  8759                           postdec1	equ	0xFE5
  8760                           fsr1h	equ	0xFE2
  8761                           fsr1l	equ	0xFE1
  8762                           indf2	equ	0xFDF
  8763                           postinc2	equ	0xFDE
  8764                           postdec2	equ	0xFDD
  8765                           fsr2h	equ	0xFDA
  8766                           fsr2l	equ	0xFD9
  8767                           status	equ	0xFD8
  8768                           
  8769 ;; *************** function _lcd_putc *****************
  8770 ;; Defined at:
  8771 ;;		line 106 in file "lcd_x8.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;  c               1    wreg     unsigned char 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  c               1   39[COMRAM] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, status,2, status,0, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:        1 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    6
  8792 ;; This function calls:
  8793 ;;		_delay_ms
  8794 ;;		_lcd_gotoxy
  8795 ;;		_lcd_send_byte
  8796 ;; This function is called by:
  8797 ;;		_main
  8798 ;;		_lcd_puts
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text28
  8803  002AEA                     __ptext28:
  8804                           	opt stack 0
  8805  002AEA                     _lcd_putc:
  8806                           	opt stack 23
  8807                           
  8808                           ;incstack = 0
  8809                           ;lcd_putc@c stored from wreg
  8810  002AEA  6E28               	movwf	lcd_putc@c,c
  8811                           
  8812                           ;lcd_x8.c: 107: switch (c) {
  8813  002AEC  D01E               	goto	l199
  8814  002AEE  0E01               	movlw	1
  8815  002AF0  6E23               	movwf	lcd_send_byte@n,c
  8816  002AF2  0E00               	movlw	0
  8817  002AF4  EC12  F016         	call	_lcd_send_byte
  8818                           
  8819                           ;lcd_x8.c: 109: delay_ms(2);
  8820  002AF8  0E00               	movlw	0
  8821  002AFA  6E1C               	movwf	delay_ms@n+1,c
  8822  002AFC  0E02               	movlw	2
  8823  002AFE  6E1B               	movwf	delay_ms@n,c
  8824  002B00  ECEC  F016         	call	_delay_ms	;wreg free
  8825                           
  8826                           ;lcd_x8.c: 110: break;
  8827  002B04  0012               	return	
  8828  002B06  0E02               	movlw	2
  8829  002B08  6E25               	movwf	lcd_gotoxy@y,c
  8830  002B0A  0E01               	movlw	1
  8831  002B0C  EC36  F016         	call	_lcd_gotoxy
  8832                           
  8833                           ;lcd_x8.c: 112: break;
  8834  002B10  0012               	return	
  8835  002B12  0E10               	movlw	16
  8836  002B14  6E23               	movwf	lcd_send_byte@n,c
  8837  002B16  0E00               	movlw	0
  8838  002B18  EC12  F016         	call	_lcd_send_byte
  8839                           
  8840                           ;lcd_x8.c: 114: break;
  8841  002B1C  0012               	return	
  8842  002B1E  C028  F023         	movff	lcd_putc@c,lcd_send_byte@n
  8843  002B22  0E01               	movlw	1
  8844  002B24  EC12  F016         	call	_lcd_send_byte
  8845                           
  8846                           ;lcd_x8.c: 117: }
  8847                           
  8848                           ;lcd_x8.c: 116: break;
  8849  002B28  0012               	return	
  8850  002B2A                     l199:
  8851  002B2A  5028               	movf	lcd_putc@c,w,c
  8852                           
  8853                           ; Switch size 1, requested type "space"
  8854                           ; Number of cases is 3, Range of values is 8 to 12
  8855                           ; switch strategies available:
  8856                           ; Name         Instructions Cycles
  8857                           ; simple_byte           10     6 (average)
  8858                           ;	Chosen strategy is simple_byte
  8859  002B2C  0A08               	xorlw	8	; case 8
  8860  002B2E  B4D8               	btfsc	status,2,c
  8861  002B30  D7F0               	goto	l203
  8862  002B32  0A02               	xorlw	2	; case 10
  8863  002B34  B4D8               	btfsc	status,2,c
  8864  002B36  D7E7               	goto	l202
  8865  002B38  0A06               	xorlw	6	; case 12
  8866  002B3A  B4D8               	btfsc	status,2,c
  8867  002B3C  D7D8               	goto	l200
  8868  002B3E  D7EF               	goto	l204
  8869  002B40                     __end_of_lcd_putc:
  8870                           	opt stack 0
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           postinc0	equ	0xFEE
  8878                           wreg	equ	0xFE8
  8879                           indf1	equ	0xFE7
  8880                           postdec1	equ	0xFE5
  8881                           fsr1h	equ	0xFE2
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function _lcd_gotoxy *****************
  8891 ;; Defined at:
  8892 ;;		line 89 in file "lcd_x8.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  x               1    wreg     unsigned char 
  8895 ;;  y               1   36[COMRAM] unsigned char 
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  x               1   37[COMRAM] unsigned char 
  8898 ;;  address         1   38[COMRAM] unsigned char 
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0, cstack
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:        3 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    5
  8915 ;; This function calls:
  8916 ;;		_lcd_send_byte
  8917 ;; This function is called by:
  8918 ;;		_main
  8919 ;;		_lcd_putc
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text29
  8924  002C6C                     __ptext29:
  8925                           	opt stack 0
  8926  002C6C                     _lcd_gotoxy:
  8927                           	opt stack 23
  8928                           
  8929                           ;incstack = 0
  8930                           ;lcd_gotoxy@x stored from wreg
  8931  002C6C  6E26               	movwf	lcd_gotoxy@x,c
  8932                           
  8933                           ;lcd_x8.c: 90: unsigned char address;
  8934                           ;lcd_x8.c: 92: switch (y) {
  8935  002C6E  D009               	goto	l190
  8936  002C70  0E80               	movlw	128
  8937  002C72  D005               	goto	L11
  8938  002C74  0EC0               	movlw	192
  8939  002C76  D003               	goto	L11
  8940  002C78  0E90               	movlw	144
  8941  002C7A  D001               	goto	L11
  8942  002C7C  0ED0               	movlw	208
  8943  002C7E                     L11:
  8944  002C7E  6E27               	movwf	lcd_gotoxy@address,c
  8945                           
  8946                           ;lcd_x8.c: 101: }
  8947                           
  8948                           ;lcd_x8.c: 100: break;
  8949  002C80  D00D               	goto	l192
  8950  002C82                     l190:
  8951  002C82  5025               	movf	lcd_gotoxy@y,w,c
  8952                           
  8953                           ; Switch size 1, requested type "space"
  8954                           ; Number of cases is 4, Range of values is 1 to 4
  8955                           ; switch strategies available:
  8956                           ; Name         Instructions Cycles
  8957                           ; simple_byte           13     7 (average)
  8958                           ;	Chosen strategy is simple_byte
  8959  002C84  0A01               	xorlw	1	; case 1
  8960  002C86  B4D8               	btfsc	status,2,c
  8961  002C88  D7F3               	goto	l191
  8962  002C8A  0A03               	xorlw	3	; case 2
  8963  002C8C  B4D8               	btfsc	status,2,c
  8964  002C8E  D7F2               	goto	l193
  8965  002C90  0A01               	xorlw	1	; case 3
  8966  002C92  B4D8               	btfsc	status,2,c
  8967  002C94  D7F1               	goto	l194
  8968  002C96  0A07               	xorlw	7	; case 4
  8969  002C98  B4D8               	btfsc	status,2,c
  8970  002C9A  D7F0               	goto	l195
  8971  002C9C                     l192:
  8972                           
  8973                           ;lcd_x8.c: 102: address += x - 1;
  8974  002C9C  0426               	decf	lcd_gotoxy@x,w,c
  8975  002C9E  2627               	addwf	lcd_gotoxy@address,f,c
  8976                           
  8977                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8978  002CA0  5027               	movf	lcd_gotoxy@address,w,c
  8979  002CA2  0980               	iorlw	128
  8980  002CA4  6E23               	movwf	lcd_send_byte@n,c
  8981  002CA6  0E00               	movlw	0
  8982  002CA8  EC12  F016         	call	_lcd_send_byte
  8983  002CAC  0012               	return		;funcret
  8984  002CAE                     __end_of_lcd_gotoxy:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           indf1	equ	0xFE7
  8995                           postdec1	equ	0xFE5
  8996                           fsr1h	equ	0xFE2
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function _lcd_init *****************
  9006 ;; Defined at:
  9007 ;;		line 56 in file "lcd_x8.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;  i               1   36[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        1 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    5
  9028 ;; This function calls:
  9029 ;;		_delay_ms
  9030 ;;		_lcd_send_byte
  9031 ;;		_lcd_send_nibble
  9032 ;; This function is called by:
  9033 ;;		_main
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text30
  9038  002A32                     __ptext30:
  9039                           	opt stack 0
  9040  002A32                     _lcd_init:
  9041                           	opt stack 25
  9042                           
  9043                           ;lcd_x8.c: 58: unsigned char i;
  9044                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  9045                           
  9046                           ;incstack = 0
  9047  002A32  9484               	bcf	3972,2,c	;volatile
  9048                           
  9049                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  9050  002A34  9284               	bcf	3972,1,c	;volatile
  9051                           
  9052                           ;lcd_x8.c: 65: delay_ms(25);
  9053  002A36  0E00               	movlw	0
  9054  002A38  6E1C               	movwf	delay_ms@n+1,c
  9055  002A3A  0E19               	movlw	25
  9056  002A3C  6E1B               	movwf	delay_ms@n,c
  9057  002A3E  ECEC  F016         	call	_delay_ms	;wreg free
  9058                           
  9059                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  9060  002A42  0E01               	movlw	1
  9061  002A44  6E25               	movwf	lcd_init@i,c
  9062  002A46                     l5589:
  9063  002A46  0E03               	movlw	3
  9064  002A48  6425               	cpfsgt	lcd_init@i,c
  9065  002A4A  D001               	goto	l183
  9066  002A4C  D00B               	goto	u6360
  9067  002A4E                     l183:
  9068                           
  9069                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  9070  002A4E  0E03               	movlw	3
  9071  002A50  EC11  F017         	call	_lcd_send_nibble
  9072                           
  9073                           ;lcd_x8.c: 69: delay_ms(6);
  9074  002A54  0E00               	movlw	0
  9075  002A56  6E1C               	movwf	delay_ms@n+1,c
  9076  002A58  0E06               	movlw	6
  9077  002A5A  6E1B               	movwf	delay_ms@n,c
  9078  002A5C  ECEC  F016         	call	_delay_ms	;wreg free
  9079  002A60  2A25               	incf	lcd_init@i,f,c
  9080  002A62  D7F1               	goto	l5589
  9081  002A64                     u6360:
  9082                           
  9083                           ;lcd_x8.c: 70: }
  9084                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  9085  002A64  0E02               	movlw	2
  9086  002A66  EC11  F017         	call	_lcd_send_nibble
  9087                           
  9088                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  9089  002A6A  0E00               	movlw	0
  9090  002A6C  6E25               	movwf	lcd_init@i,c
  9091  002A6E                     l5603:
  9092  002A6E  0E03               	movlw	3
  9093  002A70  6425               	cpfsgt	lcd_init@i,c
  9094  002A72  D001               	goto	l185
  9095  002A74  0012               	return	
  9096  002A76                     l185:
  9097                           
  9098                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  9099  002A76  5025               	movf	lcd_init@i,w,c
  9100  002A78  0D01               	mullw	1
  9101  002A7A  0E61               	movlw	low _LCD_INIT_STRING
  9102  002A7C  24F3               	addwf	prodl,w,c
  9103  002A7E  6ED9               	movwf	fsr2l,c
  9104  002A80  0E00               	movlw	high _LCD_INIT_STRING
  9105  002A82  20F4               	addwfc	prodh,w,c
  9106  002A84  6EDA               	movwf	fsr2h,c
  9107  002A86  50DF               	movf	indf2,w,c
  9108  002A88  6E23               	movwf	lcd_send_byte@n,c
  9109  002A8A  0E00               	movlw	0
  9110  002A8C  EC12  F016         	call	_lcd_send_byte
  9111  002A90  2A25               	incf	lcd_init@i,f,c
  9112  002A92  D7ED               	goto	l5603
  9113  002A94                     __end_of_lcd_init:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           postinc0	equ	0xFEE
  9122                           wreg	equ	0xFE8
  9123                           indf1	equ	0xFE7
  9124                           postdec1	equ	0xFE5
  9125                           fsr1h	equ	0xFE2
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function _lcd_send_byte *****************
  9135 ;; Defined at:
  9136 ;;		line 39 in file "lcd_x8.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;  cm_data         1    wreg     unsigned char 
  9139 ;;  n               1   34[COMRAM] unsigned char 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  cm_data         1   35[COMRAM] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      void 
  9144 ;; Registers used:
  9145 ;;		wreg, status,2, status,0, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9151 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;Total ram usage:        2 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    4
  9158 ;; This function calls:
  9159 ;;		_delay_cycles
  9160 ;;		_delay_ms
  9161 ;;		_lcd_send_nibble
  9162 ;; This function is called by:
  9163 ;;		_lcd_init
  9164 ;;		_lcd_gotoxy
  9165 ;;		_lcd_putc
  9166 ;;		_Lcd_Shift_Right
  9167 ;;		_Lcd_Shift_Left
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           	psect	text31
  9172  002C24                     __ptext31:
  9173                           	opt stack 0
  9174  002C24                     _lcd_send_byte:
  9175                           	opt stack 24
  9176                           
  9177                           ;incstack = 0
  9178                           ;lcd_send_byte@cm_data stored from wreg
  9179  002C24  6E24               	movwf	lcd_send_byte@cm_data,c
  9180                           
  9181                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9182  002C26  B024               	btfsc	lcd_send_byte@cm_data,0,c
  9183  002C28  D002               	bra	u4855
  9184  002C2A  9484               	bcf	3972,2,c	;volatile
  9185  002C2C  D001               	bra	u4856
  9186  002C2E                     u4855:
  9187  002C2E  8484               	bsf	3972,2,c	;volatile
  9188  002C30                     u4856:
  9189                           
  9190                           ;lcd_x8.c: 44: delay_cycles(1);
  9191  002C30  0E01               	movlw	1
  9192  002C32  ECC2  F016         	call	_delay_cycles
  9193                           
  9194                           ;lcd_x8.c: 46: delay_cycles(1);
  9195  002C36  0E01               	movlw	1
  9196  002C38  ECC2  F016         	call	_delay_cycles
  9197                           
  9198                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9199  002C3C  9284               	bcf	3972,1,c	;volatile
  9200                           
  9201                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9202  002C3E  3823               	swapf	lcd_send_byte@n,w,c
  9203  002C40  0B0F               	andlw	15
  9204  002C42  EC11  F017         	call	_lcd_send_nibble
  9205                           
  9206                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9207  002C46  5023               	movf	lcd_send_byte@n,w,c
  9208  002C48  0B0F               	andlw	15
  9209  002C4A  EC11  F017         	call	_lcd_send_nibble
  9210                           
  9211                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9212  002C4E  5024               	movf	lcd_send_byte@cm_data,w,c
  9213  002C50  B4D8               	btfsc	status,2,c
  9214  002C52  D005               	goto	l178
  9215  002C54  0E32               	movlw	50
  9216  002C56                     u7127:
  9217  002C56  0004               	clrwdt	
  9218  002C58  2EE8               	decfsz	wreg,f,c
  9219  002C5A  D7FD               	bra	u7127
  9220  002C5C  0012               	return	
  9221  002C5E                     l178:
  9222                           
  9223                           ;lcd_x8.c: 51: else
  9224                           ;lcd_x8.c: 52: delay_ms(2);
  9225  002C5E  0E00               	movlw	0
  9226  002C60  6E1C               	movwf	delay_ms@n+1,c
  9227  002C62  0E02               	movlw	2
  9228  002C64  6E1B               	movwf	delay_ms@n,c
  9229  002C66  ECEC  F016         	call	_delay_ms	;wreg free
  9230  002C6A  0012               	return	
  9231  002C6C                     __end_of_lcd_send_byte:
  9232                           	opt stack 0
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           indf1	equ	0xFE7
  9242                           postdec1	equ	0xFE5
  9243                           fsr1h	equ	0xFE2
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function _lcd_send_nibble *****************
  9253 ;; Defined at:
  9254 ;;		line 29 in file "lcd_x8.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  n               1    wreg     unsigned char 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  n               1   33[COMRAM] unsigned char 
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  1    wreg      void 
  9261 ;; Registers used:
  9262 ;;		wreg, status,2, status,0, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;Total ram usage:        2 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    3
  9275 ;; This function calls:
  9276 ;;		_delay_cycles
  9277 ;; This function is called by:
  9278 ;;		_lcd_send_byte
  9279 ;;		_lcd_init
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text32
  9284  002E22                     __ptext32:
  9285                           	opt stack 0
  9286  002E22                     _lcd_send_nibble:
  9287                           	opt stack 24
  9288                           
  9289                           ;incstack = 0
  9290                           ;lcd_send_nibble@n stored from wreg
  9291  002E22  6E22               	movwf	lcd_send_nibble@n,c
  9292                           
  9293                           ;lcd_x8.c: 31: lcd.data = n;
  9294  002E24  C022  F021         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  9295  002E28  3A21               	swapf	??_lcd_send_nibble,f,c
  9296  002E2A  5083               	movf	3971,w,c
  9297  002E2C  1821               	xorwf	??_lcd_send_nibble,w,c
  9298  002E2E  0B0F               	andlw	-241
  9299  002E30  1821               	xorwf	??_lcd_send_nibble,w,c
  9300  002E32  6E83               	movwf	3971,c
  9301                           
  9302                           ;lcd_x8.c: 33: delay_cycles(1);
  9303  002E34  0E01               	movlw	1
  9304  002E36  ECC2  F016         	call	_delay_cycles
  9305                           
  9306                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  9307  002E3A  8284               	bsf	3972,1,c	;volatile
  9308                           
  9309                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  9310  002E3C  0004               	clrwdt	
  9311  002E3E  F000               	nop		;2 cycle nop
  9312                           
  9313                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  9314  002E40  9284               	bcf	3972,1,c	;volatile
  9315  002E42  0012               	return		;funcret
  9316  002E44                     __end_of_lcd_send_nibble:
  9317                           	opt stack 0
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           postinc0	equ	0xFEE
  9325                           wreg	equ	0xFE8
  9326                           indf1	equ	0xFE7
  9327                           postdec1	equ	0xFE5
  9328                           fsr1h	equ	0xFE2
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           fsr2h	equ	0xFDA
  9334                           fsr2l	equ	0xFD9
  9335                           status	equ	0xFD8
  9336                           
  9337 ;; *************** function _delay_cycles *****************
  9338 ;; Defined at:
  9339 ;;		line 20 in file "lcd_x8.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  n               1    wreg     unsigned char 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  n               1   29[COMRAM] unsigned char 
  9344 ;;  x               2   30[COMRAM] int 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;Total ram usage:        6 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    2
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_lcd_send_nibble
  9365 ;;		_lcd_send_byte
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           	psect	text33
  9370  002D84                     __ptext33:
  9371                           	opt stack 0
  9372  002D84                     _delay_cycles:
  9373                           	opt stack 24
  9374                           
  9375                           ;incstack = 0
  9376                           ;delay_cycles@n stored from wreg
  9377  002D84  6E1E               	movwf	delay_cycles@n,c
  9378                           
  9379                           ;lcd_x8.c: 21: int x;
  9380                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  9381  002D86  0E00               	movlw	0
  9382  002D88  6E20               	movwf	delay_cycles@x+1,c
  9383  002D8A  0E00               	movlw	0
  9384  002D8C  6E1F               	movwf	delay_cycles@x,c
  9385  002D8E  D003               	goto	l169
  9386  002D90                     l170:
  9387  002D90  0004               	clrwdt		;# 
  9388  002D92  4A1F               	infsnz	delay_cycles@x,f,c
  9389  002D94  2A20               	incf	delay_cycles@x+1,f,c
  9390  002D96                     l169:
  9391  002D96  501E               	movf	delay_cycles@n,w,c
  9392  002D98  6E1B               	movwf	??_delay_cycles& (0+255),c
  9393  002D9A  6A1C               	clrf	(??_delay_cycles+1)& (0+255),c
  9394  002D9C  501F               	movf	delay_cycles@x,w,c
  9395  002D9E  5C1B               	subwf	??_delay_cycles,w,c
  9396  002DA0  501C               	movf	??_delay_cycles+1,w,c
  9397  002DA2  0A80               	xorlw	128
  9398  002DA4  6E1D               	movwf	(??_delay_cycles+2)& (0+255),c
  9399  002DA6  5020               	movf	delay_cycles@x+1,w,c
  9400  002DA8  0A80               	xorlw	128
  9401  002DAA  581D               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  9402  002DAC  A0D8               	btfss	status,0,c
  9403  002DAE  0012               	return	
  9404  002DB0  D7EF               	goto	l170
  9405  002DB2                     __end_of_delay_cycles:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           indf1	equ	0xFE7
  9416                           postdec1	equ	0xFE5
  9417                           fsr1h	equ	0xFE2
  9418                           fsr1l	equ	0xFE1
  9419                           indf2	equ	0xFDF
  9420                           postinc2	equ	0xFDE
  9421                           postdec2	equ	0xFDD
  9422                           fsr2h	equ	0xFDA
  9423                           fsr2l	equ	0xFD9
  9424                           status	equ	0xFD8
  9425                           
  9426 ;; *************** function _delay_ms *****************
  9427 ;; Defined at:
  9428 ;;		line 12 in file "lcd_x8.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;  n               2   26[COMRAM] unsigned int 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  x               2   28[COMRAM] int 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      void 
  9435 ;; Registers used:
  9436 ;;		wreg, status,2, status,0
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;Total ram usage:        4 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    2
  9449 ;; This function calls:
  9450 ;;		Nothing
  9451 ;; This function is called by:
  9452 ;;		_main
  9453 ;;		_lcd_send_byte
  9454 ;;		_lcd_init
  9455 ;;		_lcd_putc
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           	psect	text34
  9460  002DD8                     __ptext34:
  9461                           	opt stack 0
  9462  002DD8                     _delay_ms:
  9463                           	opt stack 25
  9464                           
  9465                           ;lcd_x8.c: 13: int x;
  9466                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  9467                           
  9468                           ;incstack = 0
  9469  002DD8  0E00               	movlw	0
  9470  002DDA  6E1E               	movwf	delay_ms@x+1,c
  9471  002DDC  0E00               	movlw	0
  9472  002DDE  6E1D               	movwf	delay_ms@x,c
  9473  002DE0  D007               	goto	l163
  9474  002DE2                     
  9475                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  9476  002DE2  0EC8               	movlw	200
  9477  002DE4                     u7137:
  9478  002DE4  0004               	clrwdt	
  9479  002DE6  0004               	clrwdt	
  9480  002DE8  2EE8               	decfsz	wreg,f,c
  9481  002DEA  D7FC               	bra	u7137
  9482  002DEC  4A1D               	infsnz	delay_ms@x,f,c
  9483  002DEE  2A1E               	incf	delay_ms@x+1,f,c
  9484  002DF0                     l163:
  9485  002DF0  501D               	movf	delay_ms@x,w,c
  9486  002DF2  5C1B               	subwf	delay_ms@n,w,c
  9487  002DF4  501E               	movf	delay_ms@x+1,w,c
  9488  002DF6  581C               	subwfb	delay_ms@n+1,w,c
  9489  002DF8  A0D8               	btfss	status,0,c
  9490  002DFA  0012               	return	
  9491  002DFC  D7F2               	goto	l164
  9492  002DFE                     __end_of_delay_ms:
  9493                           	opt stack 0
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           postinc0	equ	0xFEE
  9501                           wreg	equ	0xFE8
  9502                           indf1	equ	0xFE7
  9503                           postdec1	equ	0xFE5
  9504                           fsr1h	equ	0xFE2
  9505                           fsr1l	equ	0xFE1
  9506                           indf2	equ	0xFDF
  9507                           postinc2	equ	0xFDE
  9508                           postdec2	equ	0xFDD
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function _init_pwm1 *****************
  9514 ;; Defined at:
  9515 ;;		line 5 in file "my_pwm.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;Total ram usage:        0 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    2
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_main
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           	psect	text35
  9544  002E7C                     __ptext35:
  9545                           	opt stack 0
  9546  002E7C                     _init_pwm1:
  9547                           	opt stack 28
  9548                           
  9549                           ;my_pwm.c: 7: PR2 = 255;
  9550                           
  9551                           ;incstack = 0
  9552  002E7C  68CB               	setf	4043,c	;volatile
  9553                           
  9554                           ;my_pwm.c: 8: T2CON = 0;
  9555  002E7E  0E00               	movlw	0
  9556  002E80  6ECA               	movwf	4042,c	;volatile
  9557                           
  9558                           ;my_pwm.c: 9: CCP1CON = 0x0C;
  9559  002E82  0E0C               	movlw	12
  9560  002E84  6EBD               	movwf	4029,c	;volatile
  9561                           
  9562                           ;my_pwm.c: 11: T2CONbits.TMR2ON = 1;
  9563  002E86  84CA               	bsf	4042,2,c	;volatile
  9564                           
  9565                           ;my_pwm.c: 12: TRISCbits.RC2 =0;
  9566  002E88  9494               	bcf	3988,2,c	;volatile
  9567  002E8A  0012               	return		;funcret
  9568  002E8C                     __end_of_init_pwm1:
  9569                           	opt stack 0
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           postinc0	equ	0xFEE
  9577                           wreg	equ	0xFE8
  9578                           indf1	equ	0xFE7
  9579                           postdec1	equ	0xFE5
  9580                           fsr1h	equ	0xFE2
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           postdec2	equ	0xFDD
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8
  9588                           
  9589 ;; *************** function _init_adc_no_lib *****************
  9590 ;; Defined at:
  9591 ;;		line 11 in file "my_adc.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;                  1    wreg      void 
  9598 ;; Registers used:
  9599 ;;		wreg, status,2
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    2
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text36
  9620  002E8C                     __ptext36:
  9621                           	opt stack 0
  9622  002E8C                     _init_adc_no_lib:
  9623                           	opt stack 28
  9624                           
  9625                           ;my_adc.c: 14: ADCON0 = 0;
  9626                           
  9627                           ;incstack = 0
  9628  002E8C  0E00               	movlw	0
  9629  002E8E  6EC2               	movwf	4034,c	;volatile
  9630                           
  9631                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  9632  002E90  80C2               	bsf	4034,0,c	;volatile
  9633                           
  9634                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  9635  002E92  0E89               	movlw	137
  9636  002E94  6EC0               	movwf	4032,c	;volatile
  9637  002E96  0012               	return		;funcret
  9638  002E98                     __end_of_init_adc_no_lib:
  9639                           	opt stack 0
  9640                           tblptru	equ	0xFF8
  9641                           tblptrh	equ	0xFF7
  9642                           tblptrl	equ	0xFF6
  9643                           tablat	equ	0xFF5
  9644                           prodh	equ	0xFF4
  9645                           prodl	equ	0xFF3
  9646                           postinc0	equ	0xFEE
  9647                           wreg	equ	0xFE8
  9648                           indf1	equ	0xFE7
  9649                           postdec1	equ	0xFE5
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659 ;; *************** function _initTimers01 *****************
  9660 ;; Defined at:
  9661 ;;		line 102 in file "pwm_asl.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;		None
  9664 ;; Auto vars:     Size  Location     Type
  9665 ;;		None
  9666 ;; Return value:  Size  Location     Type
  9667 ;;                  1    wreg      void 
  9668 ;; Registers used:
  9669 ;;		wreg, status,2
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;Total ram usage:        0 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    2
  9682 ;; This function calls:
  9683 ;;		Nothing
  9684 ;; This function is called by:
  9685 ;;		_main
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text37
  9690  002B92                     __ptext37:
  9691                           	opt stack 0
  9692  002B92                     _initTimers01:
  9693                           	opt stack 28
  9694                           
  9695                           ;pwm_asl.c: 103: T3CON = 0x29;
  9696                           
  9697                           ;incstack = 0
  9698  002B92  0E29               	movlw	41
  9699  002B94  6EB1               	movwf	4017,c	;volatile
  9700                           
  9701                           ;pwm_asl.c: 104: PIE2bits.TMR3IE = 1;
  9702  002B96  82A0               	bsf	4000,1,c	;volatile
  9703                           
  9704                           ;pwm_asl.c: 106: TMR3H = 0;
  9705  002B98  0E00               	movlw	0
  9706  002B9A  6EB3               	movwf	4019,c	;volatile
  9707                           
  9708                           ;pwm_asl.c: 107: TMR3L = 0;
  9709  002B9C  0E00               	movlw	0
  9710  002B9E  6EB2               	movwf	4018,c	;volatile
  9711                           
  9712                           ;pwm_asl.c: 109: T2CON=0x07;
  9713  002BA0  0E07               	movlw	7
  9714  002BA2  6ECA               	movwf	4042,c	;volatile
  9715                           
  9716                           ;pwm_asl.c: 110: TMR2 = 0;
  9717  002BA4  0E00               	movlw	0
  9718  002BA6  6ECC               	movwf	4044,c	;volatile
  9719                           
  9720                           ;pwm_asl.c: 112: CCP2CON=9;
  9721  002BA8  0E09               	movlw	9
  9722  002BAA  6EBA               	movwf	4026,c	;volatile
  9723                           
  9724                           ;pwm_asl.c: 113: CCP1CON=0x0c;
  9725  002BAC  0E0C               	movlw	12
  9726  002BAE  6EBD               	movwf	4029,c	;volatile
  9727                           
  9728                           ;pwm_asl.c: 114: INTCON=INTCON3=INTCON2=0;
  9729  002BB0  0E00               	movlw	0
  9730  002BB2  6EF1               	movwf	intcon2,c	;volatile
  9731  002BB4  CFF1 FFF0          	movff	intcon2,intcon3	;volatile
  9732  002BB8  CFF0 FFF2          	movff	intcon3,intcon	;volatile
  9733                           
  9734                           ;pwm_asl.c: 115: INTCONbits.PEIE=1;
  9735  002BBC  8CF2               	bsf	intcon,6,c	;volatile
  9736                           
  9737                           ;pwm_asl.c: 116: INTCONbits.GIE = 1;
  9738  002BBE  8EF2               	bsf	intcon,7,c	;volatile
  9739                           
  9740                           ;pwm_asl.c: 117: INTCONbits.INT0IE=1;
  9741  002BC0  88F2               	bsf	intcon,4,c	;volatile
  9742                           
  9743                           ;pwm_asl.c: 119: INTCON3bits.INT2IE=1;
  9744  002BC2  88F0               	bsf	intcon3,4,c	;volatile
  9745                           
  9746                           ;pwm_asl.c: 120: PIE1bits.TMR2IE=0;
  9747  002BC4  929D               	bcf	3997,1,c	;volatile
  9748                           
  9749                           ;pwm_asl.c: 121: PIE2bits.TMR3IE=1;
  9750  002BC6  82A0               	bsf	4000,1,c	;volatile
  9751                           
  9752                           ;pwm_asl.c: 122: PIE2bits.CCP2IE=1;
  9753  002BC8  80A0               	bsf	4000,0,c	;volatile
  9754                           
  9755                           ;pwm_asl.c: 123: IPR1=IPR2=PIR1=PIR2=0;
  9756  002BCA  0E00               	movlw	0
  9757  002BCC  6EA1               	movwf	4001,c	;volatile
  9758  002BCE  CFA1 FF9E          	movff	4001,3998	;volatile
  9759  002BD2  CF9E FFA2          	movff	3998,4002	;volatile
  9760  002BD6  CFA2 FF9F          	movff	4002,3999	;volatile
  9761  002BDA  0012               	return		;funcret
  9762  002BDC                     __end_of_initTimers01:
  9763                           	opt stack 0
  9764                           tblptru	equ	0xFF8
  9765                           tblptrh	equ	0xFF7
  9766                           tblptrl	equ	0xFF6
  9767                           tablat	equ	0xFF5
  9768                           prodh	equ	0xFF4
  9769                           prodl	equ	0xFF3
  9770                           intcon	equ	0xFF2
  9771                           intcon2	equ	0xFF1
  9772                           intcon3	equ	0xFF0
  9773                           postinc0	equ	0xFEE
  9774                           wreg	equ	0xFE8
  9775                           indf1	equ	0xFE7
  9776                           postdec1	equ	0xFE5
  9777                           fsr1h	equ	0xFE2
  9778                           fsr1l	equ	0xFE1
  9779                           indf2	equ	0xFDF
  9780                           postinc2	equ	0xFDE
  9781                           postdec2	equ	0xFDD
  9782                           fsr2h	equ	0xFDA
  9783                           fsr2l	equ	0xFD9
  9784                           status	equ	0xFD8
  9785                           
  9786 ;; *************** function ___lwdiv *****************
  9787 ;; Defined at:
  9788 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;  dividend        2   32[COMRAM] unsigned int 
  9791 ;;  divisor         2   34[COMRAM] unsigned int 
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;  quotient        2   37[COMRAM] unsigned int 
  9794 ;;  counter         1   36[COMRAM] unsigned char 
  9795 ;; Return value:  Size  Location     Type
  9796 ;;                  2   32[COMRAM] unsigned int 
  9797 ;; Registers used:
  9798 ;;		wreg, status,2, status,0
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;Total ram usage:        7 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; Hardware stack levels required when called:    2
  9811 ;; This function calls:
  9812 ;;		Nothing
  9813 ;; This function is called by:
  9814 ;;		_main
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           	psect	text38
  9819  002B40                     __ptext38:
  9820                           	opt stack 0
  9821  002B40                     ___lwdiv:
  9822                           	opt stack 28
  9823                           
  9824                           ;incstack = 0
  9825  002B40  0E00               	movlw	0
  9826  002B42  6E27               	movwf	___lwdiv@quotient+1,c
  9827  002B44  0E00               	movlw	0
  9828  002B46  6E26               	movwf	___lwdiv@quotient,c
  9829  002B48  5023               	movf	___lwdiv@divisor,w,c
  9830  002B4A  1024               	iorwf	___lwdiv@divisor+1,w,c
  9831  002B4C  B4D8               	btfsc	status,2,c
  9832  002B4E  D01C               	goto	l894
  9833  002B50  0E01               	movlw	1
  9834  002B52  6E25               	movwf	___lwdiv@counter,c
  9835  002B54  D004               	goto	l889
  9836  002B56  90D8               	bcf	status,0,c
  9837  002B58  3623               	rlcf	___lwdiv@divisor,f,c
  9838  002B5A  3624               	rlcf	___lwdiv@divisor+1,f,c
  9839  002B5C  2A25               	incf	___lwdiv@counter,f,c
  9840  002B5E                     l889:
  9841  002B5E  AE24               	btfss	___lwdiv@divisor+1,7,c
  9842  002B60  D7FA               	goto	l890
  9843  002B62                     u6980:
  9844  002B62  90D8               	bcf	status,0,c
  9845  002B64  3626               	rlcf	___lwdiv@quotient,f,c
  9846  002B66  3627               	rlcf	___lwdiv@quotient+1,f,c
  9847  002B68  5023               	movf	___lwdiv@divisor,w,c
  9848  002B6A  5C21               	subwf	___lwdiv@dividend,w,c
  9849  002B6C  5024               	movf	___lwdiv@divisor+1,w,c
  9850  002B6E  5822               	subwfb	___lwdiv@dividend+1,w,c
  9851  002B70  A0D8               	btfss	status,0,c
  9852  002B72  D005               	goto	l893
  9853  002B74  5023               	movf	___lwdiv@divisor,w,c
  9854  002B76  5E21               	subwf	___lwdiv@dividend,f,c
  9855  002B78  5024               	movf	___lwdiv@divisor+1,w,c
  9856  002B7A  5A22               	subwfb	___lwdiv@dividend+1,f,c
  9857  002B7C  8026               	bsf	___lwdiv@quotient,0,c
  9858  002B7E                     l893:
  9859  002B7E  90D8               	bcf	status,0,c
  9860  002B80  3224               	rrcf	___lwdiv@divisor+1,f,c
  9861  002B82  3223               	rrcf	___lwdiv@divisor,f,c
  9862  002B84  2E25               	decfsz	___lwdiv@counter,f,c
  9863  002B86  D7ED               	goto	u6980
  9864  002B88                     l894:
  9865  002B88  C026  F021         	movff	___lwdiv@quotient,?___lwdiv
  9866  002B8C  C027  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9867  002B90  0012               	return		;funcret
  9868  002B92                     __end_of___lwdiv:
  9869                           	opt stack 0
  9870                           tblptru	equ	0xFF8
  9871                           tblptrh	equ	0xFF7
  9872                           tblptrl	equ	0xFF6
  9873                           tablat	equ	0xFF5
  9874                           prodh	equ	0xFF4
  9875                           prodl	equ	0xFF3
  9876                           intcon	equ	0xFF2
  9877                           intcon2	equ	0xFF1
  9878                           intcon3	equ	0xFF0
  9879                           postinc0	equ	0xFEE
  9880                           wreg	equ	0xFE8
  9881                           indf1	equ	0xFE7
  9882                           postdec1	equ	0xFE5
  9883                           fsr1h	equ	0xFE2
  9884                           fsr1l	equ	0xFE1
  9885                           indf2	equ	0xFDF
  9886                           postinc2	equ	0xFDE
  9887                           postdec2	equ	0xFDD
  9888                           fsr2h	equ	0xFDA
  9889                           fsr2l	equ	0xFD9
  9890                           status	equ	0xFD8
  9891                           
  9892 ;; *************** function _PWM_Disable *****************
  9893 ;; Defined at:
  9894 ;;		line 95 in file "pwm_asl.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;		None
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      void 
  9901 ;; Registers used:
  9902 ;;		wreg, status,2
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;Total ram usage:        0 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    2
  9915 ;; This function calls:
  9916 ;;		Nothing
  9917 ;; This function is called by:
  9918 ;;		_main
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text39
  9923  002EA2                     __ptext39:
  9924                           	opt stack 0
  9925  002EA2                     _PWM_Disable:
  9926                           	opt stack 28
  9927                           
  9928                           ;pwm_asl.c: 96: CCP1CON = 0x00;
  9929                           
  9930                           ;incstack = 0
  9931  002EA2  0E00               	movlw	0
  9932  002EA4  6EBD               	movwf	4029,c	;volatile
  9933                           
  9934                           ;pwm_asl.c: 97: T2CONbits.TMR2ON = 0;
  9935  002EA6  94CA               	bcf	4042,2,c	;volatile
  9936                           
  9937                           ;pwm_asl.c: 98: LATCbits.LATC2 = 0;
  9938  002EA8  948B               	bcf	3979,2,c	;volatile
  9939  002EAA  0012               	return		;funcret
  9940  002EAC                     __end_of_PWM_Disable:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           intcon3	equ	0xFF0
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           indf1	equ	0xFE7
  9954                           postdec1	equ	0xFE5
  9955                           fsr1h	equ	0xFE2
  9956                           fsr1l	equ	0xFE1
  9957                           indf2	equ	0xFDF
  9958                           postinc2	equ	0xFDE
  9959                           postdec2	equ	0xFDD
  9960                           fsr2h	equ	0xFDA
  9961                           fsr2l	equ	0xFD9
  9962                           status	equ	0xFD8
  9963                           
  9964 ;; *************** function _highIsr *****************
  9965 ;; Defined at:
  9966 ;;		line 132 in file "pwm_asl.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg, status,2, status,0, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;Total ram usage:       20 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    1
  9987 ;; This function calls:
  9988 ;;		i2___awmod
  9989 ;; This function is called by:
  9990 ;;		Interrupt level 2
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	intcode
  9995  000008                     __pintcode:
  9996                           	opt stack 0
  9997  000008                     _highIsr:
  9998                           	opt stack 23
  9999                           
 10000                           ;incstack = 0
 10001  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10002  00000A  ED64  F012         	call	int_func,f	;refresh shadow registers
 10003                           tblptru	equ	0xFF8
 10004                           tblptrh	equ	0xFF7
 10005                           tblptrl	equ	0xFF6
 10006                           tablat	equ	0xFF5
 10007                           prodh	equ	0xFF4
 10008                           prodl	equ	0xFF3
 10009                           intcon	equ	0xFF2
 10010                           intcon2	equ	0xFF1
 10011                           intcon3	equ	0xFF0
 10012                           postinc0	equ	0xFEE
 10013                           wreg	equ	0xFE8
 10014                           indf1	equ	0xFE7
 10015                           postdec1	equ	0xFE5
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025                           	psect	intcode_body
 10026  0024C8                     __pintcode_body:
 10027                           	opt stack 23
 10028  0024C8                     int_func:
 10029                           	opt stack 23
 10030  0024C8  0006               	pop		; remove dummy address from shadow register refresh
 10031  0024CA  CFFA F009          	movff	pclath,??_highIsr+2
 10032  0024CE  CFFB F00A          	movff	pclatu,??_highIsr+3
 10033  0024D2  CFE9 F00B          	movff	fsr0l,??_highIsr+4
 10034  0024D6  CFEA F00C          	movff	fsr0h,??_highIsr+5
 10035  0024DA  CFE1 F00D          	movff	fsr1l,??_highIsr+6
 10036  0024DE  CFE2 F00E          	movff	fsr1h,??_highIsr+7
 10037  0024E2  CFD9 F00F          	movff	fsr2l,??_highIsr+8
 10038  0024E6  CFDA F010          	movff	fsr2h,??_highIsr+9
 10039  0024EA  CFF3 F011          	movff	prodl,??_highIsr+10
 10040  0024EE  CFF4 F012          	movff	prodh,??_highIsr+11
 10041  0024F2  CFF6 F013          	movff	tblptrl,??_highIsr+12
 10042  0024F6  CFF7 F014          	movff	tblptrh,??_highIsr+13
 10043  0024FA  CFF8 F015          	movff	tblptru,??_highIsr+14
 10044  0024FE  CFF5 F016          	movff	tablat,??_highIsr+15
 10045  002502  C065  F017         	movff	btemp,??_highIsr+16
 10046  002506  C066  F018         	movff	btemp+1,??_highIsr+17
 10047  00250A  C067  F019         	movff	btemp+2,??_highIsr+18
 10048  00250E  C068  F01A         	movff	btemp+3,??_highIsr+19
 10049                           
 10050                           ;pwm_asl.c: 133: if (INTCONbits.INT0IF) {
 10051  002512  A2F2               	btfss	intcon,1,c	;volatile
 10052  002514  D00F               	goto	i2l123
 10053                           
 10054                           ;pwm_asl.c: 134: _delay((unsigned long)((500)*(4000000UL/4000.0)));
 10055  002516  0E03               	movlw	3
 10056  002518  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10057  00251A  0E8A               	movlw	138
 10058  00251C  6E07               	movwf	??_highIsr& (0+255),c
 10059  00251E  0E56               	movlw	86
 10060  002520                     i2u714_47:
 10061  002520  2EE8               	decfsz	wreg,f,c
 10062  002522  D7FE               	bra	i2u714_47
 10063  002524  2E07               	decfsz	??_highIsr& (0+255),f,c
 10064  002526  D7FC               	bra	i2u714_47
 10065  002528  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10066  00252A  D7FA               	bra	i2u714_47
 10067                           
 10068                           ;pwm_asl.c: 135: mode = (mode + 1) % 4;
 10069  00252C  2860               	incf	_mode,w,c
 10070  00252E  0B03               	andlw	3
 10071  002530  6E60               	movwf	_mode,c
 10072                           
 10073                           ;pwm_asl.c: 136: INTCONbits.INT0IF = 0;
 10074  002532  92F2               	bcf	intcon,1,c	;volatile
 10075  002534                     i2l123:
 10076                           
 10077                           ;pwm_asl.c: 137: }
 10078                           ;pwm_asl.c: 138: if (INTCON3bits.INT2IF) {
 10079  002534  A2F0               	btfss	intcon3,1,c	;volatile
 10080  002536  D01A               	goto	i2l124
 10081                           
 10082                           ;pwm_asl.c: 140: _delay((unsigned long)((500)*(4000000UL/4000.0)));
 10083  002538  0E03               	movlw	3
 10084  00253A  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10085  00253C  0E8A               	movlw	138
 10086  00253E  6E07               	movwf	??_highIsr& (0+255),c
 10087  002540  0E56               	movlw	86
 10088  002542                     i2u715_47:
 10089  002542  2EE8               	decfsz	wreg,f,c
 10090  002544  D7FE               	bra	i2u715_47
 10091  002546  2E07               	decfsz	??_highIsr& (0+255),f,c
 10092  002548  D7FC               	bra	i2u715_47
 10093  00254A  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10094  00254C  D7FA               	bra	i2u715_47
 10095                           
 10096                           ;pwm_asl.c: 142: hysteresis = (hysteresis + 1) % 5;
 10097  00254E  0E01               	movlw	1
 10098  002550  245F               	addwf	_hysteresis,w,c
 10099  002552  6E01               	movwf	i2___awmod@dividend,c
 10100  002554  6A02               	clrf	i2___awmod@dividend+1,c
 10101  002556  0E00               	movlw	0
 10102  002558  2202               	addwfc	i2___awmod@dividend+1,f,c
 10103  00255A  0E00               	movlw	0
 10104  00255C  6E04               	movwf	i2___awmod@divisor+1,c
 10105  00255E  0E05               	movlw	5
 10106  002560  6E03               	movwf	i2___awmod@divisor,c
 10107  002562  ECAE  F014         	call	i2___awmod	;wreg free
 10108  002566  5001               	movf	?i2___awmod,w,c
 10109  002568  6E5F               	movwf	_hysteresis,c
 10110                           
 10111                           ;pwm_asl.c: 143: INTCON3bits.INT2IF = 0;
 10112  00256A  92F0               	bcf	intcon3,1,c	;volatile
 10113  00256C                     i2l124:
 10114                           
 10115                           ;pwm_asl.c: 144: }
 10116                           ;pwm_asl.c: 145: if (PIR2bits.TMR3IF) {
 10117  00256C  A2A1               	btfss	4001,1,c	;volatile
 10118  00256E  D002               	goto	i2l125
 10119                           
 10120                           ;pwm_asl.c: 146: PIR2bits.TMR3IF = 0;
 10121  002570  92A1               	bcf	4001,1,c	;volatile
 10122                           
 10123                           ;pwm_asl.c: 147: PORTCbits.RC5=1;
 10124  002572  8A82               	bsf	3970,5,c	;volatile
 10125  002574                     i2l125:
 10126                           
 10127                           ;pwm_asl.c: 148: }
 10128                           ;pwm_asl.c: 149: if(PIR2bits.CCP2IF){
 10129  002574  A0A1               	btfss	4001,0,c	;volatile
 10130  002576  D002               	goto	i2l126
 10131                           
 10132                           ;pwm_asl.c: 150: PIR2bits.CCP2IF=0;
 10133  002578  90A1               	bcf	4001,0,c	;volatile
 10134                           
 10135                           ;pwm_asl.c: 151: PORTCbits.RC5=0;
 10136  00257A  9A82               	bcf	3970,5,c	;volatile
 10137  00257C                     i2l126:
 10138  00257C  C01A  F068         	movff	??_highIsr+19,btemp+3
 10139  002580  C019  F067         	movff	??_highIsr+18,btemp+2
 10140  002584  C018  F066         	movff	??_highIsr+17,btemp+1
 10141  002588  C017  F065         	movff	??_highIsr+16,btemp
 10142  00258C  C016  FFF5         	movff	??_highIsr+15,tablat
 10143  002590  C015  FFF8         	movff	??_highIsr+14,tblptru
 10144  002594  C014  FFF7         	movff	??_highIsr+13,tblptrh
 10145  002598  C013  FFF6         	movff	??_highIsr+12,tblptrl
 10146  00259C  C012  FFF4         	movff	??_highIsr+11,prodh
 10147  0025A0  C011  FFF3         	movff	??_highIsr+10,prodl
 10148  0025A4  C010  FFDA         	movff	??_highIsr+9,fsr2h
 10149  0025A8  C00F  FFD9         	movff	??_highIsr+8,fsr2l
 10150  0025AC  C00E  FFE2         	movff	??_highIsr+7,fsr1h
 10151  0025B0  C00D  FFE1         	movff	??_highIsr+6,fsr1l
 10152  0025B4  C00C  FFEA         	movff	??_highIsr+5,fsr0h
 10153  0025B8  C00B  FFE9         	movff	??_highIsr+4,fsr0l
 10154  0025BC  C00A  FFFB         	movff	??_highIsr+3,pclatu
 10155  0025C0  C009  FFFA         	movff	??_highIsr+2,pclath
 10156  0025C4  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10157  0025C6  0011               	retfie		f
 10158  0025C8                     __end_of_highIsr:
 10159                           	opt stack 0
 10160                           pclatu	equ	0xFFB
 10161                           pclath	equ	0xFFA
 10162                           tblptru	equ	0xFF8
 10163                           tblptrh	equ	0xFF7
 10164                           tblptrl	equ	0xFF6
 10165                           tablat	equ	0xFF5
 10166                           prodh	equ	0xFF4
 10167                           prodl	equ	0xFF3
 10168                           intcon	equ	0xFF2
 10169                           intcon2	equ	0xFF1
 10170                           intcon3	equ	0xFF0
 10171                           postinc0	equ	0xFEE
 10172                           fsr0h	equ	0xFEA
 10173                           fsr0l	equ	0xFE9
 10174                           wreg	equ	0xFE8
 10175                           indf1	equ	0xFE7
 10176                           postdec1	equ	0xFE5
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function i2___awmod *****************
 10187 ;; Defined at:
 10188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  dividend        2    0[COMRAM] int 
 10191 ;;  divisor         2    2[COMRAM] int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  __awmod         1    5[COMRAM] unsigned char 
 10194 ;;  __awmod         1    4[COMRAM] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  2    0[COMRAM] int 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2, status,0
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;Total ram usage:        6 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_highIsr
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text41
 10218  00295C                     __ptext41:
 10219                           	opt stack 0
 10220  00295C                     i2___awmod:
 10221                           	opt stack 23
 10222                           
 10223                           ;incstack = 0
 10224  00295C  0E00               	movlw	0
 10225  00295E  6E06               	movwf	i2___awmod@sign,c
 10226  002960  AE02               	btfss	i2___awmod@dividend+1,7,c
 10227  002962  D006               	goto	i2l627
 10228  002964  6C01               	negf	i2___awmod@dividend,c
 10229  002966  1E02               	comf	i2___awmod@dividend+1,f,c
 10230  002968  B0D8               	btfsc	status,0,c
 10231  00296A  2A02               	incf	i2___awmod@dividend+1,f,c
 10232  00296C  0E01               	movlw	1
 10233  00296E  6E06               	movwf	i2___awmod@sign,c
 10234  002970                     i2l627:
 10235  002970  AE04               	btfss	i2___awmod@divisor+1,7,c
 10236  002972  D004               	goto	i2l628
 10237  002974  6C03               	negf	i2___awmod@divisor,c
 10238  002976  1E04               	comf	i2___awmod@divisor+1,f,c
 10239  002978  B0D8               	btfsc	status,0,c
 10240  00297A  2A04               	incf	i2___awmod@divisor+1,f,c
 10241  00297C                     i2l628:
 10242  00297C  5003               	movf	i2___awmod@divisor,w,c
 10243  00297E  1004               	iorwf	i2___awmod@divisor+1,w,c
 10244  002980  B4D8               	btfsc	status,2,c
 10245  002982  D018               	goto	i2l635
 10246  002984  0E01               	movlw	1
 10247  002986  6E05               	movwf	i2___awmod@counter,c
 10248  002988  D004               	goto	i2l630
 10249  00298A  90D8               	bcf	status,0,c
 10250  00298C  3603               	rlcf	i2___awmod@divisor,f,c
 10251  00298E  3604               	rlcf	i2___awmod@divisor+1,f,c
 10252  002990  2A05               	incf	i2___awmod@counter,f,c
 10253  002992                     i2l630:
 10254  002992  AE04               	btfss	i2___awmod@divisor+1,7,c
 10255  002994  D7FA               	goto	i2l631
 10256  002996                     i2u464_40:
 10257  002996  5003               	movf	i2___awmod@divisor,w,c
 10258  002998  5C01               	subwf	i2___awmod@dividend,w,c
 10259  00299A  5004               	movf	i2___awmod@divisor+1,w,c
 10260  00299C  5802               	subwfb	i2___awmod@dividend+1,w,c
 10261  00299E  A0D8               	btfss	status,0,c
 10262  0029A0  D004               	goto	i2l634
 10263  0029A2  5003               	movf	i2___awmod@divisor,w,c
 10264  0029A4  5E01               	subwf	i2___awmod@dividend,f,c
 10265  0029A6  5004               	movf	i2___awmod@divisor+1,w,c
 10266  0029A8  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10267  0029AA                     i2l634:
 10268  0029AA  90D8               	bcf	status,0,c
 10269  0029AC  3204               	rrcf	i2___awmod@divisor+1,f,c
 10270  0029AE  3203               	rrcf	i2___awmod@divisor,f,c
 10271  0029B0  2E05               	decfsz	i2___awmod@counter,f,c
 10272  0029B2  D7F1               	goto	i2u464_40
 10273  0029B4                     i2l635:
 10274  0029B4  5006               	movf	i2___awmod@sign,w,c
 10275  0029B6  B4D8               	btfsc	status,2,c
 10276  0029B8  D004               	goto	i2l636
 10277  0029BA  6C01               	negf	i2___awmod@dividend,c
 10278  0029BC  1E02               	comf	i2___awmod@dividend+1,f,c
 10279  0029BE  B0D8               	btfsc	status,0,c
 10280  0029C0  2A02               	incf	i2___awmod@dividend+1,f,c
 10281  0029C2                     i2l636:
 10282  0029C2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10283  0029C6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10284  0029CA  0012               	return	
 10285  0029CC                     __end_ofi2___awmod:
 10286                           	opt stack 0
 10287                           pclatu	equ	0xFFB
 10288                           pclath	equ	0xFFA
 10289                           tblptru	equ	0xFF8
 10290                           tblptrh	equ	0xFF7
 10291                           tblptrl	equ	0xFF6
 10292                           tablat	equ	0xFF5
 10293                           prodh	equ	0xFF4
 10294                           prodl	equ	0xFF3
 10295                           intcon	equ	0xFF2
 10296                           intcon2	equ	0xFF1
 10297                           intcon3	equ	0xFF0
 10298                           postinc0	equ	0xFEE
 10299                           fsr0h	equ	0xFEA
 10300                           fsr0l	equ	0xFE9
 10301                           wreg	equ	0xFE8
 10302                           indf1	equ	0xFE7
 10303                           postdec1	equ	0xFE5
 10304                           fsr1h	equ	0xFE2
 10305                           fsr1l	equ	0xFE1
 10306                           indf2	equ	0xFDF
 10307                           postinc2	equ	0xFDE
 10308                           postdec2	equ	0xFDD
 10309                           fsr2h	equ	0xFDA
 10310                           fsr2l	equ	0xFD9
 10311                           status	equ	0xFD8
 10312                           pclatu	equ	0xFFB
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           intcon3	equ	0xFF0
 10323                           postinc0	equ	0xFEE
 10324                           fsr0h	equ	0xFEA
 10325                           fsr0l	equ	0xFE9
 10326                           wreg	equ	0xFE8
 10327                           indf1	equ	0xFE7
 10328                           postdec1	equ	0xFE5
 10329                           fsr1h	equ	0xFE2
 10330                           fsr1l	equ	0xFE1
 10331                           indf2	equ	0xFDF
 10332                           postinc2	equ	0xFDE
 10333                           postdec2	equ	0xFDD
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338                           	psect	rparam
 10339  0000                     pclatu	equ	0xFFB
 10340                           pclath	equ	0xFFA
 10341                           tblptru	equ	0xFF8
 10342                           tblptrh	equ	0xFF7
 10343                           tblptrl	equ	0xFF6
 10344                           tablat	equ	0xFF5
 10345                           prodh	equ	0xFF4
 10346                           prodl	equ	0xFF3
 10347                           intcon	equ	0xFF2
 10348                           intcon2	equ	0xFF1
 10349                           intcon3	equ	0xFF0
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           postdec1	equ	0xFE5
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365                           	psect	temp
 10366  000065                     btemp:
 10367                           	opt stack 0
 10368  000065                     	ds	1
 10369  0000                     int$flags	set	btemp
 10370  0000                     wtemp6	set	btemp+1
 10371                           pclatu	equ	0xFFB
 10372                           pclath	equ	0xFFA
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon	equ	0xFF2
 10380                           intcon2	equ	0xFF1
 10381                           intcon3	equ	0xFF0
 10382                           postinc0	equ	0xFEE
 10383                           fsr0h	equ	0xFEA
 10384                           fsr0l	equ	0xFE9
 10385                           wreg	equ	0xFE8
 10386                           indf1	equ	0xFE7
 10387                           postdec1	equ	0xFE5
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8


Data Sizes:
    Strings     115
    Constant    144
    Data        4
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     100
    BANK0           128     67      69
    BANK1           256     67      67
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_7(CODE[16]), STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[15]), 
		 -> STR_3(CODE[21]), STR_2(CODE[11]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> main@Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _main->___fladd
    _main->___fldiv
    _sprintf->___fladd
    _scale->___flmul
    _fround->___flmul
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___flsub->___fladd
    ___flneg->___xxtofl
    ___flge->___fladd
    _set_pwm1_percent->___fladd
    _set_pwm1_percent->___fldiv
    ___fltol->___fladd
    ___flmul->___awdiv
    ___fladd->_fround
    _read_adc_voltage->___fldiv
    ___xxtofl->___wmul
    ___fldiv->___flmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    ___lwdiv->___wmul

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___awmod

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flge
    ___flsub->___fladd
    ___flge->___fladd
    _set_pwm1_percent->___fltol
    ___fltol->___fladd

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                71    71      0  107553
                                             65 BANK0      2     2      0
                                              0 BANK1     67    67      0
                        _PWM_Disable
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                            ___lwdiv
                             ___wmul
                           ___xxtofl
                           _delay_ms
                       _initTimers01
                    _init_adc_no_lib
                          _init_pwm1
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                _read_adc_raw_no_lib
                   _read_adc_voltage
                  _set_compare_value
                   _set_pwm1_percent
                       _set_pwm1_raw
                         _setupPorts
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   52950
                                             20 BANK0     45    35     10
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   10970
                                             65 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4   10691
                                             65 COMRAM    13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2163
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     634
                                             26 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     634
                                             26 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             39 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5087
                                              8 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     515
                                             46 COMRAM     4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1166
                                              8 BANK0     12     4      8
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       6
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_percent                                    10     6      4   15172
                                             18 BANK0     10     6      4
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl (ARG)
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_raw                                         4     2      2     692
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     967
                                              8 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5933
                                             40 COMRAM    25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4702
                                             78 COMRAM    12     4      8
                                              0 BANK0      8     8      0
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _set_compare_value                                    2     0      2     242
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    4787
                                              0 BANK0     11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             26 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     836
                                             32 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1132
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2655
                                             65 COMRAM    25    17      8
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4981
                                             40 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    4196
                                             39 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    2177
                                             36 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2223
                                             36 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1439
                                             34 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      99
                                             32 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      68
                                             26 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     518
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     421
                                             32 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_Disable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             20    20      0     348
                                              6 COMRAM    20    20      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM_Disable
   ___fladd
     ___flneg (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___fldiv
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___flge
     ___fladd (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___flneg (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   ___flneg
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___fltol
     ___fladd (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___flneg (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   ___xxtofl
     ___wmul (ARG)
   _delay_ms
   _initTimers01
   _init_adc_no_lib
   _init_pwm1
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_raw_no_lib
   _read_adc_voltage
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _set_compare_value
   _set_pwm1_percent
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___fldiv
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___fltol
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
     _set_pwm1_raw (ARG)
   _set_pwm1_raw
   _setupPorts
   _setupSerial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___flge
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flsub
       ___fladd
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _highIsr (ROOT)
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     43      43       7       26.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     43      45       5       53.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      64       1       79.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EC      34        0.0%
DATA                 0      0      EC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 25 12:22:06 2024

             ?_read_adc_voltage 0080                               _C 005B                               _H 00C3  
                  ___fldiv@aexp 005A                    ___fldiv@bexp 0059                    ___fldiv@sign 004E  
            ??_read_adc_voltage 005B                  ?_lcd_send_byte 0023                    ___awdiv@sign 0026  
           ___wmul@multiplicand 001D                     __CFG_BORV$3 000000                     _PWM_Disable 2EA2  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                     __CFG_OSC$XT 000000                     __CFG_LVP$ON 000000  
                   __CFG_WDT$ON 000000                             l200 2AEE                             l202 2B06  
                           l203 2B12                             l204 2B1E                             l140 0D48  
                           l132 0AD6                             l141 0DA8                             l133 0AF2  
                           l142 0EAE                             l143 0E86                             l135 0CB0  
                           l208 2AC0                             l136 0F70                             l209 2A96  
                           l145 0F58                             l137 0CCA                             l170 2D90  
                           l234 2D04                             l410 0602                             l146 0FB8  
                           l138 0F8A                             l163 2DF0                             l403 05A8  
                           l147 0FC4                             l139 0D06                             l164 2DE2  
                           l412 06B6                             l148 0FE4                             l421 0864  
                           l413 06A0                             l405 05D4                             l190 2C82  
                           l262 2752                             l342 1212                             l422 084E  
                           l406 05BE                             l183 2A4E                             l191 2C70  
                           l343 1134                             l431 0938                             l415 06DA  
                           l192 2C9C                             l336 1ED2                             l432 095A  
                           l424 08A8                             l416 06DE                             l360 00EC  
                           l169 2D96                             l185 2A76                             l193 2C74  
                           l425 08C0                             l417 0700                             l409 0696  
                           l353 0020                             l178 2C5E                             l194 2C78  
                           l346 11E8                             l442 0A80                             l434 097C  
                           l418 0842                             l370 014C                             l354 003C  
                           l195 2C7C                             l339 1FAE                             l347 134C  
                           l443 09F8                             l435 0984                             l419 0760  
                           l363 01EC                             l371 0168                             l436 09A8  
                           l380 01DA                             l372 017E                             l356 006A  
                           l701 2678                             l621 2848                             l349 1400  
                           l437 09B0                             l429 0918                             l381 086E  
                           l702 266C                             l622 2852                             l614 27FA  
                           l630 2922                             l390 04C4                             l382 0230  
                           l374 0198                             l366 0148                             l358 013A  
                           l199 2B2A                             l623 2860                             l615 280A  
                           l631 291A                             l383 027E                             l367 021C  
                           l375 0188                             l359 0124                             l704 2694  
                           l617 2828                             l393 045E                             l385 02EA  
                           l377 01C6                             l650 232C                             l618 2820  
                           l634 293A                             l810 2E5A                             l386 036A  
                           l378 01AA                             l635 2944                             l627 2900  
                           l652 236A                             l636 2952                             l628 290C  
                           l388 0398                             l653 235A                             l389 03E2  
                           l670 2D44                             l646 229C                             l750 2178  
                           l663 23DC                             l399 053C                             l664 2410  
                           l840 28CC                             l648 22BA                             l752 21A4  
                           l665 244E                             l841 28DA                             l649 22FC  
                           l753 21DE                             l930 18CC                             l666 248C  
                           l850 2A12                             l658 238E                             l762 2266  
                           l754 2206                             l931 18AA                             l923 17F2  
                           l851 2A20                             l659 2382                             l763 225A  
                           l940 1914                             l932 18B8                             l924 17EE  
                           l836 2898                             l756 2242                             l941 1918  
                           l933 18BC                             l693 25E8                             l837 288C  
                           l757 2232                             l926 184E                             l918 17AA  
                           l846 29EA                             l951 19FE                             l927 1812  
                           l919 17A6                             l695 2654                             l847 29DE  
                           l944 19B4                             l936 192A                             l696 2644  
                           l961 1A72                             l953 1A08                             l937 18F0  
                           l890 2B56                             l946 19C4                             l980 1B2A  
                           l893 2B7E                             l965 1A98                             l949 19E8  
                           l894 2B88                             l982 1B74                             l966 1AA0  
                           l958 1A2A                             l975 1AEE                             l967 1AA2  
                           l992 1C7E                             l984 1B9C                             l976 1AEA  
                           l889 2B5E                             l993 1C60                             l985 1C4A  
                           l986 1BFA                             l987 1C22                             l979 1B2E  
                           l989 1C48                             l999 1CB6                    __CFG_CPB$OFF 000000  
                           _PR2 000FCB                    __CFG_CPD$OFF 000000                             _lcd 000F83  
                  ___awmod@sign 0020                             prod 000FF3       read_adc_voltage@raw_value 0089  
                           wreg 000FE8                    ___flmul@aexp 0036                    ___flmul@bexp 003B  
                  ___flmul@sign 0035                    ___flmul@temp 0040                    ___flmul@prod 003C  
                   main@channel 0142                     lcd_gotoxy@x 0026                     lcd_gotoxy@y 0025  
                  ___fltol@exp1 0091                            l1001 1CFA                            l1002 1D1E  
                          l1010 1456                            l1003 1D48                            l1011 146A  
                          l1004 1D54                            l1020 1688                            l1005 1D56  
                          l1021 166A                            l1013 149A                            l1030 1722  
                          l1014 1496                            l1015 14AA                            l1032 1746  
                          l1016 14C8                            l1041 207A                            l1033 1764  
                          l1009 145A                            l1042 206E                            l1027 16C0  
                          l1052 2108                            l1044 20B8                            l1053 213A  
                          l1045 20A0                            l1037 203A                            l1029 1704  
                          l1038 204A                            l1047 20EA                            l1039 2068  
                          l1048 20DE                            l6013 0AEA                            l6123 0E86  
                          l4541 24C4                            l5603 2A6E                            l5355 1D48  
                          l5803 05BE                            l5807 05CE                            l5827 06A0  
                          l5763 0430                            l5755 03E2                            l5691 01AA  
                          l5589 2A46                            l5685 0188                            l5943 09F8  
                          l5783 0540                            l5947 0A7C                            l5889 08C4  
                          STR_1 FFA0                            STR_2 FFEF                            STR_3 FF8B  
                          STR_4 FFE0                            STR_5 FFC2                            STR_6 FFD1  
                          STR_7 FFB2                            STR_8 FFFA                            STR_9 FFFC  
                          u5010 18D4                            _IPR1 000F9F                            _IPR2 000FA2  
                          u6000 1CB2                            u5220 1A7E                            u5140 1A0C  
                          u6030 1D08                            u6040 1D2C                            u6200 289C  
                          u5170 1A26                            u5330 14B6                            u6130 2606  
                          u7010 0B2E                            u5420 1712                            u5340 162C  
                          u6310 20F4                            u5430 1730                            u6230 29EE  
                          u6135 25FC                            u5345 1622                            u6170 267E  
                          u6410 00C8                            u7035 0D68                            u5540 2926  
                          u5390 16BC                            u7127 2C56                            u6360 2A64  
                          u5480 282C                            u6600 0430                            u7137 2DE4  
                          _PIR1 000F9E                            _PIR2 000FA1                            u7075 0F40  
                          u5820 2394                            u6700 06C4                            u5750 226C  
                          u6710 06D4                            u4855 2C2E                            u5671 215C  
                          u4856 2C30                            u4960 1880                            u6800 08FC  
                          u6640 0578                            u6560 03A8                            u4970 1890  
                          u6570 03F4                            u5691 2188                            u4980 1892  
                          u6910 0A90                            u6670 05E2                            u6920 0AAA  
                          u6930 2AB8                            u6940 2AE2                            u6880 09B8  
                          u6937 2AAE                            u6890 09D6                            u6947 2AD8  
                          u6980 2B62                            _TMR2 000FCC                ?_lcd_send_nibble 0001  
                   main@raw_val 0138                            _main 0AB8                            _mode 0060  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 0065  
                          prodh 000FF4                            prodl 000FF3                            start 000E  
                 __CFG_IESO$OFF 000000                 ___fldiv@new_exp 0053                     main@voltage 0120  
                  _sprintf$1919 00A2                   __CFG_MCLRE$ON 000000                    ___param_bank 000000  
              _set_pwm1_percent 26A6            __end_of_delay_cycles 2DB2                   ___fltol@sign1 0090  
               __end_of___fladd 1ABE                           ?_main 0001                 __end_of___fldiv 1D72  
               __end_of___awdiv 286A                 __end_of___flneg 2D56                           STR_10 FFFA  
                         STR_11 FFFC                 __end_of___awmod 295C                 __end_of___flmul 177A  
               __end_of___flsub 2C24                 __end_of___fltol 26A6                 __end_of___lldiv 28EC  
               ___awdiv@divisor 0023                 __end_of___llmod 2A32                           _T2CON 000FCA  
                         _T3CON 000FB1                 __end_of___lwdiv 2B92                           i2l123 2534  
                         i2l124 256C                           i2l125 2574                           i2l126 257C  
                         i2l630 2992                           i2l631 298A                           i2l634 29AA  
                         i2l635 29B4                           i2l627 2970                           i2l636 29C2  
                         i2l628 297C                 ___awdiv@counter 0025                           _RCREG 000FAE  
                         _RCSTA 000FAB                           _TMR3H 000FB3                           _TMR3L 000FB2  
                         _SPBRG 000FAF         read_adc_voltage@channel 0088                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96                           _TXREG 000FAD                           _TXSTA 000FAC  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                 __end_of_highIsr 25C8                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
               __end_of_dpowers FF8B                           _scale 0FF2                 __end_of_isdigit 2E62  
               _init_adc_no_lib 2E8C                           pclath 000FFA                           tablat 000FF5  
                         status 000FD8         read_adc_voltage@voltage 0084                           wtemp6 0066  
               __end_of_sprintf 0AB8              __size_ofi2___awmod 0070                  __CFG_PBADEN$ON 000000  
               __initialization 2CAE                    __end_of_main 0FF2                 ??_lcd_send_byte 0024  
                        ??_main 00C1                   __activetblptr 000002                   ?_initTimers01 0001  
          __size_of__tdiv_to_l_ 0132                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                ___llmod@dividend 0028                          ?_scale 0042  
                        _ADRESH 000FC4                          _ADRESL 000FC3                          _CCPR2H 000FBC  
                        _CCPR1L 000FBE                          _CCPR2L 000FBB                ___awdiv@dividend 0021  
                        _INTCON 000FF2                          _SPBRGH 000FB0                __end_of___xxtofl 214C  
              __end_of_delay_ms 2DFE                  __CFG_XINST$OFF 000000                __end_of__powers_ FF2F  
              __end_of_lcd_init 2A94                          ___flge 23A6                __end_of_lcd_putc 2B40  
              __end_of_lcd_puts 2AEA                       ??___fladd 0080                          ___wmul 2DB2  
                     ??___fldiv 004A                       ??___awdiv 0025                       ??___flneg 0033  
                __CFG_STVREN$ON 000000                       ??___awmod 001F                       ??___flmul 0031  
                     ??___flsub 005B                       ??___fltol 008C                       ??___lldiv 0023  
                     ??___llmod 0030                       ??___lwdiv 0025                          _fround 1D72  
              ___awdiv@quotient 0027                 ___awmod@divisor 001D                 ___awmod@counter 001F  
                        main@AN 012A                          main@HC 0124                          main@RT 013A  
                     ??_highIsr 0007                          main@sp 013E                  ??_initTimers01 001B  
       __end_of_init_adc_no_lib 2E98                    __pdataCOMRAM 0061                       ??_isdigit 001B  
             __end_ofi2___awmod 29CC                    __mediumconst FEFA                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                   main@pwm_value 0136  
                i2___awmod@sign 0006                    ?_setupSerial 0001                       ??_sprintf 009E  
                    ___flge@ff1 0088                      ___flge@ff2 008C                    ___xxtofl@arg 002B  
                  ___xxtofl@exp 002A                    ___xxtofl@val 0021                      __accesstop 0080  
       __end_of__initialization 2CE0                      ___flneg@f1 002F                   ___rparam_used 000001  
                    ___fltol@f1 0088                  __pcstackCOMRAM 0001           __size_of_delay_cycles 002E  
                 __end_of_scale 142A                    ?_PWM_Disable 0001                      __div_to_l_ 227E  
     __size_of_read_adc_voltage 0086               lcd_gotoxy@address 0027                 __div_to_l_@exp1 0028  
               __div_to_l_@cntr 0027                         ??_scale 0046                 __div_to_l_@quot 0023  
                  sprintf@width 00B8        __end_of_set_pwm1_percent 2760                      __pbssBANK0 00C3  
   __end_of_read_adc_raw_no_lib 2D28                    _delay_cycles 2D84                   __div_to_l_@f1 001B  
                 __div_to_l_@f2 001F              __size_of_init_pwm1 0010                  lcd_send_byte@n 0023  
                       ?___flge 0088                  main@cool_error 0128                         ?___wmul 001B  
              lcd_send_nibble@n 0022                         _CCP1CON 000FBD                         _CCP2CON 000FBA  
                       ?_fround 0042                ?_init_adc_no_lib 0001                         _INTCON2 000FF1  
                       _INTCON3 000FF0                       ?___xxtofl 0021                       ?_delay_ms 001B  
                    _lcd_gotoxy 2C6C                       ?_lcd_init 0001                       ?_lcd_putc 0001  
                     ?_lcd_puts 0029            __end_of_initTimers01 2BDC               __end_of__npowers_ FF63  
                       __Hparam 0000                      _scale$1918 0046                         __Lparam 0000  
      __size_of_lcd_send_nibble 0022                 __size_of___flge 0122                         ___fladd 177A  
                       ___fldiv 1ABE                         ___awdiv 27E6                         ___flneg 2D28  
                       ___awmod 28EC                         ___flmul 142A                         ___flsub 2BDC  
                       ___fltol 25C8                         ___lldiv 286A                 __size_of___wmul 0026  
                       ___llmod 29CC                         ___lwdiv 2B40                   ?_set_pwm1_raw 001B  
                       __pcinit 2CAE                 __size_of_fround 028A                         __ramtop 1000  
                       __ptext0 0AB8                         __ptext1 0012                         __ptext2 0FF2  
                       __ptext3 2E44                         __ptext4 1D72                         __ptext5 28EC  
                       __ptext6 27E6                         __ptext7 214C                         __ptext8 227E  
                       __ptext9 29CC                         _highIsr 0008                     ?__div_to_l_ 001B  
                       _dpowers FF63                       _T2CONbits 000FCA                         _isdigit 2E44  
                    ??___xxtofl 0025                       _T3CONbits 000FB1               __end_of_init_pwm1 2E8C  
              ___awmod@dividend 001B                      ??_delay_ms 001D                         _sprintf 0012  
                    ??_lcd_init 0025                  __pintcode_body 24C8                      ??_lcd_putc 0028  
                    ??_lcd_puts 002B            end_of_initialization 2CE0            __size_of_setupSerial 0024  
                 __Lmediumconst FEFA                         int_func 24C8            lcd_send_byte@cm_data 0024  
               ___lldiv@divisor 001F                 ___lldiv@counter 0027                       _RCSTAbits 000FAB  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                  ??_set_pwm1_raw 001D                  __tdiv_to_l_@f1 001B  
                __tdiv_to_l_@f2 001F                      _hysteresis 005F           __end_of_lcd_send_byte 2C6C  
              setupSerial@dummy 001B                   ??__tdiv_to_l_ 0023                       _PORTBbits 000F81  
                     _PORTCbits 000F82                       _PORTEbits 000F84                      _setupPorts 2E62  
           set_pwm1_percent@tmp 0096            __size_of_PWM_Disable 000A                     ___fladd@grs 005A  
                 ___xxtofl@sign 0029                _read_adc_voltage 2760                       _TRISCbits 000F94  
                   ?_lcd_gotoxy 0025                     ___fldiv@grs 0055                      main@Buffer 0100  
                   ___fldiv@rem 004F                       i2___awmod 295C                 _LCD_INIT_STRING 0061  
                     _RPS_count 005D                     ___flmul@grs 0037                     _CCP1CONbits 000FBD  
                     _TXSTAbits 000FAC             __size_of__div_to_l_ 0128               _set_compare_value 2E98  
                __end_of___flge 24C8                  __end_of___wmul 2DD8                     _BAUDCONbits 000FB8  
            ?_set_compare_value 001B                   __pidataCOMRAM 2EAC                   delay_cycles@n 001E  
                 delay_cycles@x 001F               ??_lcd_send_nibble 0021                  __end_of_fround 1FFC  
           start_initialization 2CAE             ??_set_compare_value 001D             __end_of__tdiv_to_l_ 227E  
                    ?i2___awmod 0001           __size_of_initTimers01 004A               ?_set_pwm1_percent 0092  
            ??_set_pwm1_percent 005B                 ___llmod@divisor 002C                 ___llmod@counter 0030  
     __end_of_set_compare_value 2EA2                        ??___flge 0090             __size_of_lcd_gotoxy 0042  
                      ??___wmul 001F    read_adc_raw_no_lib@raw_value 0020                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 0046                   sprintf@tmpval 00AE                     ?_setupPorts 0001  
                     ___fladd@a 0053                       ___fladd@b 004F                      fround@prec 004E  
                     ___fldiv@a 0046                       ___fldiv@b 0042                    _initTimers01 2B92  
                     ___flmul@a 002D                       ___flmul@b 0029                     __pbssCOMRAM 005B  
                     ___flsub@a 008C                       ___flsub@b 0088                   __pcstackBANK0 0080  
                 __pcstackBANK1 0100               __size_of___xxtofl 0150                    _isdigit$1549 001C  
             __size_of_delay_ms 0026            __end_of_set_pwm1_raw 2D84               __size_of_lcd_init 0062  
                   sprintf@flag 00AC               __size_of_lcd_putc 0056               __size_of_lcd_puts 0056  
                   sprintf@fval 00BA                     sprintf@prec 00BE                ___lwdiv@dividend 0021  
             __CFG_CCP2MX$PORTC 000000                       __pintcode 0008    __size_of_read_adc_raw_no_lib 003A  
                 __pmediumconst FEFA                        ?___fladd 004F                        ?___fldiv 0042  
                      ?___awdiv 0021                        ?___flneg 002F                        ?___awmod 001B  
                      ?___flmul 0029                        ?___flsub 0088                        ?___fltol 0088  
                      ?___lldiv 001B                        ?___llmod 0028                       __npowers_ FF2F  
                      ?___lwdiv 0021                     __tdiv_to_l_ 214C                        ?_highIsr 0001  
                  ??__div_to_l_ 0023                        ?_isdigit 0001                ___lwdiv@quotient 0026  
                   ??i2___awmod 0005                        ?_sprintf 0094                       _init_pwm1 2E7C  
                __size_of_scale 0438        __size_of_init_adc_no_lib 000C                  ___wmul@product 001F  
                      _LATCbits 000F8B                       delay_ms@n 001B                       delay_ms@x 001D  
                      _PIE1bits 000F9D                        _PIE2bits 000FA0             __size_of_setupPorts 001A  
    __size_of_set_compare_value 000A                        _PIR1bits 000F9E              __end_of__div_to_l_ 23A6  
                      _PIR2bits 000FA1        __end_of_read_adc_voltage 27E6                        i2u464_40 2996  
                      i2u714_47 2520                        i2u715_47 2542                __CFG_WDTPS$32768 000000  
    read_adc_raw_no_lib@channel 001F                      _ADCON0bits 000FC2               ___wmul@multiplier 001B  
                     lcd_init@i 0025                       lcd_putc@c 0028                       lcd_puts@s 0029  
                  ??_lcd_gotoxy 0026                   ??_setupSerial 001B                      ?_init_pwm1 0001  
                   _INTCON3bits 000FF0                       copy_data0 2CC2              i2___awmod@dividend 0001  
set_compare_value@compare_value 001B                 _lcd_send_nibble 2E22                        __Hrparam 0000  
         set_pwm1_raw@raw_value 001B                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
            __end_of_lcd_gotoxy 2CAE                __size_of___fladd 0344                __size_of___fldiv 02B4  
              __size_of___awdiv 0084                __size_of___flneg 002E                __size_of___awmod 0070  
              __size_of___flmul 0350                __size_of___flsub 0048                __size_of___fltol 00DE  
              __size_of___lldiv 0082                __size_of___llmod 0066                __size_of___lwdiv 0052  
                 ??_PWM_Disable 001B                     _fround$1916 004A                     _fround$1917 0046  
              __size_of_highIsr 25C0                      sprintf@len 00AA                      sprintf@exp 00B6  
                    sprintf@val 00B2                        ___xxtofl 1FFC           __size_of_set_pwm1_raw 002E  
              __size_of_isdigit 001E                        _delay_ms 2DD8                 ___lwdiv@divisor 0023  
               ___lwdiv@counter 0025                        __ptext10 286A                        __ptext11 2BDC  
                      __ptext20 177A                        __ptext12 2D28                        __ptext21 2E98  
                      __ptext13 23A6                        __ptext30 2A32                        __ptext22 2760  
                      __ptext14 2DFE                        __ptext31 2C24                        __ptext23 2CEE  
                      __ptext15 2E62                        __ptext32 2E22                        __ptext24 1FFC  
                      __ptext16 26A6                        __ptext41 295C                        __ptext33 2D84  
                      __ptext25 2DB2                        __ptext17 2D56                        __ptext34 2DD8  
                      __ptext26 1ABE                        __ptext18 25C8                        __ptext35 2E7C  
                      __ptext27 2A94                        __ptext19 142A                        __ptext36 2E8C  
                      __ptext28 2AEA                        __ptext37 2B92                        __ptext29 2C6C  
                      __ptext38 2B40                        __ptext39 2EA2                        __powers_ FEFB  
                      _lcd_init 2A32                        _lcd_putc 2AEA                        _lcd_puts 2A94  
              __size_of_sprintf 0AA6         set_pwm1_percent@raw_val 009A          __size_of_lcd_send_byte 0048  
                 ?_delay_cycles 0001                   __size_of_main 053A             __end_of_setupSerial 2E22  
             ??_init_adc_no_lib 001B                        int$flags 0065       __size_of_set_pwm1_percent 00BA  
                  _set_pwm1_raw 2D56                    ??_setupPorts 001B               i2___awmod@divisor 0003  
             i2___awmod@counter 0005                      _INTCONbits 000FF2             __end_of_PWM_Disable 2EAC  
                      isdigit@c 001D             _read_adc_raw_no_lib 2CEE                        scale@scl 004A  
                   ??_init_pwm1 001B                        intlevel2 0000                       sprintf@ap 00A8  
                     sprintf@cp 00A6         __end_of_lcd_send_nibble 2E44                __tdiv_to_l_@exp1 002B  
              __tdiv_to_l_@cntr 002A                       sprintf@sp 0094                  ??_delay_cycles 001B  
              __tdiv_to_l_@quot 0026                ___lldiv@dividend 001B              __end_of_setupPorts 2E7C  
          ?_read_adc_raw_no_lib 001B                   _lcd_send_byte 2C24                    ?__tdiv_to_l_ 001B  
                      sprintf@c 00C0                        sprintf@f 0096                ___lldiv@quotient 0023  
         set_pwm1_percent@value 0092                     _setupSerial 2DFE                   ___fladd@signs 0057  
                  ___fladd@aexp 0058                    ___fladd@bexp 0059           ??_read_adc_raw_no_lib 001D  
